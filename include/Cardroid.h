// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Cardroid_h__
#define __Cardroid_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy {

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::PlaceTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::PlaceTyp*);

class CarTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::CarTyp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::data::zerocice::CarTyp*);

class UserTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::UserTyp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::data::zerocice::UserTyp*);

class DateTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::DateTyp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::data::zerocice::DateTyp*);

class DateTimeTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::DateTimeTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::DateTimeTyp*);

class DateTimePrefsTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::DateTimePrefsTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::DateTimePrefsTyp*);

class TripTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::TripTyp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::data::zerocice::TripTyp*);

class WaypointTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::WaypointTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::WaypointTyp*);

class PassengerTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::PassengerTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::PassengerTyp*);

class TripOfferTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::TripOfferTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::TripOfferTyp*);

class TripRequestTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::TripRequestTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::TripRequestTyp*);

class UserActivityTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::UserActivityTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::UserActivityTyp*);

class MessageTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::data::zerocice::MessageTyp>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::data::zerocice::MessageTyp*);

}

}

class QueryResult;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::QueryResult>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::QueryResult*);

namespace zerocice {

class CardroidManager;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::zerocice::CardroidManager>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::zerocice::CardroidManager*);

}

}

}

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp;
bool operator==(const PlaceTyp&, const PlaceTyp&);
bool operator<(const PlaceTyp&, const PlaceTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::PlaceTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::PlaceTyp> PlaceTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::PlaceTyp> PlaceTypPrx;
void __patch(PlaceTypPtr&, const ::Ice::ObjectPtr&);

class CarTyp;
bool operator==(const CarTyp&, const CarTyp&);
bool operator<(const CarTyp&, const CarTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::CarTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::CarTyp> CarTypPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::CarTyp> CarTypPrx;
void __patch(CarTypPtr&, const ::Ice::ObjectPtr&);

class UserTyp;
bool operator==(const UserTyp&, const UserTyp&);
bool operator<(const UserTyp&, const UserTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::UserTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::UserTyp> UserTypPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::UserTyp> UserTypPrx;
void __patch(UserTypPtr&, const ::Ice::ObjectPtr&);

class DateTyp;
bool operator==(const DateTyp&, const DateTyp&);
bool operator<(const DateTyp&, const DateTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::DateTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::DateTyp> DateTypPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::DateTyp> DateTypPrx;
void __patch(DateTypPtr&, const ::Ice::ObjectPtr&);

class DateTimeTyp;
bool operator==(const DateTimeTyp&, const DateTimeTyp&);
bool operator<(const DateTimeTyp&, const DateTimeTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::DateTimeTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::DateTimeTyp> DateTimeTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::DateTimeTyp> DateTimeTypPrx;
void __patch(DateTimeTypPtr&, const ::Ice::ObjectPtr&);

class DateTimePrefsTyp;
bool operator==(const DateTimePrefsTyp&, const DateTimePrefsTyp&);
bool operator<(const DateTimePrefsTyp&, const DateTimePrefsTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::DateTimePrefsTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::DateTimePrefsTyp> DateTimePrefsTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::DateTimePrefsTyp> DateTimePrefsTypPrx;
void __patch(DateTimePrefsTypPtr&, const ::Ice::ObjectPtr&);

class TripTyp;
bool operator==(const TripTyp&, const TripTyp&);
bool operator<(const TripTyp&, const TripTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::TripTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::TripTyp> TripTypPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::TripTyp> TripTypPrx;
void __patch(TripTypPtr&, const ::Ice::ObjectPtr&);

class WaypointTyp;
bool operator==(const WaypointTyp&, const WaypointTyp&);
bool operator<(const WaypointTyp&, const WaypointTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::WaypointTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::WaypointTyp> WaypointTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::WaypointTyp> WaypointTypPrx;
void __patch(WaypointTypPtr&, const ::Ice::ObjectPtr&);

class PassengerTyp;
bool operator==(const PassengerTyp&, const PassengerTyp&);
bool operator<(const PassengerTyp&, const PassengerTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::PassengerTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::PassengerTyp> PassengerTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::PassengerTyp> PassengerTypPrx;
void __patch(PassengerTypPtr&, const ::Ice::ObjectPtr&);

class TripOfferTyp;
bool operator==(const TripOfferTyp&, const TripOfferTyp&);
bool operator<(const TripOfferTyp&, const TripOfferTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::TripOfferTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::TripOfferTyp> TripOfferTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::TripOfferTyp> TripOfferTypPrx;
void __patch(TripOfferTypPtr&, const ::Ice::ObjectPtr&);

class TripRequestTyp;
bool operator==(const TripRequestTyp&, const TripRequestTyp&);
bool operator<(const TripRequestTyp&, const TripRequestTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::TripRequestTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::TripRequestTyp> TripRequestTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::TripRequestTyp> TripRequestTypPrx;
void __patch(TripRequestTypPtr&, const ::Ice::ObjectPtr&);

class UserActivityTyp;
bool operator==(const UserActivityTyp&, const UserActivityTyp&);
bool operator<(const UserActivityTyp&, const UserActivityTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::UserActivityTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::UserActivityTyp> UserActivityTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::UserActivityTyp> UserActivityTypPrx;
void __patch(UserActivityTypPtr&, const ::Ice::ObjectPtr&);

class MessageTyp;
bool operator==(const MessageTyp&, const MessageTyp&);
bool operator<(const MessageTyp&, const MessageTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::MessageTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::MessageTyp> MessageTypPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::data::zerocice::MessageTyp> MessageTypPrx;
void __patch(MessageTypPtr&, const ::Ice::ObjectPtr&);

}

}

class QueryResult;
bool operator==(const QueryResult&, const QueryResult&);
bool operator<(const QueryResult&, const QueryResult&);
::Ice::Object* upCast(::cardroid::QueryResult*);
typedef ::IceInternal::Handle< ::cardroid::QueryResult> QueryResultPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::QueryResult> QueryResultPrx;
void __patch(QueryResultPtr&, const ::Ice::ObjectPtr&);

namespace zerocice {

class CardroidManager;
bool operator==(const CardroidManager&, const CardroidManager&);
bool operator<(const CardroidManager&, const CardroidManager&);
::Ice::Object* upCast(::cardroid::zerocice::CardroidManager*);
typedef ::IceInternal::Handle< ::cardroid::zerocice::CardroidManager> CardroidManagerPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::zerocice::CardroidManager> CardroidManagerPrx;
void __patch(CardroidManagerPtr&, const ::Ice::ObjectPtr&);

}

}

namespace cardroid {

namespace data {

namespace zerocice {

struct LatLngTyp {
	::Ice::Double latitude;
	::Ice::Double longitude;
};

typedef ::std::vector< ::Ice::Byte> Blob;

enum CompressFormat {
	JPEG, PNG, WEBP
};

enum Config {
	ALPHA8, ARGB4444, ARGB8888, RGB565
};

struct BitmapTyp {
	::cardroid::data::zerocice::Blob bitmapBitmap;
	::cardroid::data::zerocice::CompressFormat bitmapCompressFormat;
	::cardroid::data::zerocice::Config bitmapConfig;
	::Ice::Int density;
};

enum Fuel {
	UNLEADED95, UNLEADED98, DIESELA, DIESELAPLUS, BIODIESEL
};

typedef ::std::vector< ::cardroid::data::zerocice::CarTypPrx> CarCollection;

enum TimePreferences {
	ANY, MORNING, AFTERNOON, NIGHT
};

typedef ::std::vector< ::std::string> WeekdaysV;

enum Periodicity {
	EVERYWEEK, EVENWEEKS, ODDWEEKS
};

typedef ::std::vector< ::cardroid::data::zerocice::WaypointTypPtr> WaypointCollection;

typedef ::std::vector< ::cardroid::data::zerocice::PassengerTypPtr> PassengerCollection;

typedef ::std::vector< ::std::string> AllowedV;

enum ActivityType {
	TRIPJOIN, TRIPREQUESTANSWERED, TRIPACCEPT, TRIPREFUSE
};

}

}

typedef ::std::vector< ::Ice::ObjectPrx> ResultSeq;

namespace zerocice {

class OCCIException: public ::Ice::LocalException {
public:

	OCCIException(const char*, int);
	virtual ~OCCIException() throw ();

	virtual ::std::string ice_name() const;
	virtual OCCIException* ice_clone() const;
	virtual void ice_throw() const;
};

}

}

namespace Ice {
template<>
struct StreamableTraits< ::cardroid::data::zerocice::LatLngTyp> {
	static const StreamHelperCategory helper = StreamHelperCategoryStruct;
	static const int minWireSize = 16;
	static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::cardroid::data::zerocice::LatLngTyp, S> {
	static void write(S* __os, const ::cardroid::data::zerocice::LatLngTyp& v) {
		__os->write(v.latitude);
		__os->write(v.longitude);
	}
};

template<class S>
struct StreamReader< ::cardroid::data::zerocice::LatLngTyp, S> {
	static void read(S* __is, ::cardroid::data::zerocice::LatLngTyp& v) {
		__is->read(v.latitude);
		__is->read(v.longitude);
	}
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::CompressFormat> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 2;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::Config> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 3;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::BitmapTyp> {
	static const StreamHelperCategory helper = StreamHelperCategoryStruct;
	static const int minWireSize = 7;
	static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::cardroid::data::zerocice::BitmapTyp, S> {
	static void write(S* __os, const ::cardroid::data::zerocice::BitmapTyp& v) {
		__os->write(v.bitmapBitmap);
		__os->write(v.bitmapCompressFormat);
		__os->write(v.bitmapConfig);
		__os->write(v.density);
	}
};

template<class S>
struct StreamReader< ::cardroid::data::zerocice::BitmapTyp, S> {
	static void read(S* __is, ::cardroid::data::zerocice::BitmapTyp& v) {
		__is->read(v.bitmapBitmap);
		__is->read(v.bitmapCompressFormat);
		__is->read(v.bitmapConfig);
		__is->read(v.density);
	}
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::Fuel> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 4;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::TimePreferences> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 3;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::Periodicity> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 2;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::cardroid::data::zerocice::ActivityType> {
	static const StreamHelperCategory helper = StreamHelperCategoryEnum;
	static const int minValue = 0;
	static const int maxValue = 3;
	static const int minWireSize = 1;
	static const bool fixedLength = false;
};

}

namespace cardroid {

namespace data {

namespace zerocice {

class Callback_PlaceTyp_getName_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_getName_Base> Callback_PlaceTyp_getNamePtr;

class Callback_PlaceTyp_setName_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_setName_Base> Callback_PlaceTyp_setNamePtr;

class Callback_PlaceTyp_getCoords_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_getCoords_Base> Callback_PlaceTyp_getCoordsPtr;

class Callback_PlaceTyp_setCoords_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_setCoords_Base> Callback_PlaceTyp_setCoordsPtr;

class Callback_PlaceTyp_getDescription_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_getDescription_Base> Callback_PlaceTyp_getDescriptionPtr;

class Callback_PlaceTyp_setDescription_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_setDescription_Base> Callback_PlaceTyp_setDescriptionPtr;

class Callback_PlaceTyp_hasDescription_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_hasDescription_Base> Callback_PlaceTyp_hasDescriptionPtr;

class Callback_PlaceTyp_getSnapshotBytes_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_getSnapshotBytes_Base> Callback_PlaceTyp_getSnapshotBytesPtr;

class Callback_PlaceTyp_setSnapshotBytes_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_setSnapshotBytes_Base> Callback_PlaceTyp_setSnapshotBytesPtr;

class Callback_PlaceTyp_hasSnapshot_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_hasSnapshot_Base> Callback_PlaceTyp_hasSnapshotPtr;

class Callback_PlaceTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PlaceTyp_toString_Base> Callback_PlaceTyp_toStringPtr;

class Callback_CarTyp_getBrand_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getBrand_Base> Callback_CarTyp_getBrandPtr;

class Callback_CarTyp_setBrand_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setBrand_Base> Callback_CarTyp_setBrandPtr;

class Callback_CarTyp_getModel_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getModel_Base> Callback_CarTyp_getModelPtr;

class Callback_CarTyp_setModel_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setModel_Base> Callback_CarTyp_setModelPtr;

class Callback_CarTyp_getCarFuel_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getCarFuel_Base> Callback_CarTyp_getCarFuelPtr;

class Callback_CarTyp_setCarFuel_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setCarFuel_Base> Callback_CarTyp_setCarFuelPtr;

class Callback_CarTyp_getConsumptionPerKm_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getConsumptionPerKm_Base> Callback_CarTyp_getConsumptionPerKmPtr;

class Callback_CarTyp_setConsumptionPerKm_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setConsumptionPerKm_Base> Callback_CarTyp_setConsumptionPerKmPtr;

class Callback_CarTyp_getNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getNSeats_Base> Callback_CarTyp_getNSeatsPtr;

class Callback_CarTyp_setNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setNSeats_Base> Callback_CarTyp_setNSeatsPtr;

class Callback_CarTyp_getColor_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getColor_Base> Callback_CarTyp_getColorPtr;

class Callback_CarTyp_setColor_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setColor_Base> Callback_CarTyp_setColorPtr;

class Callback_CarTyp_getPlate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_getPlate_Base> Callback_CarTyp_getPlatePtr;

class Callback_CarTyp_setPlate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_setPlate_Base> Callback_CarTyp_setPlatePtr;

class Callback_CarTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CarTyp_toString_Base> Callback_CarTyp_toStringPtr;

class Callback_UserTyp_getName_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getName_Base> Callback_UserTyp_getNamePtr;

class Callback_UserTyp_setName_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setName_Base> Callback_UserTyp_setNamePtr;

class Callback_UserTyp_getSurname_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getSurname_Base> Callback_UserTyp_getSurnamePtr;

class Callback_UserTyp_setSurname_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setSurname_Base> Callback_UserTyp_setSurnamePtr;

class Callback_UserTyp_getAvatarBytes_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getAvatarBytes_Base> Callback_UserTyp_getAvatarBytesPtr;

class Callback_UserTyp_setAvatarBytes_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setAvatarBytes_Base> Callback_UserTyp_setAvatarBytesPtr;

class Callback_UserTyp_hasAvatar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_hasAvatar_Base> Callback_UserTyp_hasAvatarPtr;

class Callback_UserTyp_getUserHome_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getUserHome_Base> Callback_UserTyp_getUserHomePtr;

class Callback_UserTyp_setUserHome_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setUserHome_Base> Callback_UserTyp_setUserHomePtr;

class Callback_UserTyp_getTelephone_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getTelephone_Base> Callback_UserTyp_getTelephonePtr;

class Callback_UserTyp_setTelephone_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setTelephone_Base> Callback_UserTyp_setTelephonePtr;

class Callback_UserTyp_getEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getEmail_Base> Callback_UserTyp_getEmailPtr;

class Callback_UserTyp_setEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setEmail_Base> Callback_UserTyp_setEmailPtr;

class Callback_UserTyp_getReputation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getReputation_Base> Callback_UserTyp_getReputationPtr;

class Callback_UserTyp_setReputation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setReputation_Base> Callback_UserTyp_setReputationPtr;

class Callback_UserTyp_hasReputation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_hasReputation_Base> Callback_UserTyp_hasReputationPtr;

class Callback_UserTyp_getUserCars_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getUserCars_Base> Callback_UserTyp_getUserCarsPtr;

class Callback_UserTyp_setUserCars_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_setUserCars_Base> Callback_UserTyp_setUserCarsPtr;

class Callback_UserTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_toString_Base> Callback_UserTyp_toStringPtr;

class Callback_UserTyp_increaseReputation1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_increaseReputation1_Base> Callback_UserTyp_increaseReputation1Ptr;

class Callback_UserTyp_increaseReputation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_increaseReputation_Base> Callback_UserTyp_increaseReputationPtr;

class Callback_UserTyp_decreaseReputation1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_decreaseReputation1_Base> Callback_UserTyp_decreaseReputation1Ptr;

class Callback_UserTyp_decreaseReputation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_decreaseReputation_Base> Callback_UserTyp_decreaseReputationPtr;

class Callback_UserTyp_addCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_addCar_Base> Callback_UserTyp_addCarPtr;

class Callback_UserTyp_removeCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_removeCar_Base> Callback_UserTyp_removeCarPtr;

class Callback_UserTyp_getNCars_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_getNCars_Base> Callback_UserTyp_getNCarsPtr;

class Callback_UserTyp_clearCars_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserTyp_clearCars_Base> Callback_UserTyp_clearCarsPtr;

class Callback_DateTyp_getTimeInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTyp_getTimeInMillis_Base> Callback_DateTyp_getTimeInMillisPtr;

class Callback_DateTyp_setTimeInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTyp_setTimeInMillis_Base> Callback_DateTyp_setTimeInMillisPtr;

class Callback_DateTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTyp_toString_Base> Callback_DateTyp_toStringPtr;

class Callback_DateTimePrefsTyp_getToleranceDays_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTimePrefsTyp_getToleranceDays_Base> Callback_DateTimePrefsTyp_getToleranceDaysPtr;

class Callback_DateTimePrefsTyp_setToleranceDays_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTimePrefsTyp_setToleranceDays_Base> Callback_DateTimePrefsTyp_setToleranceDaysPtr;

class Callback_DateTimePrefsTyp_getTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTimePrefsTyp_getTimePrefs_Base> Callback_DateTimePrefsTyp_getTimePrefsPtr;

class Callback_DateTimePrefsTyp_setTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_DateTimePrefsTyp_setTimePrefs_Base> Callback_DateTimePrefsTyp_setTimePrefsPtr;

class Callback_TripTyp_getTripId_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripId_Base> Callback_TripTyp_getTripIdPtr;

class Callback_TripTyp_setTripId_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setTripId_Base> Callback_TripTyp_setTripIdPtr;

class Callback_TripTyp_getPlace1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getPlace1_Base> Callback_TripTyp_getPlace1Ptr;

class Callback_TripTyp_setPlace1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setPlace1_Base> Callback_TripTyp_setPlace1Ptr;

class Callback_TripTyp_getPlace2_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getPlace2_Base> Callback_TripTyp_getPlace2Ptr;

class Callback_TripTyp_setPlace2_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setPlace2_Base> Callback_TripTyp_setPlace2Ptr;

class Callback_TripTyp_getTripDate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripDate_Base> Callback_TripTyp_getTripDatePtr;

class Callback_TripTyp_setTripDate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setTripDate_Base> Callback_TripTyp_setTripDatePtr;

class Callback_TripTyp_getNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getNSeats_Base> Callback_TripTyp_getNSeatsPtr;

class Callback_TripTyp_setNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setNSeats_Base> Callback_TripTyp_setNSeatsPtr;

class Callback_TripTyp_getTripReturnDate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripReturnDate_Base> Callback_TripTyp_getTripReturnDatePtr;

class Callback_TripTyp_setTripReturnDate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setTripReturnDate_Base> Callback_TripTyp_setTripReturnDatePtr;

class Callback_TripTyp_hasTripReturnDate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_hasTripReturnDate_Base> Callback_TripTyp_hasTripReturnDatePtr;

class Callback_TripTyp_getTripWeekDays_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripWeekDays_Base> Callback_TripTyp_getTripWeekDaysPtr;

class Callback_TripTyp_getTripPeriodicity_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripPeriodicity_Base> Callback_TripTyp_getTripPeriodicityPtr;

class Callback_TripTyp_setTripWeekDaysPeriodicity_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setTripWeekDaysPeriodicity_Base> Callback_TripTyp_setTripWeekDaysPeriodicityPtr;

class Callback_TripTyp_hasWeekDaysPeriodicity_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_hasWeekDaysPeriodicity_Base> Callback_TripTyp_hasWeekDaysPeriodicityPtr;

class Callback_TripTyp_getDistance_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getDistance_Base> Callback_TripTyp_getDistancePtr;

class Callback_TripTyp_setDistance_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setDistance_Base> Callback_TripTyp_setDistancePtr;

class Callback_TripTyp_hasDistance_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_hasDistance_Base> Callback_TripTyp_hasDistancePtr;

class Callback_TripTyp_getCharacteristics_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getCharacteristics_Base> Callback_TripTyp_getCharacteristicsPtr;

class Callback_TripTyp_setCharacteristics_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setCharacteristics_Base> Callback_TripTyp_setCharacteristicsPtr;

class Callback_TripTyp_hasCharacteristics_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_hasCharacteristics_Base> Callback_TripTyp_hasCharacteristicsPtr;

class Callback_TripTyp_setTripType_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_setTripType_Base> Callback_TripTyp_setTripTypePtr;

class Callback_TripTyp_getTripType_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_getTripType_Base> Callback_TripTyp_getTripTypePtr;

class Callback_TripTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripTyp_toString_Base> Callback_TripTyp_toStringPtr;

class Callback_WaypointTyp_getNOrder_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_WaypointTyp_getNOrder_Base> Callback_WaypointTyp_getNOrderPtr;

class Callback_WaypointTyp_setNOrder_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_WaypointTyp_setNOrder_Base> Callback_WaypointTyp_setNOrderPtr;

class Callback_WaypointTyp_getWaypointPlace_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_WaypointTyp_getWaypointPlace_Base> Callback_WaypointTyp_getWaypointPlacePtr;

class Callback_WaypointTyp_setWaypointPlace_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_WaypointTyp_setWaypointPlace_Base> Callback_WaypointTyp_setWaypointPlacePtr;

class Callback_WaypointTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_WaypointTyp_toString_Base> Callback_WaypointTyp_toStringPtr;

class Callback_PassengerTyp_getPassengerUser_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PassengerTyp_getPassengerUser_Base> Callback_PassengerTyp_getPassengerUserPtr;

class Callback_PassengerTyp_setPassengerUser_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PassengerTyp_setPassengerUser_Base> Callback_PassengerTyp_setPassengerUserPtr;

class Callback_PassengerTyp_getNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PassengerTyp_getNSeats_Base> Callback_PassengerTyp_getNSeatsPtr;

class Callback_PassengerTyp_setNSeats_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PassengerTyp_setNSeats_Base> Callback_PassengerTyp_setNSeatsPtr;

class Callback_PassengerTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_PassengerTyp_toString_Base> Callback_PassengerTyp_toStringPtr;

class Callback_TripOfferTyp_getTripDateTime_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripDateTime_Base> Callback_TripOfferTyp_getTripDateTimePtr;

class Callback_TripOfferTyp_setTripDateTime_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripDateTime_Base> Callback_TripOfferTyp_setTripDateTimePtr;

class Callback_TripOfferTyp_getTripReturnDateTime_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripReturnDateTime_Base> Callback_TripOfferTyp_getTripReturnDateTimePtr;

class Callback_TripOfferTyp_setTripReturnDateTime_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripReturnDateTime_Base> Callback_TripOfferTyp_setTripReturnDateTimePtr;

class Callback_TripOfferTyp_getTripDriver_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripDriver_Base> Callback_TripOfferTyp_getTripDriverPtr;

class Callback_TripOfferTyp_setTripDriver_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripDriver_Base> Callback_TripOfferTyp_setTripDriverPtr;

class Callback_TripOfferTyp_getTripWaypoints_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripWaypoints_Base> Callback_TripOfferTyp_getTripWaypointsPtr;

class Callback_TripOfferTyp_setTripWaypoints_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripWaypoints_Base> Callback_TripOfferTyp_setTripWaypointsPtr;

class Callback_TripOfferTyp_getTripCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripCar_Base> Callback_TripOfferTyp_getTripCarPtr;

class Callback_TripOfferTyp_setTripCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripCar_Base> Callback_TripOfferTyp_setTripCarPtr;

class Callback_TripOfferTyp_getTripPassengers_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getTripPassengers_Base> Callback_TripOfferTyp_getTripPassengersPtr;

class Callback_TripOfferTyp_setTripPassengers_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setTripPassengers_Base> Callback_TripOfferTyp_setTripPassengersPtr;

class Callback_TripOfferTyp_getPrice_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getPrice_Base> Callback_TripOfferTyp_getPricePtr;

class Callback_TripOfferTyp_setPrice_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setPrice_Base> Callback_TripOfferTyp_setPricePtr;

class Callback_TripOfferTyp_getAllowedFeatures_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getAllowedFeatures_Base> Callback_TripOfferTyp_getAllowedFeaturesPtr;

class Callback_TripOfferTyp_setAllowedFeatures_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_setAllowedFeatures_Base> Callback_TripOfferTyp_setAllowedFeaturesPtr;

class Callback_TripOfferTyp_addTripWaypoint_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_addTripWaypoint_Base> Callback_TripOfferTyp_addTripWaypointPtr;

class Callback_TripOfferTyp_removeTripWaypoint_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_removeTripWaypoint_Base> Callback_TripOfferTyp_removeTripWaypointPtr;

class Callback_TripOfferTyp_getNTripWaypoints_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getNTripWaypoints_Base> Callback_TripOfferTyp_getNTripWaypointsPtr;

class Callback_TripOfferTyp_clearTripWaypoints_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_clearTripWaypoints_Base> Callback_TripOfferTyp_clearTripWaypointsPtr;

class Callback_TripOfferTyp_addTripPassenger_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_addTripPassenger_Base> Callback_TripOfferTyp_addTripPassengerPtr;

class Callback_TripOfferTyp_removeTripPassenger_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_removeTripPassenger_Base> Callback_TripOfferTyp_removeTripPassengerPtr;

class Callback_TripOfferTyp_getNTripPassengers_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_getNTripPassengers_Base> Callback_TripOfferTyp_getNTripPassengersPtr;

class Callback_TripOfferTyp_clearTripPassengers_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripOfferTyp_clearTripPassengers_Base> Callback_TripOfferTyp_clearTripPassengersPtr;

class Callback_TripRequestTyp_getTripDateTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripRequestTyp_getTripDateTimePrefs_Base> Callback_TripRequestTyp_getTripDateTimePrefsPtr;

class Callback_TripRequestTyp_setTripDateTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripRequestTyp_setTripDateTimePrefs_Base> Callback_TripRequestTyp_setTripDateTimePrefsPtr;

class Callback_TripRequestTyp_getTripReturnDateTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<
		Callback_TripRequestTyp_getTripReturnDateTimePrefs_Base> Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr;

class Callback_TripRequestTyp_setTripReturnDateTimePrefs_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<
		Callback_TripRequestTyp_setTripReturnDateTimePrefs_Base> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr;

class Callback_TripRequestTyp_getTripRequester_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripRequestTyp_getTripRequester_Base> Callback_TripRequestTyp_getTripRequesterPtr;

class Callback_TripRequestTyp_setTripRequester_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_TripRequestTyp_setTripRequester_Base> Callback_TripRequestTyp_setTripRequesterPtr;

class Callback_UserActivityTyp_getActivityUser_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_getActivityUser_Base> Callback_UserActivityTyp_getActivityUserPtr;

class Callback_UserActivityTyp_setActivityUser_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_setActivityUser_Base> Callback_UserActivityTyp_setActivityUserPtr;

class Callback_UserActivityTyp_getActivityTrip_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_getActivityTrip_Base> Callback_UserActivityTyp_getActivityTripPtr;

class Callback_UserActivityTyp_setActivityTrip_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_setActivityTrip_Base> Callback_UserActivityTyp_setActivityTripPtr;

class Callback_UserActivityTyp_getUserActivityType_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_getUserActivityType_Base> Callback_UserActivityTyp_getUserActivityTypePtr;

class Callback_UserActivityTyp_setUserActivityType_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_setUserActivityType_Base> Callback_UserActivityTyp_setUserActivityTypePtr;

class Callback_UserActivityTyp_getTimeStampInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_getTimeStampInMillis_Base> Callback_UserActivityTyp_getTimeStampInMillisPtr;

class Callback_UserActivityTyp_setTimeStampInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_setTimeStampInMillis_Base> Callback_UserActivityTyp_setTimeStampInMillisPtr;

class Callback_UserActivityTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_UserActivityTyp_toString_Base> Callback_UserActivityTyp_toStringPtr;

class Callback_MessageTyp_getUser1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_getUser1_Base> Callback_MessageTyp_getUser1Ptr;

class Callback_MessageTyp_setUser1_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_setUser1_Base> Callback_MessageTyp_setUser1Ptr;

class Callback_MessageTyp_getUser2_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_getUser2_Base> Callback_MessageTyp_getUser2Ptr;

class Callback_MessageTyp_setUser2_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_setUser2_Base> Callback_MessageTyp_setUser2Ptr;

class Callback_MessageTyp_getMessageText_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_getMessageText_Base> Callback_MessageTyp_getMessageTextPtr;

class Callback_MessageTyp_setMessageText_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_setMessageText_Base> Callback_MessageTyp_setMessageTextPtr;

class Callback_MessageTyp_getTimeStampInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_getTimeStampInMillis_Base> Callback_MessageTyp_getTimeStampInMillisPtr;

class Callback_MessageTyp_setTimeStampInMillis_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_setTimeStampInMillis_Base> Callback_MessageTyp_setTimeStampInMillisPtr;

class Callback_MessageTyp_toString_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_MessageTyp_toString_Base> Callback_MessageTyp_toStringPtr;

}

}

class Callback_QueryResult_next_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_QueryResult_next_Base> Callback_QueryResult_nextPtr;

class Callback_QueryResult_destroy_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_QueryResult_destroy_Base> Callback_QueryResult_destroyPtr;

namespace zerocice {

class Callback_CardroidManager_getUserPlaces_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getUserPlaces_Base> Callback_CardroidManager_getUserPlacesPtr;

class Callback_CardroidManager_searchTrips_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_searchTrips_Base> Callback_CardroidManager_searchTripsPtr;

class Callback_CardroidManager_getTripFromId_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getTripFromId_Base> Callback_CardroidManager_getTripFromIdPtr;

class Callback_CardroidManager_getTripOfferFromId_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getTripOfferFromId_Base> Callback_CardroidManager_getTripOfferFromIdPtr;

class Callback_CardroidManager_getTripRequestFromId_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getTripRequestFromId_Base> Callback_CardroidManager_getTripRequestFromIdPtr;

class Callback_CardroidManager_joinTrip_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_joinTrip_Base> Callback_CardroidManager_joinTripPtr;

class Callback_CardroidManager_organizeTrip_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_organizeTrip_Base> Callback_CardroidManager_organizeTripPtr;

class Callback_CardroidManager_getUserTrips_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getUserTrips_Base> Callback_CardroidManager_getUserTripsPtr;

class Callback_CardroidManager_getPassengerTrips_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getPassengerTrips_Base> Callback_CardroidManager_getPassengerTripsPtr;

class Callback_CardroidManager_userTripRegistered_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_userTripRegistered_Base> Callback_CardroidManager_userTripRegisteredPtr;

class Callback_CardroidManager_calculatePriceEstimation_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_calculatePriceEstimation_Base> Callback_CardroidManager_calculatePriceEstimationPtr;

class Callback_CardroidManager_newTripOffer_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_newTripOffer_Base> Callback_CardroidManager_newTripOfferPtr;

class Callback_CardroidManager_newTripRequest_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_newTripRequest_Base> Callback_CardroidManager_newTripRequestPtr;

class Callback_CardroidManager_getMessageTalksSpeakers_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getMessageTalksSpeakers_Base> Callback_CardroidManager_getMessageTalksSpeakersPtr;

class Callback_CardroidManager_getMessageTalks_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getMessageTalks_Base> Callback_CardroidManager_getMessageTalksPtr;

class Callback_CardroidManager_newMessage_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_newMessage_Base> Callback_CardroidManager_newMessagePtr;

class Callback_CardroidManager_getUserActivity_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getUserActivity_Base> Callback_CardroidManager_getUserActivityPtr;

class Callback_CardroidManager_getUserFromEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getUserFromEmail_Base> Callback_CardroidManager_getUserFromEmailPtr;

class Callback_CardroidManager_getCarFromPlate_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getCarFromPlate_Base> Callback_CardroidManager_getCarFromPlatePtr;

class Callback_CardroidManager_getCarFromPlateEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_getCarFromPlateEmail_Base> Callback_CardroidManager_getCarFromPlateEmailPtr;

class Callback_CardroidManager_updateUserData_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_updateUserData_Base> Callback_CardroidManager_updateUserDataPtr;

class Callback_CardroidManager_updateCarData_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_updateCarData_Base> Callback_CardroidManager_updateCarDataPtr;

class Callback_CardroidManager_updateCarDataEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_updateCarDataEmail_Base> Callback_CardroidManager_updateCarDataEmailPtr;

class Callback_CardroidManager_addCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_addCar_Base> Callback_CardroidManager_addCarPtr;

class Callback_CardroidManager_addCarEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_addCarEmail_Base> Callback_CardroidManager_addCarEmailPtr;

class Callback_CardroidManager_removeCar_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_removeCar_Base> Callback_CardroidManager_removeCarPtr;

class Callback_CardroidManager_removeCarPlateEmail_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_CardroidManager_removeCarPlateEmail_Base> Callback_CardroidManager_removeCarPlateEmailPtr;

}

}

namespace IceProxy {

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp: virtual public ::IceProxy::Ice::Object {
public:

	::std::string getName() {
		return getName(0);
	}
	::std::string getName(const ::Ice::Context& __ctx) {
		return getName(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getName(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getName(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getName(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getName(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getName(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getName(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getName() {
		return begin_getName(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx) {
		return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(&__ctx, __del, __cookie);
	}

	::std::string end_getName(const ::Ice::AsyncResultPtr&);

private:

	::std::string getName(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setName(const ::std::string& name) {
		setName(name, 0);
	}
	void setName(const ::std::string& name, const ::Ice::Context& __ctx) {
		setName(name, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setName(name, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setName(name, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setName(name, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setName(name, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name) {
		return begin_setName(name, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx) {
		return begin_setName(name, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, &__ctx, __del, __cookie);
	}

	void end_setName(const ::Ice::AsyncResultPtr&);

private:

	void setName(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setName(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::LatLngTyp getCoords() {
		return getCoords(0);
	}
	::cardroid::data::zerocice::LatLngTyp getCoords(
			const ::Ice::Context& __ctx) {
		return getCoords(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getCoords(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::LatLngTyp&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCoords(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCoords(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCoords(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::LatLngTyp&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCoords(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCoords(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getCoords(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::LatLngTyp&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::LatLngTyp&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::LatLngTyp __ret;
				try {
					__ret = __proxy->end_getCoords(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::LatLngTyp&)> _response;
		};
		return begin_getCoords(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getCoords() {
		return begin_getCoords(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context& __ctx) {
		return begin_getCoords(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCoords(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCoords(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCoords(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getCoordsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCoords(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getCoordsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCoords(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::LatLngTyp end_getCoords(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::LatLngTyp getCoords(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getCoords(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setCoords(const ::cardroid::data::zerocice::LatLngTyp& coords) {
		setCoords(coords, 0);
	}
	void setCoords(const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx) {
		setCoords(coords, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCoords(coords, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCoords(coords, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCoords(coords, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCoords(coords, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords) {
		return begin_setCoords(coords, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx) {
		return begin_setCoords(coords, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCoords(coords, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCoords(coords, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setCoordsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCoords(coords, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp& coords,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setCoordsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCoords(coords, &__ctx, __del, __cookie);
	}

	void end_setCoords(const ::Ice::AsyncResultPtr&);

private:

	void setCoords(const ::cardroid::data::zerocice::LatLngTyp&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setCoords(
			const ::cardroid::data::zerocice::LatLngTyp&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getDescription() {
		return getDescription(0);
	}
	::std::string getDescription(const ::Ice::Context& __ctx) {
		return getDescription(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getDescription(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getDescription(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getDescription(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getDescription(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getDescription(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getDescription(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getDescription(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getDescription(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getDescription(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getDescription() {
		return begin_getDescription(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx) {
		return begin_getDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDescription(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDescription(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDescription(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDescription(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDescription(&__ctx, __del, __cookie);
	}

	::std::string end_getDescription(const ::Ice::AsyncResultPtr&);

private:

	::std::string getDescription(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getDescription(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setDescription(const ::std::string& description) {
		setDescription(description, 0);
	}
	void setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx) {
		setDescription(description, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setDescription(description, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setDescription(description, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setDescription(description, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setDescription(description, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setDescription(
			const ::std::string& description) {
		return begin_setDescription(description, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx) {
		return begin_setDescription(description, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDescription(description, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDescription(description, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDescription(description, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDescription(const ::std::string& description,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDescription(description, &__ctx, __del, __cookie);
	}

	void end_setDescription(const ::Ice::AsyncResultPtr&);

private:

	void setDescription(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setDescription(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasDescription() {
		return hasDescription(0);
	}
	bool hasDescription(const ::Ice::Context& __ctx) {
		return hasDescription(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasDescription(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasDescription(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasDescription(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasDescription(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasDescription(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasDescription(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasDescription(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasDescription(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasDescription(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasDescription() {
		return begin_hasDescription(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context& __ctx) {
		return begin_hasDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDescription(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDescription(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDescription(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_hasDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDescription(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_hasDescriptionPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDescription(&__ctx, __del, __cookie);
	}

	bool end_hasDescription(const ::Ice::AsyncResultPtr&);

private:

	bool hasDescription(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasDescription(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::Blob getSnapshotBytes() {
		return getSnapshotBytes(0);
	}
	::cardroid::data::zerocice::Blob getSnapshotBytes(
			const ::Ice::Context& __ctx) {
		return getSnapshotBytes(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getSnapshotBytes(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getSnapshotBytes(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getSnapshotBytes(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getSnapshotBytes(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getSnapshotBytes(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getSnapshotBytes(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getSnapshotBytes(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::Blob&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::Blob __ret;
				try {
					__ret = __proxy->end_getSnapshotBytes(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::Blob&)> _response;
		};
		return begin_getSnapshotBytes(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getSnapshotBytes() {
		return begin_getSnapshotBytes(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context& __ctx) {
		return begin_getSnapshotBytes(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getSnapshotBytes(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSnapshotBytes(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSnapshotBytes(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSnapshotBytes(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getSnapshotBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSnapshotBytes(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_getSnapshotBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSnapshotBytes(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::Blob end_getSnapshotBytes(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::Blob getSnapshotBytes(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getSnapshotBytes(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes) {
		setSnapshotBytes(snapshotBytes, 0);
	}
	void setSnapshotBytes(const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx) {
		setSnapshotBytes(snapshotBytes, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setSnapshotBytes(snapshotBytes, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setSnapshotBytes(snapshotBytes, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setSnapshotBytes(snapshotBytes, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setSnapshotBytes(snapshotBytes, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes) {
		return begin_setSnapshotBytes(snapshotBytes, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx) {
		return begin_setSnapshotBytes(snapshotBytes, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSnapshotBytes(snapshotBytes, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSnapshotBytes(snapshotBytes, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setSnapshotBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSnapshotBytes(snapshotBytes, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob& snapshotBytes,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_setSnapshotBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSnapshotBytes(snapshotBytes, &__ctx, __del, __cookie);
	}

	void end_setSnapshotBytes(const ::Ice::AsyncResultPtr&);

private:

	void setSnapshotBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setSnapshotBytes(
			const ::cardroid::data::zerocice::Blob&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasSnapshot() {
		return hasSnapshot(0);
	}
	bool hasSnapshot(const ::Ice::Context& __ctx) {
		return hasSnapshot(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasSnapshot(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasSnapshot(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasSnapshot(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasSnapshot(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasSnapshot(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasSnapshot(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasSnapshot(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasSnapshot(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasSnapshot(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasSnapshot() {
		return begin_hasSnapshot(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context& __ctx) {
		return begin_hasSnapshot(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasSnapshot(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasSnapshot(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasSnapshot(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_hasSnapshotPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasSnapshot(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_hasSnapshotPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasSnapshot(&__ctx, __del, __cookie);
	}

	bool end_hasSnapshot(const ::Ice::AsyncResultPtr&);

private:

	bool hasSnapshot(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasSnapshot(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PlaceTypPrx __proxy =
						::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_PlaceTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PlaceTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<PlaceTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_secure(bool __secure) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_twoway() const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_oneway() const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_batchOneway() const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_datagram() const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_batchDatagram() const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_compress(bool __compress) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<PlaceTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<PlaceTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CarTyp: virtual public ::IceProxy::Ice::Object {
public:

	::std::string getBrand() {
		return getBrand(0);
	}
	::std::string getBrand(const ::Ice::Context& __ctx) {
		return getBrand(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getBrand(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getBrand(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getBrand(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getBrand(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getBrand(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getBrand(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getBrand(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getBrand(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getBrand(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getBrand() {
		return begin_getBrand(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context& __ctx) {
		return begin_getBrand(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getBrand(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getBrand(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getBrand(
			const ::cardroid::data::zerocice::Callback_CarTyp_getBrandPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getBrand(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getBrandPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getBrand(&__ctx, __del, __cookie);
	}

	::std::string end_getBrand(const ::Ice::AsyncResultPtr&);

private:

	::std::string getBrand(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getBrand(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setBrand(const ::std::string& brand) {
		setBrand(brand, 0);
	}
	void setBrand(const ::std::string& brand, const ::Ice::Context& __ctx) {
		setBrand(brand, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setBrand(brand, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setBrand(brand, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setBrand(brand, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setBrand(brand, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand) {
		return begin_setBrand(brand, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::Context& __ctx) {
		return begin_setBrand(brand, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setBrand(brand, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setBrand(brand, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::cardroid::data::zerocice::Callback_CarTyp_setBrandPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setBrand(brand, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setBrand(const ::std::string& brand,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setBrandPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setBrand(brand, &__ctx, __del, __cookie);
	}

	void end_setBrand(const ::Ice::AsyncResultPtr&);

private:

	void setBrand(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setBrand(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getModel() {
		return getModel(0);
	}
	::std::string getModel(const ::Ice::Context& __ctx) {
		return getModel(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getModel(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getModel(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getModel(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getModel(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getModel(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getModel(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getModel(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getModel(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getModel(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getModel() {
		return begin_getModel(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx) {
		return begin_getModel(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getModel(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getModel(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getModel(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getModel(
			const ::cardroid::data::zerocice::Callback_CarTyp_getModelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getModel(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getModelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getModel(&__ctx, __del, __cookie);
	}

	::std::string end_getModel(const ::Ice::AsyncResultPtr&);

private:

	::std::string getModel(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getModel(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setModel(const ::std::string& model) {
		setModel(model, 0);
	}
	void setModel(const ::std::string& model, const ::Ice::Context& __ctx) {
		setModel(model, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setModel(model, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setModel(model, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setModel(model, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setModel(model, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model) {
		return begin_setModel(model, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::Context& __ctx) {
		return begin_setModel(model, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setModel(model, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setModel(model, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::cardroid::data::zerocice::Callback_CarTyp_setModelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setModel(model, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setModel(const ::std::string& model,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setModelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setModel(model, &__ctx, __del, __cookie);
	}

	void end_setModel(const ::Ice::AsyncResultPtr&);

private:

	void setModel(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setModel(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::Fuel getCarFuel() {
		return getCarFuel(0);
	}
	::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Context& __ctx) {
		return getCarFuel(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getCarFuel(
			const ::IceInternal::Function<void(::cardroid::data::zerocice::Fuel)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFuel(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCarFuel(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFuel(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::cardroid::data::zerocice::Fuel)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFuel(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFuel(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getCarFuel(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::cardroid::data::zerocice::Fuel)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(::cardroid::data::zerocice::Fuel)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::Fuel __ret;
				try {
					__ret = __proxy->end_getCarFuel(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::cardroid::data::zerocice::Fuel)> _response;
		};
		return begin_getCarFuel(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getCarFuel() {
		return begin_getCarFuel(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context& __ctx) {
		return begin_getCarFuel(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFuel(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFuel(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFuel(
			const ::cardroid::data::zerocice::Callback_CarTyp_getCarFuelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFuel(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getCarFuelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFuel(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::Fuel end_getCarFuel(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getCarFuel(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setCarFuel(::cardroid::data::zerocice::Fuel carFuel) {
		setCarFuel(carFuel, 0);
	}
	void setCarFuel(::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx) {
		setCarFuel(carFuel, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCarFuel(carFuel, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCarFuel(carFuel, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCarFuel(carFuel, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCarFuel(carFuel, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel) {
		return begin_setCarFuel(carFuel, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx) {
		return begin_setCarFuel(carFuel, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCarFuel(carFuel, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCarFuel(carFuel, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::cardroid::data::zerocice::Callback_CarTyp_setCarFuelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCarFuel(carFuel, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCarFuel(
			::cardroid::data::zerocice::Fuel carFuel,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setCarFuelPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCarFuel(carFuel, &__ctx, __del, __cookie);
	}

	void end_setCarFuel(const ::Ice::AsyncResultPtr&);

private:

	void setCarFuel(::cardroid::data::zerocice::Fuel, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setCarFuel(::cardroid::data::zerocice::Fuel,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Double getConsumptionPerKm() {
		return getConsumptionPerKm(0);
	}
	::Ice::Double getConsumptionPerKm(const ::Ice::Context& __ctx) {
		return getConsumptionPerKm(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getConsumptionPerKm(
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getConsumptionPerKm(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getConsumptionPerKm(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getConsumptionPerKm(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getConsumptionPerKm(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getConsumptionPerKm(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getConsumptionPerKm(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getConsumptionPerKm(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getConsumptionPerKm(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Double)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Double __ret;
				try {
					__ret = __proxy->end_getConsumptionPerKm(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Double)> _response;
		};
		return begin_getConsumptionPerKm(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getConsumptionPerKm() {
		return begin_getConsumptionPerKm(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getConsumptionPerKm(
			const ::Ice::Context& __ctx) {
		return begin_getConsumptionPerKm(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getConsumptionPerKm(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getConsumptionPerKm(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getConsumptionPerKm(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getConsumptionPerKm(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getConsumptionPerKm(
			const ::cardroid::data::zerocice::Callback_CarTyp_getConsumptionPerKmPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getConsumptionPerKm(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getConsumptionPerKm(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getConsumptionPerKmPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getConsumptionPerKm(&__ctx, __del, __cookie);
	}

	::Ice::Double end_getConsumptionPerKm(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Double getConsumptionPerKm(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getConsumptionPerKm(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setConsumptionPerKm(::Ice::Double consumptionPerKm) {
		setConsumptionPerKm(consumptionPerKm, 0);
	}
	void setConsumptionPerKm(::Ice::Double consumptionPerKm,
			const ::Ice::Context& __ctx) {
		setConsumptionPerKm(consumptionPerKm, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setConsumptionPerKm(consumptionPerKm, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setConsumptionPerKm(consumptionPerKm, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setConsumptionPerKm(consumptionPerKm, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setConsumptionPerKm(consumptionPerKm, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm) {
		return begin_setConsumptionPerKm(consumptionPerKm, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::Context& __ctx) {
		return begin_setConsumptionPerKm(consumptionPerKm, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setConsumptionPerKm(consumptionPerKm, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setConsumptionPerKm(consumptionPerKm, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm,
			const ::cardroid::data::zerocice::Callback_CarTyp_setConsumptionPerKmPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setConsumptionPerKm(consumptionPerKm, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setConsumptionPerKm(
			::Ice::Double consumptionPerKm, const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setConsumptionPerKmPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setConsumptionPerKm(consumptionPerKm, &__ctx, __del,
				__cookie);
	}

	void end_setConsumptionPerKm(const ::Ice::AsyncResultPtr&);

private:

	void setConsumptionPerKm(::Ice::Double, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setConsumptionPerKm(::Ice::Double,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNSeats() {
		return getNSeats(0);
	}
	::Ice::Int getNSeats(const ::Ice::Context& __ctx) {
		return getNSeats(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNSeats(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNSeats(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNSeats(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNSeats() {
		return begin_getNSeats(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx) {
		return begin_getNSeats(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(
			const ::cardroid::data::zerocice::Callback_CarTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNSeats(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNSeats(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setNSeats(::Ice::Int nSeats) {
		setNSeats(nSeats, 0);
	}
	void setNSeats(::Ice::Int nSeats, const ::Ice::Context& __ctx) {
		setNSeats(nSeats, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats) {
		return begin_setNSeats(nSeats, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx) {
		return begin_setNSeats(nSeats, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::cardroid::data::zerocice::Callback_CarTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	void end_setNSeats(const ::Ice::AsyncResultPtr&);

private:

	void setNSeats(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getColor() {
		return getColor(0);
	}
	::std::string getColor(const ::Ice::Context& __ctx) {
		return getColor(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getColor(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getColor(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getColor(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getColor(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getColor(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getColor(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getColor(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getColor(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getColor(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getColor() {
		return begin_getColor(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context& __ctx) {
		return begin_getColor(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getColor(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getColor(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getColor(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getColor(
			const ::cardroid::data::zerocice::Callback_CarTyp_getColorPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getColor(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getColorPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getColor(&__ctx, __del, __cookie);
	}

	::std::string end_getColor(const ::Ice::AsyncResultPtr&);

private:

	::std::string getColor(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getColor(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setColor(const ::std::string& color) {
		setColor(color, 0);
	}
	void setColor(const ::std::string& color, const ::Ice::Context& __ctx) {
		setColor(color, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setColor(color, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setColor(color, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setColor(color, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setColor(color, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color) {
		return begin_setColor(color, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::Context& __ctx) {
		return begin_setColor(color, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setColor(color, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setColor(color, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::cardroid::data::zerocice::Callback_CarTyp_setColorPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setColor(color, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setColor(const ::std::string& color,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setColorPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setColor(color, &__ctx, __del, __cookie);
	}

	void end_setColor(const ::Ice::AsyncResultPtr&);

private:

	void setColor(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setColor(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getPlate() {
		return getPlate(0);
	}
	::std::string getPlate(const ::Ice::Context& __ctx) {
		return getPlate(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPlate(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlate(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlate(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlate(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlate(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlate(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPlate(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getPlate(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getPlate(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPlate() {
		return begin_getPlate(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx) {
		return begin_getPlate(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlate(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlate(
			const ::cardroid::data::zerocice::Callback_CarTyp_getPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_getPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlate(&__ctx, __del, __cookie);
	}

	::std::string end_getPlate(const ::Ice::AsyncResultPtr&);

private:

	::std::string getPlate(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPlate(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setPlate(const ::std::string& plate) {
		setPlate(plate, 0);
	}
	void setPlate(const ::std::string& plate, const ::Ice::Context& __ctx) {
		setPlate(plate, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlate(plate, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlate(plate, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlate(plate, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlate(plate, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate) {
		return begin_setPlate(plate, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::Context& __ctx) {
		return begin_setPlate(plate, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlate(plate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlate(plate, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::Callback_CarTyp_setPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlate(plate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlate(const ::std::string& plate,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_setPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlate(plate, &__ctx, __del, __cookie);
	}

	void end_setPlate(const ::Ice::AsyncResultPtr&);

private:

	void setPlate(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setPlate(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::CarTypPrx __proxy =
						::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_CarTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_CarTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<CarTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_secure(bool __secure) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_twoway() const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_oneway() const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_batchOneway() const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_datagram() const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_batchDatagram() const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_compress(bool __compress) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<CarTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<CarTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserTyp: virtual public ::IceProxy::Ice::Object {
public:

	::std::string getName() {
		return getName(0);
	}
	::std::string getName(const ::Ice::Context& __ctx) {
		return getName(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getName(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getName(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getName(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getName(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getName(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getName(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getName() {
		return begin_getName(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx) {
		return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(
			const ::cardroid::data::zerocice::Callback_UserTyp_getNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getName(&__ctx, __del, __cookie);
	}

	::std::string end_getName(const ::Ice::AsyncResultPtr&);

private:

	::std::string getName(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setName(const ::std::string& name) {
		setName(name, 0);
	}
	void setName(const ::std::string& name, const ::Ice::Context& __ctx) {
		setName(name, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setName(name, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setName(name, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setName(name, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setName(name, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name) {
		return begin_setName(name, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx) {
		return begin_setName(name, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::cardroid::data::zerocice::Callback_UserTyp_setNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setName(const ::std::string& name,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setNamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setName(name, &__ctx, __del, __cookie);
	}

	void end_setName(const ::Ice::AsyncResultPtr&);

private:

	void setName(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setName(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getSurname() {
		return getSurname(0);
	}
	::std::string getSurname(const ::Ice::Context& __ctx) {
		return getSurname(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getSurname(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getSurname(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getSurname(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getSurname(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getSurname(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getSurname(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getSurname(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getSurname(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getSurname(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getSurname() {
		return begin_getSurname(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context& __ctx) {
		return begin_getSurname(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSurname(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSurname(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSurname(
			const ::cardroid::data::zerocice::Callback_UserTyp_getSurnamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSurname(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getSurnamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getSurname(&__ctx, __del, __cookie);
	}

	::std::string end_getSurname(const ::Ice::AsyncResultPtr&);

private:

	::std::string getSurname(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getSurname(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setSurname(const ::std::string& surname) {
		setSurname(surname, 0);
	}
	void setSurname(const ::std::string& surname, const ::Ice::Context& __ctx) {
		setSurname(surname, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setSurname(surname, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setSurname(surname, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setSurname(surname, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setSurname(surname, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname) {
		return begin_setSurname(surname, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::Context& __ctx) {
		return begin_setSurname(surname, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSurname(surname, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSurname(surname, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::cardroid::data::zerocice::Callback_UserTyp_setSurnamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSurname(surname, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setSurname(const ::std::string& surname,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setSurnamePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setSurname(surname, &__ctx, __del, __cookie);
	}

	void end_setSurname(const ::Ice::AsyncResultPtr&);

private:

	void setSurname(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setSurname(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::Blob getAvatarBytes() {
		return getAvatarBytes(0);
	}
	::cardroid::data::zerocice::Blob getAvatarBytes(
			const ::Ice::Context& __ctx) {
		return getAvatarBytes(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getAvatarBytes(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getAvatarBytes(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getAvatarBytes(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getAvatarBytes(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getAvatarBytes(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getAvatarBytes(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getAvatarBytes(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::Blob&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::Blob&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::Blob __ret;
				try {
					__ret = __proxy->end_getAvatarBytes(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::Blob&)> _response;
		};
		return begin_getAvatarBytes(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getAvatarBytes() {
		return begin_getAvatarBytes(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context& __ctx) {
		return begin_getAvatarBytes(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAvatarBytes(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAvatarBytes(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAvatarBytes(
			const ::cardroid::data::zerocice::Callback_UserTyp_getAvatarBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAvatarBytes(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getAvatarBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAvatarBytes(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::Blob end_getAvatarBytes(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::Blob getAvatarBytes(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getAvatarBytes(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setAvatarBytes(const ::cardroid::data::zerocice::Blob& avatarBytes) {
		setAvatarBytes(avatarBytes, 0);
	}
	void setAvatarBytes(const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx) {
		setAvatarBytes(avatarBytes, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setAvatarBytes(avatarBytes, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setAvatarBytes(avatarBytes, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setAvatarBytes(avatarBytes, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setAvatarBytes(avatarBytes, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes) {
		return begin_setAvatarBytes(avatarBytes, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx) {
		return begin_setAvatarBytes(avatarBytes, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAvatarBytes(avatarBytes, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAvatarBytes(avatarBytes, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::cardroid::data::zerocice::Callback_UserTyp_setAvatarBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAvatarBytes(avatarBytes, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob& avatarBytes,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setAvatarBytesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAvatarBytes(avatarBytes, &__ctx, __del, __cookie);
	}

	void end_setAvatarBytes(const ::Ice::AsyncResultPtr&);

private:

	void setAvatarBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setAvatarBytes(
			const ::cardroid::data::zerocice::Blob&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasAvatar() {
		return hasAvatar(0);
	}
	bool hasAvatar(const ::Ice::Context& __ctx) {
		return hasAvatar(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasAvatar(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasAvatar(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasAvatar(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasAvatar(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasAvatar(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasAvatar(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasAvatar(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasAvatar(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasAvatar(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasAvatar() {
		return begin_hasAvatar(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context& __ctx) {
		return begin_hasAvatar(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasAvatar(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasAvatar(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasAvatar(
			const ::cardroid::data::zerocice::Callback_UserTyp_hasAvatarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasAvatar(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_hasAvatarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasAvatar(&__ctx, __del, __cookie);
	}

	bool end_hasAvatar(const ::Ice::AsyncResultPtr&);

private:

	bool hasAvatar(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasAvatar(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::PlaceTypPtr getUserHome() {
		return getUserHome(0);
	}
	::cardroid::data::zerocice::PlaceTypPtr getUserHome(
			const ::Ice::Context& __ctx) {
		return getUserHome(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserHome(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserHome(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserHome(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserHome(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserHome(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserHome(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserHome(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::PlaceTypPtr __ret;
				try {
					__ret = __proxy->end_getUserHome(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::PlaceTypPtr&)> _response;
		};
		return begin_getUserHome(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserHome() {
		return begin_getUserHome(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context& __ctx) {
		return begin_getUserHome(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserHome(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserHome(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserHome(
			const ::cardroid::data::zerocice::Callback_UserTyp_getUserHomePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserHome(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getUserHomePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserHome(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::PlaceTypPtr end_getUserHome(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::PlaceTypPtr getUserHome(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserHome(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr& home) {
		setUserHome(home, 0);
	}
	void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx) {
		setUserHome(home, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserHome(home, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserHome(home, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserHome(home, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserHome(home, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home) {
		return begin_setUserHome(home, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx) {
		return begin_setUserHome(home, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserHome(home, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserHome(home, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::cardroid::data::zerocice::Callback_UserTyp_setUserHomePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserHome(home, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr& home,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setUserHomePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserHome(home, &__ctx, __del, __cookie);
	}

	void end_setUserHome(const ::Ice::AsyncResultPtr&);

private:

	void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setUserHome(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getTelephone() {
		return getTelephone(0);
	}
	::Ice::Int getTelephone(const ::Ice::Context& __ctx) {
		return getTelephone(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTelephone(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTelephone(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTelephone(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTelephone(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTelephone(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTelephone(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTelephone(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getTelephone(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getTelephone(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTelephone() {
		return begin_getTelephone(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context& __ctx) {
		return begin_getTelephone(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTelephone(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTelephone(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTelephone(
			const ::cardroid::data::zerocice::Callback_UserTyp_getTelephonePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTelephone(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getTelephonePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTelephone(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getTelephone(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getTelephone(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTelephone(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTelephone(::Ice::Int telephone) {
		setTelephone(telephone, 0);
	}
	void setTelephone(::Ice::Int telephone, const ::Ice::Context& __ctx) {
		setTelephone(telephone, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTelephone(telephone, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTelephone(telephone, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTelephone(telephone, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTelephone(telephone, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone) {
		return begin_setTelephone(telephone, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::Context& __ctx) {
		return begin_setTelephone(telephone, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTelephone(telephone, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTelephone(telephone, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::cardroid::data::zerocice::Callback_UserTyp_setTelephonePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTelephone(telephone, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int telephone,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setTelephonePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTelephone(telephone, &__ctx, __del, __cookie);
	}

	void end_setTelephone(const ::Ice::AsyncResultPtr&);

private:

	void setTelephone(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTelephone(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getEmail() {
		return getEmail(0);
	}
	::std::string getEmail(const ::Ice::Context& __ctx) {
		return getEmail(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getEmail(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getEmail(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getEmail(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getEmail(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getEmail(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getEmail(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getEmail(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getEmail(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getEmail(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getEmail() {
		return begin_getEmail(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context& __ctx) {
		return begin_getEmail(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getEmail(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getEmail(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getEmail(
			const ::cardroid::data::zerocice::Callback_UserTyp_getEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getEmail(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getEmail(&__ctx, __del, __cookie);
	}

	::std::string end_getEmail(const ::Ice::AsyncResultPtr&);

private:

	::std::string getEmail(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getEmail(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setEmail(const ::std::string& email) {
		setEmail(email, 0);
	}
	void setEmail(const ::std::string& email, const ::Ice::Context& __ctx) {
		setEmail(email, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setEmail(email, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setEmail(email, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setEmail(email, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setEmail(email, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email) {
		return begin_setEmail(email, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::Context& __ctx) {
		return begin_setEmail(email, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setEmail(email, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setEmail(email, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::cardroid::data::zerocice::Callback_UserTyp_setEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setEmail(email, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setEmail(email, &__ctx, __del, __cookie);
	}

	void end_setEmail(const ::Ice::AsyncResultPtr&);

private:

	void setEmail(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setEmail(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getReputation() {
		return getReputation(0);
	}
	::Ice::Int getReputation(const ::Ice::Context& __ctx) {
		return getReputation(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getReputation(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getReputation(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getReputation(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getReputation(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getReputation(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getReputation(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getReputation(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getReputation(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getReputation(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getReputation() {
		return begin_getReputation(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context& __ctx) {
		return begin_getReputation(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getReputation(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getReputation(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getReputation(
			const ::cardroid::data::zerocice::Callback_UserTyp_getReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getReputation(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getReputation(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getReputation(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getReputation(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getReputation(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setReputation(::Ice::Int reputation) {
		setReputation(reputation, 0);
	}
	void setReputation(::Ice::Int reputation, const ::Ice::Context& __ctx) {
		setReputation(reputation, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setReputation(reputation, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setReputation(reputation, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setReputation(reputation, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setReputation(reputation, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation) {
		return begin_setReputation(reputation, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::Context& __ctx) {
		return begin_setReputation(reputation, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setReputation(reputation, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setReputation(reputation, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::cardroid::data::zerocice::Callback_UserTyp_setReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setReputation(reputation, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int reputation,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setReputation(reputation, &__ctx, __del, __cookie);
	}

	void end_setReputation(const ::Ice::AsyncResultPtr&);

private:

	void setReputation(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setReputation(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasReputation() {
		return hasReputation(0);
	}
	bool hasReputation(const ::Ice::Context& __ctx) {
		return hasReputation(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasReputation(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasReputation(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasReputation(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasReputation(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasReputation(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasReputation(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasReputation(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasReputation(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasReputation(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasReputation() {
		return begin_hasReputation(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context& __ctx) {
		return begin_hasReputation(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasReputation(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasReputation(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasReputation(
			const ::cardroid::data::zerocice::Callback_UserTyp_hasReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasReputation(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_hasReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasReputation(&__ctx, __del, __cookie);
	}

	bool end_hasReputation(const ::Ice::AsyncResultPtr&);

private:

	bool hasReputation(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasReputation(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarCollection getUserCars() {
		return getUserCars(0);
	}
	::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Context& __ctx) {
		return getUserCars(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserCars(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserCars(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserCars(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserCars(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserCars(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserCars(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserCars(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::CarCollection&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarCollection __ret;
				try {
					__ret = __proxy->end_getUserCars(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::CarCollection&)> _response;
		};
		return begin_getUserCars(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserCars() {
		return begin_getUserCars(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context& __ctx) {
		return begin_getUserCars(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserCars(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserCars(
			const ::cardroid::data::zerocice::Callback_UserTyp_getUserCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getUserCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserCars(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarCollection end_getUserCars(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserCars(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setUserCars(const ::cardroid::data::zerocice::CarCollection& cars) {
		setUserCars(cars, 0);
	}
	void setUserCars(const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx) {
		setUserCars(cars, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserCars(cars, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserCars(cars, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserCars(cars, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserCars(cars, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars) {
		return begin_setUserCars(cars, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx) {
		return begin_setUserCars(cars, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserCars(cars, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserCars(cars, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::cardroid::data::zerocice::Callback_UserTyp_setUserCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserCars(cars, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection& cars,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_setUserCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserCars(cars, &__ctx, __del, __cookie);
	}

	void end_setUserCars(const ::Ice::AsyncResultPtr&);

private:

	void setUserCars(const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setUserCars(
			const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_UserTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void increaseReputation1() {
		increaseReputation1(0);
	}
	void increaseReputation1(const ::Ice::Context& __ctx) {
		increaseReputation1(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_increaseReputation1(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_increaseReputation1(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_increaseReputation1(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_increaseReputation1(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_increaseReputation1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_increaseReputation1(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_increaseReputation1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_increaseReputation1(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_increaseReputation1() {
		return begin_increaseReputation1(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_increaseReputation1(
			const ::Ice::Context& __ctx) {
		return begin_increaseReputation1(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_increaseReputation1(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation1(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation1(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation1(
			const ::cardroid::data::zerocice::Callback_UserTyp_increaseReputation1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation1(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_increaseReputation1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation1(&__ctx, __del, __cookie);
	}

	void end_increaseReputation1(const ::Ice::AsyncResultPtr&);

private:

	void increaseReputation1(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_increaseReputation1(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void increaseReputation(::Ice::Int increase) {
		increaseReputation(increase, 0);
	}
	void increaseReputation(::Ice::Int increase, const ::Ice::Context& __ctx) {
		increaseReputation(increase, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_increaseReputation(increase, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_increaseReputation(increase, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_increaseReputation(increase, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_increaseReputation(increase, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase) {
		return begin_increaseReputation(increase, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::Context& __ctx) {
		return begin_increaseReputation(increase, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation(increase, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation(increase, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::cardroid::data::zerocice::Callback_UserTyp_increaseReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation(increase, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int increase,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_increaseReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_increaseReputation(increase, &__ctx, __del, __cookie);
	}

	void end_increaseReputation(const ::Ice::AsyncResultPtr&);

private:

	void increaseReputation(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_increaseReputation(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void decreaseReputation1() {
		decreaseReputation1(0);
	}
	void decreaseReputation1(const ::Ice::Context& __ctx) {
		decreaseReputation1(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_decreaseReputation1(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_decreaseReputation1(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_decreaseReputation1(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_decreaseReputation1(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_decreaseReputation1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_decreaseReputation1(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_decreaseReputation1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_decreaseReputation1(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_decreaseReputation1() {
		return begin_decreaseReputation1(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation1(
			const ::Ice::Context& __ctx) {
		return begin_decreaseReputation1(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation1(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation1(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation1(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation1(
			const ::cardroid::data::zerocice::Callback_UserTyp_decreaseReputation1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation1(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_decreaseReputation1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation1(&__ctx, __del, __cookie);
	}

	void end_decreaseReputation1(const ::Ice::AsyncResultPtr&);

private:

	void decreaseReputation1(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_decreaseReputation1(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void decreaseReputation(::Ice::Int decrease) {
		decreaseReputation(decrease, 0);
	}
	void decreaseReputation(::Ice::Int decrease, const ::Ice::Context& __ctx) {
		decreaseReputation(decrease, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_decreaseReputation(decrease, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_decreaseReputation(decrease, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_decreaseReputation(decrease, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_decreaseReputation(decrease, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease) {
		return begin_decreaseReputation(decrease, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::Context& __ctx) {
		return begin_decreaseReputation(decrease, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation(decrease, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation(decrease, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::cardroid::data::zerocice::Callback_UserTyp_decreaseReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation(decrease, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int decrease,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_decreaseReputationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_decreaseReputation(decrease, &__ctx, __del, __cookie);
	}

	void end_decreaseReputation(const ::Ice::AsyncResultPtr&);

private:

	void decreaseReputation(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_decreaseReputation(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool addCar(const ::cardroid::data::zerocice::CarTypPtr& c) {
		return addCar(c, 0);
	}
	bool addCar(const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx) {
		return addCar(c, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCar(c, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCar(c, 0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCar(c, &__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCar(c, &__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_addCar(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_addCar(c, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c) {
		return begin_addCar(c, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx) {
		return begin_addCar(c, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(c, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(c, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::cardroid::data::zerocice::Callback_UserTyp_addCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(c, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_addCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(c, &__ctx, __del, __cookie);
	}

	bool end_addCar(const ::Ice::AsyncResultPtr&);

private:

	bool addCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool removeCar(const ::cardroid::data::zerocice::CarTypPtr& c) {
		return removeCar(c, 0);
	}
	bool removeCar(const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx) {
		return removeCar(c, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeCar(c, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCar(c, 0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeCar(c, &__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCar(c, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_removeCar(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_removeCar(c, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c) {
		return begin_removeCar(c, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx) {
		return begin_removeCar(c, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(c, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(c, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::cardroid::data::zerocice::Callback_UserTyp_removeCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(c, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr& c,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_removeCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(c, &__ctx, __del, __cookie);
	}

	bool end_removeCar(const ::Ice::AsyncResultPtr&);

private:

	bool removeCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNCars() {
		return getNCars(0);
	}
	::Ice::Int getNCars(const ::Ice::Context& __ctx) {
		return getNCars(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNCars(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNCars(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNCars(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNCars(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNCars(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNCars(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNCars(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserTypPrx __proxy =
						::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNCars(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNCars(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNCars() {
		return begin_getNCars(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context& __ctx) {
		return begin_getNCars(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNCars(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNCars(
			const ::cardroid::data::zerocice::Callback_UserTyp_getNCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_getNCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNCars(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNCars(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNCars(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNCars(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void clearCars() {
		clearCars(0);
	}
	void clearCars(const ::Ice::Context& __ctx) {
		clearCars(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_clearCars(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearCars(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_clearCars(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearCars(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearCars(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearCars(&__ctx, ::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_clearCars() {
		return begin_clearCars(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context& __ctx) {
		return begin_clearCars(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearCars(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearCars(
			const ::cardroid::data::zerocice::Callback_UserTyp_clearCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearCars(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserTyp_clearCarsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearCars(&__ctx, __del, __cookie);
	}

	void end_clearCars(const ::Ice::AsyncResultPtr&);

private:

	void clearCars(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_clearCars(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<UserTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_secure(bool __secure) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_twoway() const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_oneway() const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_batchOneway() const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_datagram() const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_batchDatagram() const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_compress(bool __compress) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<UserTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<UserTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DateTyp: virtual public ::IceProxy::Ice::Object {
public:

	::Ice::Long getTimeInMillis() {
		return getTimeInMillis(0);
	}
	::Ice::Long getTimeInMillis(const ::Ice::Context& __ctx) {
		return getTimeInMillis(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTimeInMillis(
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeInMillis(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimeInMillis(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeInMillis(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeInMillis(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeInMillis(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTimeInMillis(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Long)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::DateTypPrx __proxy =
						::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Long __ret;
				try {
					__ret = __proxy->end_getTimeInMillis(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Long)> _response;
		};
		return begin_getTimeInMillis(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTimeInMillis() {
		return begin_getTimeInMillis(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context& __ctx) {
		return begin_getTimeInMillis(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeInMillis(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeInMillis(
			const ::cardroid::data::zerocice::Callback_DateTyp_getTimeInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTyp_getTimeInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeInMillis(&__ctx, __del, __cookie);
	}

	::Ice::Long end_getTimeInMillis(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Long getTimeInMillis(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTimeInMillis(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTimeInMillis(::Ice::Long datetime) {
		setTimeInMillis(datetime, 0);
	}
	void setTimeInMillis(::Ice::Long datetime, const ::Ice::Context& __ctx) {
		setTimeInMillis(datetime, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeInMillis(datetime, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeInMillis(datetime, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeInMillis(datetime, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeInMillis(datetime, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime) {
		return begin_setTimeInMillis(datetime, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::Context& __ctx) {
		return begin_setTimeInMillis(datetime, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeInMillis(datetime, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeInMillis(datetime, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::cardroid::data::zerocice::Callback_DateTyp_setTimeInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeInMillis(datetime, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long datetime,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTyp_setTimeInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeInMillis(datetime, &__ctx, __del, __cookie);
	}

	void end_setTimeInMillis(const ::Ice::AsyncResultPtr&);

private:

	void setTimeInMillis(::Ice::Long, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTimeInMillis(::Ice::Long,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::DateTypPrx __proxy =
						::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_DateTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<DateTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_secure(bool __secure) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_twoway() const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_oneway() const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_batchOneway() const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_datagram() const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_batchDatagram() const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_compress(bool __compress) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<DateTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DateTimeTyp: virtual public ::IceProxy::cardroid::data::zerocice::DateTyp {
public:

	::IceInternal::ProxyHandle<DateTimeTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_secure(bool __secure) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_twoway() const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_oneway() const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_batchOneway() const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_datagram() const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_batchDatagram() const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTimeTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<DateTimeTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DateTimePrefsTyp: virtual public ::IceProxy::cardroid::data::zerocice::DateTyp {
public:

	::Ice::Int getToleranceDays() {
		return getToleranceDays(0);
	}
	::Ice::Int getToleranceDays(const ::Ice::Context& __ctx) {
		return getToleranceDays(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getToleranceDays(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getToleranceDays(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getToleranceDays(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getToleranceDays(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getToleranceDays(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getToleranceDays(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getToleranceDays(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
						::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getToleranceDays(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getToleranceDays(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getToleranceDays() {
		return begin_getToleranceDays(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context& __ctx) {
		return begin_getToleranceDays(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getToleranceDays(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getToleranceDays(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getToleranceDays(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getToleranceDays(
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_getToleranceDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getToleranceDays(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_getToleranceDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getToleranceDays(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getToleranceDays(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getToleranceDays(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getToleranceDays(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setToleranceDays(::Ice::Int toleranceDays) {
		setToleranceDays(toleranceDays, 0);
	}
	void setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx) {
		setToleranceDays(toleranceDays, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setToleranceDays(toleranceDays, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setToleranceDays(toleranceDays, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setToleranceDays(toleranceDays, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setToleranceDays(toleranceDays, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays) {
		return begin_setToleranceDays(toleranceDays, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx) {
		return begin_setToleranceDays(toleranceDays, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setToleranceDays(toleranceDays, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setToleranceDays(toleranceDays, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_setToleranceDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setToleranceDays(toleranceDays, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int toleranceDays,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_setToleranceDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setToleranceDays(toleranceDays, &__ctx, __del, __cookie);
	}

	void end_setToleranceDays(const ::Ice::AsyncResultPtr&);

private:

	void setToleranceDays(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setToleranceDays(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TimePreferences getTimePrefs() {
		return getTimePrefs(0);
	}
	::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Context& __ctx) {
		return getTimePrefs(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTimePrefs(
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::TimePreferences)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimePrefs(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimePrefs(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimePrefs(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::TimePreferences)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimePrefs(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimePrefs(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTimePrefs(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::TimePreferences)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(::cardroid::data::zerocice::TimePreferences)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
						::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TimePreferences __ret;
				try {
					__ret = __proxy->end_getTimePrefs(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::cardroid::data::zerocice::TimePreferences)> _response;
		};
		return begin_getTimePrefs(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTimePrefs() {
		return begin_getTimePrefs(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context& __ctx) {
		return begin_getTimePrefs(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimePrefs(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimePrefs(
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_getTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_getTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimePrefs(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TimePreferences end_getTimePrefs(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTimePrefs(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTimePrefs(::cardroid::data::zerocice::TimePreferences timePrefs) {
		setTimePrefs(timePrefs, 0);
	}
	void setTimePrefs(::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx) {
		setTimePrefs(timePrefs, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimePrefs(timePrefs, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimePrefs(timePrefs, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimePrefs(timePrefs, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimePrefs(timePrefs, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs) {
		return begin_setTimePrefs(timePrefs, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx) {
		return begin_setTimePrefs(timePrefs, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimePrefs(timePrefs, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimePrefs(timePrefs, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_setTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimePrefs(timePrefs, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences timePrefs,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_DateTimePrefsTyp_setTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimePrefs(timePrefs, &__ctx, __del, __cookie);
	}

	void end_setTimePrefs(const ::Ice::AsyncResultPtr&);

private:

	void setTimePrefs(::cardroid::data::zerocice::TimePreferences,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTimePrefs(
			::cardroid::data::zerocice::TimePreferences, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_secure(
			bool __secure) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_twoway() const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_oneway() const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_batchOneway() const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_datagram() const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_batchDatagram() const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_timeout(
			int __timeout) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<DateTimePrefsTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<DateTimePrefsTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TripTyp: virtual public ::IceProxy::Ice::Object {
public:

	::Ice::Int getTripId() {
		return getTripId(0);
	}
	::Ice::Int getTripId(const ::Ice::Context& __ctx) {
		return getTripId(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripId(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripId(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripId(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripId(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripId(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripId(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripId(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getTripId(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getTripId(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripId() {
		return begin_getTripId(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context& __ctx) {
		return begin_getTripId(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripId(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripId(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripId(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripId(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripId(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getTripId(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getTripId(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripId(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripId(::Ice::Int tripId) {
		setTripId(tripId, 0);
	}
	void setTripId(::Ice::Int tripId, const ::Ice::Context& __ctx) {
		setTripId(tripId, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripId(tripId, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripId(tripId, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripId(tripId, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripId(tripId, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId) {
		return begin_setTripId(tripId, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::Context& __ctx) {
		return begin_setTripId(tripId, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripId(tripId, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripId(tripId, &__ctx, __del, __cookie);
	}

	void end_setTripId(const ::Ice::AsyncResultPtr&);

private:

	void setTripId(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripId(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::PlaceTypPtr getPlace1() {
		return getPlace1(0);
	}
	::cardroid::data::zerocice::PlaceTypPtr getPlace1(
			const ::Ice::Context& __ctx) {
		return getPlace1(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPlace1(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlace1(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlace1(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlace1(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlace1(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlace1(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPlace1(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::PlaceTypPtr __ret;
				try {
					__ret = __proxy->end_getPlace1(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::PlaceTypPtr&)> _response;
		};
		return begin_getPlace1(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPlace1() {
		return begin_getPlace1(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context& __ctx) {
		return begin_getPlace1(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace1(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace1(
			const ::cardroid::data::zerocice::Callback_TripTyp_getPlace1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getPlace1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace1(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::PlaceTypPtr end_getPlace1(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::PlaceTypPtr getPlace1(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPlace1(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace) {
		setPlace1(fromPlace, 0);
	}
	void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx) {
		setPlace1(fromPlace, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlace1(fromPlace, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlace1(fromPlace, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlace1(fromPlace, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlace1(fromPlace, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace) {
		return begin_setPlace1(fromPlace, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx) {
		return begin_setPlace1(fromPlace, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace1(fromPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace1(fromPlace, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::cardroid::data::zerocice::Callback_TripTyp_setPlace1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace1(fromPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr& fromPlace,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setPlace1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace1(fromPlace, &__ctx, __del, __cookie);
	}

	void end_setPlace1(const ::Ice::AsyncResultPtr&);

private:

	void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setPlace1(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::PlaceTypPtr getPlace2() {
		return getPlace2(0);
	}
	::cardroid::data::zerocice::PlaceTypPtr getPlace2(
			const ::Ice::Context& __ctx) {
		return getPlace2(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPlace2(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlace2(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlace2(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlace2(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPlace2(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPlace2(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPlace2(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::PlaceTypPtr __ret;
				try {
					__ret = __proxy->end_getPlace2(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::PlaceTypPtr&)> _response;
		};
		return begin_getPlace2(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPlace2() {
		return begin_getPlace2(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context& __ctx) {
		return begin_getPlace2(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace2(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace2(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace2(
			const ::cardroid::data::zerocice::Callback_TripTyp_getPlace2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace2(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getPlace2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPlace2(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::PlaceTypPtr end_getPlace2(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::PlaceTypPtr getPlace2(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPlace2(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr& toPlace) {
		setPlace2(toPlace, 0);
	}
	void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx) {
		setPlace2(toPlace, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlace2(toPlace, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlace2(toPlace, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPlace2(toPlace, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPlace2(toPlace, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace) {
		return begin_setPlace2(toPlace, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx) {
		return begin_setPlace2(toPlace, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace2(toPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace2(toPlace, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::cardroid::data::zerocice::Callback_TripTyp_setPlace2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace2(toPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr& toPlace,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setPlace2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPlace2(toPlace, &__ctx, __del, __cookie);
	}

	void end_setPlace2(const ::Ice::AsyncResultPtr&);

private:

	void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setPlace2(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::DateTypPtr getTripDate() {
		return getTripDate(0);
	}
	::cardroid::data::zerocice::DateTypPtr getTripDate(
			const ::Ice::Context& __ctx) {
		return getTripDate(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripDate(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDate(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDate(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDate(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDate(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDate(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripDate(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::DateTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTypPtr __ret;
				try {
					__ret = __proxy->end_getTripDate(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::DateTypPtr&)> _response;
		};
		return begin_getTripDate(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripDate() {
		return begin_getTripDate(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context& __ctx) {
		return begin_getTripDate(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDate(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDate(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDate(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTypPtr end_getTripDate(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTypPtr getTripDate(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripDate(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripDate(const ::cardroid::data::zerocice::DateTypPtr& tripDate) {
		setTripDate(tripDate, 0);
	}
	void setTripDate(const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx) {
		setTripDate(tripDate, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDate(tripDate, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDate(tripDate, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDate(tripDate, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDate(tripDate, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate) {
		return begin_setTripDate(tripDate, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx) {
		return begin_setTripDate(tripDate, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDate(tripDate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDate(tripDate, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDate(tripDate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripDate,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDate(tripDate, &__ctx, __del, __cookie);
	}

	void end_setTripDate(const ::Ice::AsyncResultPtr&);

private:

	void setTripDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNSeats() {
		return getNSeats(0);
	}
	::Ice::Int getNSeats(const ::Ice::Context& __ctx) {
		return getNSeats(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNSeats(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNSeats(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNSeats(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNSeats() {
		return begin_getNSeats(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx) {
		return begin_getNSeats(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(
			const ::cardroid::data::zerocice::Callback_TripTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNSeats(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNSeats(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setNSeats(::Ice::Int nSeats) {
		setNSeats(nSeats, 0);
	}
	void setNSeats(::Ice::Int nSeats, const ::Ice::Context& __ctx) {
		setNSeats(nSeats, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats) {
		return begin_setNSeats(nSeats, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx) {
		return begin_setNSeats(nSeats, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::cardroid::data::zerocice::Callback_TripTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	void end_setNSeats(const ::Ice::AsyncResultPtr&);

private:

	void setNSeats(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::DateTypPtr getTripReturnDate() {
		return getTripReturnDate(0);
	}
	::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Context& __ctx) {
		return getTripReturnDate(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripReturnDate(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDate(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDate(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDate(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDate(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDate(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripReturnDate(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::DateTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTypPtr __ret;
				try {
					__ret = __proxy->end_getTripReturnDate(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::DateTypPtr&)> _response;
		};
		return begin_getTripReturnDate(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripReturnDate() {
		return begin_getTripReturnDate(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context& __ctx) {
		return begin_getTripReturnDate(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDate(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDate(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDate(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDate(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTypPtr end_getTripReturnDate(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripReturnDate(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate) {
		setTripReturnDate(tripReturnDate, 0);
	}
	void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx) {
		setTripReturnDate(tripReturnDate, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDate(tripReturnDate, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDate(tripReturnDate, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDate(tripReturnDate, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDate(tripReturnDate, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate) {
		return begin_setTripReturnDate(tripReturnDate, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx) {
		return begin_setTripReturnDate(tripReturnDate, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDate(tripReturnDate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDate(tripReturnDate, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDate(tripReturnDate, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr& tripReturnDate,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDate(tripReturnDate, &__ctx, __del, __cookie);
	}

	void end_setTripReturnDate(const ::Ice::AsyncResultPtr&);

private:

	void setTripReturnDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasTripReturnDate() {
		return hasTripReturnDate(0);
	}
	bool hasTripReturnDate(const ::Ice::Context& __ctx) {
		return hasTripReturnDate(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasTripReturnDate(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasTripReturnDate(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasTripReturnDate(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasTripReturnDate(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasTripReturnDate(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasTripReturnDate(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasTripReturnDate(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasTripReturnDate(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasTripReturnDate(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasTripReturnDate() {
		return begin_hasTripReturnDate(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context& __ctx) {
		return begin_hasTripReturnDate(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_hasTripReturnDate(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasTripReturnDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasTripReturnDate(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasTripReturnDate(
			const ::cardroid::data::zerocice::Callback_TripTyp_hasTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasTripReturnDate(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_hasTripReturnDatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasTripReturnDate(&__ctx, __del, __cookie);
	}

	bool end_hasTripReturnDate(const ::Ice::AsyncResultPtr&);

private:

	bool hasTripReturnDate(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasTripReturnDate(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::WeekdaysV getTripWeekDays() {
		return getTripWeekDays(0);
	}
	::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Context& __ctx) {
		return getTripWeekDays(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripWeekDays(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WeekdaysV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripWeekDays(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripWeekDays(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripWeekDays(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WeekdaysV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripWeekDays(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripWeekDays(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripWeekDays(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WeekdaysV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::WeekdaysV&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::WeekdaysV __ret;
				try {
					__ret = __proxy->end_getTripWeekDays(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::WeekdaysV&)> _response;
		};
		return begin_getTripWeekDays(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripWeekDays() {
		return begin_getTripWeekDays(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context& __ctx) {
		return begin_getTripWeekDays(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWeekDays(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWeekDays(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWeekDays(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripWeekDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWeekDays(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripWeekDaysPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWeekDays(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::WeekdaysV end_getTripWeekDays(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripWeekDays(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::Periodicity getTripPeriodicity() {
		return getTripPeriodicity(0);
	}
	::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Context& __ctx) {
		return getTripPeriodicity(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripPeriodicity(
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::Periodicity)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripPeriodicity(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripPeriodicity(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripPeriodicity(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripPeriodicity(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::Periodicity)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripPeriodicity(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripPeriodicity(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripPeriodicity(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripPeriodicity(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::Periodicity)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(::cardroid::data::zerocice::Periodicity)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::Periodicity __ret;
				try {
					__ret = __proxy->end_getTripPeriodicity(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::cardroid::data::zerocice::Periodicity)> _response;
		};
		return begin_getTripPeriodicity(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripPeriodicity() {
		return begin_getTripPeriodicity(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripPeriodicity(
			const ::Ice::Context& __ctx) {
		return begin_getTripPeriodicity(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getTripPeriodicity(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPeriodicity(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPeriodicity(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPeriodicity(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPeriodicity(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPeriodicity(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPeriodicity(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPeriodicity(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::Periodicity end_getTripPeriodicity(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripPeriodicity(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity) {
		setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, 0);
	}
	void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx) {
		setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				&__ctx, ::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripWeekDaysPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV& tripWeekDays,
			::cardroid::data::zerocice::Periodicity tripPeriodicity,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripWeekDaysPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity,
				&__ctx, __del, __cookie);
	}

	void end_setTripWeekDaysPeriodicity(const ::Ice::AsyncResultPtr&);

private:

	void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasWeekDaysPeriodicity() {
		return hasWeekDaysPeriodicity(0);
	}
	bool hasWeekDaysPeriodicity(const ::Ice::Context& __ctx) {
		return hasWeekDaysPeriodicity(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasWeekDaysPeriodicity(0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasWeekDaysPeriodicity(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasWeekDaysPeriodicity(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasWeekDaysPeriodicity(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasWeekDaysPeriodicity(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasWeekDaysPeriodicity(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasWeekDaysPeriodicity(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity() {
		return begin_hasWeekDaysPeriodicity(0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::Context& __ctx) {
		return begin_hasWeekDaysPeriodicity(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasWeekDaysPeriodicity(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasWeekDaysPeriodicity(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::Callback_TripTyp_hasWeekDaysPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasWeekDaysPeriodicity(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_hasWeekDaysPeriodicityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasWeekDaysPeriodicity(&__ctx, __del, __cookie);
	}

	bool end_hasWeekDaysPeriodicity(const ::Ice::AsyncResultPtr&);

private:

	bool hasWeekDaysPeriodicity(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasWeekDaysPeriodicity(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getDistance() {
		return getDistance(0);
	}
	::Ice::Int getDistance(const ::Ice::Context& __ctx) {
		return getDistance(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getDistance(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getDistance(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getDistance(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getDistance(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getDistance(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getDistance(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getDistance(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getDistance(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getDistance(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getDistance() {
		return begin_getDistance(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context& __ctx) {
		return begin_getDistance(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDistance(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDistance(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDistance(
			const ::cardroid::data::zerocice::Callback_TripTyp_getDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDistance(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getDistance(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getDistance(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getDistance(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getDistance(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setDistance(::Ice::Int distance) {
		setDistance(distance, 0);
	}
	void setDistance(::Ice::Int distance, const ::Ice::Context& __ctx) {
		setDistance(distance, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setDistance(distance, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setDistance(distance, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setDistance(distance, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setDistance(distance, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance) {
		return begin_setDistance(distance, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::Context& __ctx) {
		return begin_setDistance(distance, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDistance(distance, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDistance(distance, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::cardroid::data::zerocice::Callback_TripTyp_setDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDistance(distance, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setDistance(distance, &__ctx, __del, __cookie);
	}

	void end_setDistance(const ::Ice::AsyncResultPtr&);

private:

	void setDistance(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setDistance(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasDistance() {
		return hasDistance(0);
	}
	bool hasDistance(const ::Ice::Context& __ctx) {
		return hasDistance(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasDistance(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasDistance(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasDistance(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasDistance(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasDistance(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasDistance(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasDistance(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasDistance(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasDistance(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasDistance() {
		return begin_hasDistance(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context& __ctx) {
		return begin_hasDistance(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDistance(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDistance(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDistance(
			const ::cardroid::data::zerocice::Callback_TripTyp_hasDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDistance(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_hasDistancePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasDistance(&__ctx, __del, __cookie);
	}

	bool end_hasDistance(const ::Ice::AsyncResultPtr&);

private:

	bool hasDistance(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasDistance(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getCharacteristics() {
		return getCharacteristics(0);
	}
	::std::string getCharacteristics(const ::Ice::Context& __ctx) {
		return getCharacteristics(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getCharacteristics(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCharacteristics(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCharacteristics(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCharacteristics(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getCharacteristics(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCharacteristics(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getCharacteristics(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCharacteristics(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getCharacteristics(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getCharacteristics(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getCharacteristics(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getCharacteristics() {
		return begin_getCharacteristics(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCharacteristics(
			const ::Ice::Context& __ctx) {
		return begin_getCharacteristics(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getCharacteristics(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCharacteristics(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCharacteristics(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCharacteristics(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCharacteristics(
			const ::cardroid::data::zerocice::Callback_TripTyp_getCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCharacteristics(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCharacteristics(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCharacteristics(&__ctx, __del, __cookie);
	}

	::std::string end_getCharacteristics(const ::Ice::AsyncResultPtr&);

private:

	::std::string getCharacteristics(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getCharacteristics(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setCharacteristics(const ::std::string& characteristics) {
		setCharacteristics(characteristics, 0);
	}
	void setCharacteristics(const ::std::string& characteristics,
			const ::Ice::Context& __ctx) {
		setCharacteristics(characteristics, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCharacteristics(characteristics, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCharacteristics(characteristics, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setCharacteristics(characteristics, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setCharacteristics(characteristics, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics) {
		return begin_setCharacteristics(characteristics, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics, const ::Ice::Context& __ctx) {
		return begin_setCharacteristics(characteristics, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCharacteristics(characteristics, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCharacteristics(characteristics, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics,
			const ::cardroid::data::zerocice::Callback_TripTyp_setCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCharacteristics(characteristics, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setCharacteristics(
			const ::std::string& characteristics, const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setCharacteristics(characteristics, &__ctx, __del,
				__cookie);
	}

	void end_setCharacteristics(const ::Ice::AsyncResultPtr&);

private:

	void setCharacteristics(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setCharacteristics(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool hasCharacteristics() {
		return hasCharacteristics(0);
	}
	bool hasCharacteristics(const ::Ice::Context& __ctx) {
		return hasCharacteristics(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_hasCharacteristics(
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasCharacteristics(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_hasCharacteristics(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasCharacteristics(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_hasCharacteristics(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_hasCharacteristics(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_hasCharacteristics(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_hasCharacteristics(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_hasCharacteristics(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_hasCharacteristics(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_hasCharacteristics(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_hasCharacteristics() {
		return begin_hasCharacteristics(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_hasCharacteristics(
			const ::Ice::Context& __ctx) {
		return begin_hasCharacteristics(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_hasCharacteristics(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasCharacteristics(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasCharacteristics(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasCharacteristics(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasCharacteristics(
			const ::cardroid::data::zerocice::Callback_TripTyp_hasCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasCharacteristics(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_hasCharacteristics(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_hasCharacteristicsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_hasCharacteristics(&__ctx, __del, __cookie);
	}

	bool end_hasCharacteristics(const ::Ice::AsyncResultPtr&);

private:

	bool hasCharacteristics(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_hasCharacteristics(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripType(::Ice::Int type) {
		setTripType(type, 0);
	}
	void setTripType(::Ice::Int type, const ::Ice::Context& __ctx) {
		setTripType(type, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripType(type, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripType(type, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripType(type, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripType(type, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type) {
		return begin_setTripType(type, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::Context& __ctx) {
		return begin_setTripType(type, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripType(type, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripType(type, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripType(type, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int type,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_setTripTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripType(type, &__ctx, __del, __cookie);
	}

	void end_setTripType(const ::Ice::AsyncResultPtr&);

private:

	void setTripType(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripType(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getTripType() {
		return getTripType(0);
	}
	::Ice::Int getTripType(const ::Ice::Context& __ctx) {
		return getTripType(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripType(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripType(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripType(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripType(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripType(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripType(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripType(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getTripType(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getTripType(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripType() {
		return begin_getTripType(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context& __ctx) {
		return begin_getTripType(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripType(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripType(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripType(
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripType(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_getTripTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripType(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getTripType(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getTripType(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripType(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripTypPrx __proxy =
						::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_TripTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<TripTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_secure(bool __secure) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_twoway() const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_oneway() const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_batchOneway() const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_datagram() const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_batchDatagram() const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_compress(bool __compress) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<TripTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class WaypointTyp: virtual public ::IceProxy::Ice::Object {
public:

	::Ice::Int getNOrder() {
		return getNOrder(0);
	}
	::Ice::Int getNOrder(const ::Ice::Context& __ctx) {
		return getNOrder(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNOrder(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNOrder(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNOrder(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNOrder(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNOrder(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNOrder(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNOrder(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::WaypointTypPrx __proxy =
						::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNOrder(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNOrder(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNOrder() {
		return begin_getNOrder(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context& __ctx) {
		return begin_getNOrder(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNOrder(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNOrder(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNOrder(
			const ::cardroid::data::zerocice::Callback_WaypointTyp_getNOrderPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNOrder(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_getNOrderPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNOrder(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNOrder(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNOrder(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNOrder(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setNOrder(::Ice::Int nOrder) {
		setNOrder(nOrder, 0);
	}
	void setNOrder(::Ice::Int nOrder, const ::Ice::Context& __ctx) {
		setNOrder(nOrder, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNOrder(nOrder, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNOrder(nOrder, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNOrder(nOrder, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNOrder(nOrder, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder) {
		return begin_setNOrder(nOrder, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::Context& __ctx) {
		return begin_setNOrder(nOrder, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNOrder(nOrder, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNOrder(nOrder, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_setNOrderPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNOrder(nOrder, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int nOrder,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_setNOrderPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNOrder(nOrder, &__ctx, __del, __cookie);
	}

	void end_setNOrder(const ::Ice::AsyncResultPtr&);

private:

	void setNOrder(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setNOrder(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace() {
		return getWaypointPlace(0);
	}
	::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Context& __ctx) {
		return getWaypointPlace(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getWaypointPlace(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getWaypointPlace(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getWaypointPlace(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getWaypointPlace(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getWaypointPlace(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getWaypointPlace(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getWaypointPlace(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::PlaceTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::WaypointTypPrx __proxy =
						::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::PlaceTypPtr __ret;
				try {
					__ret = __proxy->end_getWaypointPlace(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::PlaceTypPtr&)> _response;
		};
		return begin_getWaypointPlace(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getWaypointPlace() {
		return begin_getWaypointPlace(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context& __ctx) {
		return begin_getWaypointPlace(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getWaypointPlace(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getWaypointPlace(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getWaypointPlace(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getWaypointPlace(
			const ::cardroid::data::zerocice::Callback_WaypointTyp_getWaypointPlacePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getWaypointPlace(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_getWaypointPlacePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getWaypointPlace(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::PlaceTypPtr end_getWaypointPlace(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getWaypointPlace(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace) {
		setWaypointPlace(waypointPlace, 0);
	}
	void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx) {
		setWaypointPlace(waypointPlace, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setWaypointPlace(waypointPlace, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setWaypointPlace(waypointPlace, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setWaypointPlace(waypointPlace, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setWaypointPlace(waypointPlace, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace) {
		return begin_setWaypointPlace(waypointPlace, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx) {
		return begin_setWaypointPlace(waypointPlace, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setWaypointPlace(waypointPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setWaypointPlace(waypointPlace, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_setWaypointPlacePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setWaypointPlace(waypointPlace, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypointPlace,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_setWaypointPlacePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setWaypointPlace(waypointPlace, &__ctx, __del, __cookie);
	}

	void end_setWaypointPlace(const ::Ice::AsyncResultPtr&);

private:

	void setWaypointPlace(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::WaypointTypPrx __proxy =
						::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_WaypointTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_WaypointTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<WaypointTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_secure(bool __secure) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_twoway() const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_oneway() const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_batchOneway() const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_datagram() const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_batchDatagram() const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<WaypointTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<WaypointTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PassengerTyp: virtual public ::IceProxy::Ice::Object {
public:

	::cardroid::data::zerocice::UserTypPrx getPassengerUser() {
		return getPassengerUser(0);
	}
	::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Context& __ctx) {
		return getPassengerUser(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPassengerUser(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPassengerUser(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPassengerUser(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPassengerUser(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPassengerUser(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPassengerUser(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPassengerUser(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PassengerTypPrx __proxy =
						::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getPassengerUser(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getPassengerUser(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPassengerUser() {
		return begin_getPassengerUser(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context& __ctx) {
		return begin_getPassengerUser(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPassengerUser(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerUser(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerUser(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerUser(
			const ::cardroid::data::zerocice::Callback_PassengerTyp_getPassengerUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerUser(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_getPassengerUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerUser(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getPassengerUser(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPassengerUser(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser) {
		setPassengerUser(passengerUser, 0);
	}
	void setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx) {
		setPassengerUser(passengerUser, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPassengerUser(passengerUser, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPassengerUser(passengerUser, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPassengerUser(passengerUser, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPassengerUser(passengerUser, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser) {
		return begin_setPassengerUser(passengerUser, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx) {
		return begin_setPassengerUser(passengerUser, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPassengerUser(passengerUser, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPassengerUser(passengerUser, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_setPassengerUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPassengerUser(passengerUser, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx& passengerUser,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_setPassengerUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPassengerUser(passengerUser, &__ctx, __del, __cookie);
	}

	void end_setPassengerUser(const ::Ice::AsyncResultPtr&);

private:

	void setPassengerUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setPassengerUser(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNSeats() {
		return getNSeats(0);
	}
	::Ice::Int getNSeats(const ::Ice::Context& __ctx) {
		return getNSeats(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNSeats(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNSeats(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNSeats(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PassengerTypPrx __proxy =
						::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNSeats(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNSeats(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNSeats() {
		return begin_getNSeats(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx) {
		return begin_getNSeats(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(
			const ::cardroid::data::zerocice::Callback_PassengerTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_getNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNSeats(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNSeats(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNSeats(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNSeats(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setNSeats(::Ice::Int nSeats) {
		setNSeats(nSeats, 0);
	}
	void setNSeats(::Ice::Int nSeats, const ::Ice::Context& __ctx) {
		setNSeats(nSeats, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setNSeats(nSeats, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats) {
		return begin_setNSeats(nSeats, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx) {
		return begin_setNSeats(nSeats, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int nSeats,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_setNSeatsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setNSeats(nSeats, &__ctx, __del, __cookie);
	}

	void end_setNSeats(const ::Ice::AsyncResultPtr&);

private:

	void setNSeats(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setNSeats(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::PassengerTypPrx __proxy =
						::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_PassengerTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_PassengerTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<PassengerTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_secure(bool __secure) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_twoway() const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_oneway() const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_batchOneway() const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_datagram() const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_batchDatagram() const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<PassengerTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<PassengerTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TripOfferTyp: virtual public ::IceProxy::cardroid::data::zerocice::TripTyp {
public:

	::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime() {
		return getTripDateTime(0);
	}
	::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Context& __ctx) {
		return getTripDateTime(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripDateTime(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDateTime(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDateTime(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDateTime(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDateTime(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDateTime(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripDateTime(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::DateTimeTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTimeTypPtr __ret;
				try {
					__ret = __proxy->end_getTripDateTime(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)> _response;
		};
		return begin_getTripDateTime(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripDateTime() {
		return begin_getTripDateTime(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context& __ctx) {
		return begin_getTripDateTime(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTime(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTime(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTime(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTime(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTime(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTimeTypPtr end_getTripDateTime(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripDateTime(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripDateTime(const ::cardroid::data::zerocice::DateTimeTypPtr& dt) {
		setTripDateTime(dt, 0);
	}
	void setTripDateTime(const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx) {
		setTripDateTime(dt, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDateTime(dt, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDateTime(dt, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDateTime(dt, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDateTime(dt, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt) {
		return begin_setTripDateTime(dt, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx) {
		return begin_setTripDateTime(dt, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTime(dt, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTime(dt, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTime(dt, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& dt,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTime(dt, &__ctx, __del, __cookie);
	}

	void end_setTripDateTime(const ::Ice::AsyncResultPtr&);

private:

	void setTripDateTime(const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime() {
		return getTripReturnDateTime(0);
	}
	::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Context& __ctx) {
		return getTripReturnDateTime(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDateTime(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDateTime(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDateTime(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDateTime(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripReturnDateTime(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::DateTimeTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTimeTypPtr __ret;
				try {
					__ret = __proxy->end_getTripReturnDateTime(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::DateTimeTypPtr&)> _response;
		};
		return begin_getTripReturnDateTime(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripReturnDateTime() {
		return begin_getTripReturnDateTime(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::Context& __ctx) {
		return begin_getTripReturnDateTime(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTime(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTime(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripReturnDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTime(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTime(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripReturnDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTime(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTimeTypPtr end_getTripReturnDateTime(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripReturnDateTime(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt) {
		setTripReturnDateTime(rdt, 0);
	}
	void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx) {
		setTripReturnDateTime(rdt, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDateTime(rdt, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDateTime(rdt, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDateTime(rdt, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDateTime(rdt, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt) {
		return begin_setTripReturnDateTime(rdt, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx) {
		return begin_setTripReturnDateTime(rdt, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTime(rdt, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTime(rdt, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripReturnDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTime(rdt, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr& rdt,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripReturnDateTimePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTime(rdt, &__ctx, __del, __cookie);
	}

	void end_setTripReturnDateTime(const ::Ice::AsyncResultPtr&);

private:

	void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::UserTypPrx getTripDriver() {
		return getTripDriver(0);
	}
	::cardroid::data::zerocice::UserTypPrx getTripDriver(
			const ::Ice::Context& __ctx) {
		return getTripDriver(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripDriver(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDriver(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDriver(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDriver(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDriver(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDriver(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripDriver(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getTripDriver(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getTripDriver(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripDriver() {
		return begin_getTripDriver(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context& __ctx) {
		return begin_getTripDriver(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDriver(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDriver(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDriver(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripDriverPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDriver(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripDriverPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDriver(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getTripDriver(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getTripDriver(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripDriver(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx& driver) {
		setTripDriver(driver, 0);
	}
	void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx) {
		setTripDriver(driver, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDriver(driver, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDriver(driver, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDriver(driver, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDriver(driver, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver) {
		return begin_setTripDriver(driver, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx) {
		return begin_setTripDriver(driver, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDriver(driver, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDriver(driver, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripDriverPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDriver(driver, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx& driver,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripDriverPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDriver(driver, &__ctx, __del, __cookie);
	}

	void end_setTripDriver(const ::Ice::AsyncResultPtr&);

private:

	void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripDriver(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::WaypointCollection getTripWaypoints() {
		return getTripWaypoints(0);
	}
	::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Context& __ctx) {
		return getTripWaypoints(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripWaypoints(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WaypointCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripWaypoints(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripWaypoints(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripWaypoints(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WaypointCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripWaypoints(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripWaypoints(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripWaypoints(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::WaypointCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::WaypointCollection&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::WaypointCollection __ret;
				try {
					__ret = __proxy->end_getTripWaypoints(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::WaypointCollection&)> _response;
		};
		return begin_getTripWaypoints(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripWaypoints() {
		return begin_getTripWaypoints(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context& __ctx) {
		return begin_getTripWaypoints(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripWaypoints(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWaypoints(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWaypoints(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripWaypoints(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::WaypointCollection end_getTripWaypoints(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripWaypoints(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints) {
		setTripWaypoints(waypoints, 0);
	}
	void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx) {
		setTripWaypoints(waypoints, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripWaypoints(waypoints, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripWaypoints(waypoints, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripWaypoints(waypoints, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripWaypoints(waypoints, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints) {
		return begin_setTripWaypoints(waypoints, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx) {
		return begin_setTripWaypoints(waypoints, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWaypoints(waypoints, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWaypoints(waypoints, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWaypoints(waypoints, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection& waypoints,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripWaypoints(waypoints, &__ctx, __del, __cookie);
	}

	void end_setTripWaypoints(const ::Ice::AsyncResultPtr&);

private:

	void setTripWaypoints(const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx getTripCar() {
		return getTripCar(0);
	}
	::cardroid::data::zerocice::CarTypPrx getTripCar(
			const ::Ice::Context& __ctx) {
		return getTripCar(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripCar(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripCar(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripCar(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripCar(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripCar(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripCar(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripCar(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_getTripCar(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_getTripCar(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripCar() {
		return begin_getTripCar(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context& __ctx) {
		return begin_getTripCar(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripCar(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripCar(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripCar(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripCar(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripCar(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_getTripCar(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx getTripCar(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripCar(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripCar(const ::cardroid::data::zerocice::CarTypPrx& tripCar) {
		setTripCar(tripCar, 0);
	}
	void setTripCar(const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx) {
		setTripCar(tripCar, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripCar(tripCar, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripCar(tripCar, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripCar(tripCar, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripCar(tripCar, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar) {
		return begin_setTripCar(tripCar, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx) {
		return begin_setTripCar(tripCar, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripCar(tripCar, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripCar(tripCar, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripCar(tripCar, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx& tripCar,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripCar(tripCar, &__ctx, __del, __cookie);
	}

	void end_setTripCar(const ::Ice::AsyncResultPtr&);

private:

	void setTripCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripCar(
			const ::cardroid::data::zerocice::CarTypPrx&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::PassengerCollection getTripPassengers() {
		return getTripPassengers(0);
	}
	::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Context& __ctx) {
		return getTripPassengers(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripPassengers(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PassengerCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripPassengers(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripPassengers(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripPassengers(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PassengerCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripPassengers(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripPassengers(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripPassengers(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::PassengerCollection&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::PassengerCollection&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::PassengerCollection __ret;
				try {
					__ret = __proxy->end_getTripPassengers(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::PassengerCollection&)> _response;
		};
		return begin_getTripPassengers(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripPassengers() {
		return begin_getTripPassengers(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context& __ctx) {
		return begin_getTripPassengers(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getTripPassengers(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPassengers(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPassengers(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripPassengers(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::PassengerCollection end_getTripPassengers(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripPassengers(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers) {
		setTripPassengers(passengers, 0);
	}
	void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx) {
		setTripPassengers(passengers, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripPassengers(passengers, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripPassengers(passengers, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripPassengers(passengers, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripPassengers(passengers, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers) {
		return begin_setTripPassengers(passengers, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx) {
		return begin_setTripPassengers(passengers, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripPassengers(passengers, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripPassengers(passengers, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripPassengers(passengers, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection& passengers,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripPassengers(passengers, &__ctx, __del, __cookie);
	}

	void end_setTripPassengers(const ::Ice::AsyncResultPtr&);

private:

	void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Double getPrice() {
		return getPrice(0);
	}
	::Ice::Double getPrice(const ::Ice::Context& __ctx) {
		return getPrice(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPrice(
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPrice(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPrice(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPrice(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPrice(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPrice(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPrice(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Double)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Double __ret;
				try {
					__ret = __proxy->end_getPrice(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Double)> _response;
		};
		return begin_getPrice(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPrice() {
		return begin_getPrice(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context& __ctx) {
		return begin_getPrice(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPrice(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPrice(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPrice(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getPricePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPrice(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getPricePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPrice(&__ctx, __del, __cookie);
	}

	::Ice::Double end_getPrice(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Double getPrice(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPrice(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setPrice(::Ice::Double price) {
		setPrice(price, 0);
	}
	void setPrice(::Ice::Double price, const ::Ice::Context& __ctx) {
		setPrice(price, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPrice(price, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPrice(price, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setPrice(price, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setPrice(price, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price) {
		return begin_setPrice(price, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::Context& __ctx) {
		return begin_setPrice(price, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPrice(price, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPrice(price, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setPricePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPrice(price, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double price,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setPricePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setPrice(price, &__ctx, __del, __cookie);
	}

	void end_setPrice(const ::Ice::AsyncResultPtr&);

private:

	void setPrice(::Ice::Double, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setPrice(::Ice::Double, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::AllowedV getAllowedFeatures() {
		return getAllowedFeatures(0);
	}
	::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Context& __ctx) {
		return getAllowedFeatures(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getAllowedFeatures(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::AllowedV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getAllowedFeatures(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getAllowedFeatures(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getAllowedFeatures(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getAllowedFeatures(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::AllowedV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getAllowedFeatures(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getAllowedFeatures(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getAllowedFeatures(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getAllowedFeatures(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::AllowedV&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::AllowedV&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::AllowedV __ret;
				try {
					__ret = __proxy->end_getAllowedFeatures(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::AllowedV&)> _response;
		};
		return begin_getAllowedFeatures(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getAllowedFeatures() {
		return begin_getAllowedFeatures(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getAllowedFeatures(
			const ::Ice::Context& __ctx) {
		return begin_getAllowedFeatures(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getAllowedFeatures(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAllowedFeatures(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAllowedFeatures(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAllowedFeatures(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAllowedFeatures(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getAllowedFeaturesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAllowedFeatures(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getAllowedFeatures(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getAllowedFeaturesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getAllowedFeatures(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::AllowedV end_getAllowedFeatures(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getAllowedFeatures(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed) {
		setAllowedFeatures(allowed, 0);
	}
	void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx) {
		setAllowedFeatures(allowed, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setAllowedFeatures(allowed, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setAllowedFeatures(allowed, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setAllowedFeatures(allowed, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setAllowedFeatures(allowed, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed) {
		return begin_setAllowedFeatures(allowed, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx) {
		return begin_setAllowedFeatures(allowed, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAllowedFeatures(allowed, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAllowedFeatures(allowed, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setAllowedFeaturesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAllowedFeatures(allowed, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV& allowed,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_setAllowedFeaturesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setAllowedFeatures(allowed, &__ctx, __del, __cookie);
	}

	void end_setAllowedFeatures(const ::Ice::AsyncResultPtr&);

private:

	void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setAllowedFeatures(
			const ::cardroid::data::zerocice::AllowedV&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint) {
		return addTripWaypoint(waypoint, 0);
	}
	bool addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx) {
		return addTripWaypoint(waypoint, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addTripWaypoint(waypoint, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addTripWaypoint(waypoint, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addTripWaypoint(waypoint, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addTripWaypoint(waypoint, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_addTripWaypoint(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_addTripWaypoint(waypoint, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint) {
		return begin_addTripWaypoint(waypoint, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx) {
		return begin_addTripWaypoint(waypoint, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripWaypoint(waypoint, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripWaypoint(waypoint, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_addTripWaypointPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripWaypoint(waypoint, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr& waypoint,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_addTripWaypointPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripWaypoint(waypoint, &__ctx, __del, __cookie);
	}

	bool end_addTripWaypoint(const ::Ice::AsyncResultPtr&);

private:

	bool addTripWaypoint(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_addTripWaypoint(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool removeTripWaypoint(::Ice::Int pos) {
		return removeTripWaypoint(pos, 0);
	}
	bool removeTripWaypoint(::Ice::Int pos, const ::Ice::Context& __ctx) {
		return removeTripWaypoint(pos, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeTripWaypoint(pos, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeTripWaypoint(pos, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeTripWaypoint(pos, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeTripWaypoint(pos, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_removeTripWaypoint(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_removeTripWaypoint(pos, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos) {
		return begin_removeTripWaypoint(pos, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context& __ctx) {
		return begin_removeTripWaypoint(pos, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripWaypoint(pos, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripWaypoint(pos, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_removeTripWaypointPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripWaypoint(pos, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int pos,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_removeTripWaypointPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripWaypoint(pos, &__ctx, __del, __cookie);
	}

	bool end_removeTripWaypoint(const ::Ice::AsyncResultPtr&);

private:

	bool removeTripWaypoint(::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_removeTripWaypoint(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNTripWaypoints() {
		return getNTripWaypoints(0);
	}
	::Ice::Int getNTripWaypoints(const ::Ice::Context& __ctx) {
		return getNTripWaypoints(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNTripWaypoints(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNTripWaypoints(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNTripWaypoints(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNTripWaypoints(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNTripWaypoints(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNTripWaypoints(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNTripWaypoints(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNTripWaypoints(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNTripWaypoints(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNTripWaypoints() {
		return begin_getNTripWaypoints(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context& __ctx) {
		return begin_getNTripWaypoints(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getNTripWaypoints(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripWaypoints(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripWaypoints(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getNTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getNTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripWaypoints(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNTripWaypoints(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNTripWaypoints(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNTripWaypoints(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void clearTripWaypoints() {
		clearTripWaypoints(0);
	}
	void clearTripWaypoints(const ::Ice::Context& __ctx) {
		clearTripWaypoints(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_clearTripWaypoints(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearTripWaypoints(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_clearTripWaypoints(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearTripWaypoints(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearTripWaypoints(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearTripWaypoints(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearTripWaypoints(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_clearTripWaypoints() {
		return begin_clearTripWaypoints(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_clearTripWaypoints(
			const ::Ice::Context& __ctx) {
		return begin_clearTripWaypoints(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_clearTripWaypoints(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripWaypoints(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripWaypoints(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripWaypoints(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_clearTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripWaypoints(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripWaypoints(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_clearTripWaypointsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripWaypoints(&__ctx, __del, __cookie);
	}

	void end_clearTripWaypoints(const ::Ice::AsyncResultPtr&);

private:

	void clearTripWaypoints(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_clearTripWaypoints(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats) {
		return addTripPassenger(passenger, seats, 0);
	}
	bool addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx) {
		return addTripPassenger(passenger, seats, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addTripPassenger(passenger, seats, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addTripPassenger(passenger, seats, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addTripPassenger(passenger, seats, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addTripPassenger(passenger, seats, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_addTripPassenger(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_addTripPassenger(passenger, seats, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats) {
		return begin_addTripPassenger(passenger, seats, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx) {
		return begin_addTripPassenger(passenger, seats, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripPassenger(passenger, seats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripPassenger(passenger, seats, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_addTripPassengerPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripPassenger(passenger, seats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int seats, const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_addTripPassengerPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addTripPassenger(passenger, seats, &__ctx, __del, __cookie);
	}

	bool end_addTripPassenger(const ::Ice::AsyncResultPtr&);

private:

	bool addTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_addTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger) {
		return removeTripPassenger(passenger, 0);
	}
	bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx) {
		return removeTripPassenger(passenger, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeTripPassenger(passenger, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeTripPassenger(passenger, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_removeTripPassenger(passenger, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeTripPassenger(passenger, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_removeTripPassenger(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_removeTripPassenger(passenger, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger) {
		return begin_removeTripPassenger(passenger, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx) {
		return begin_removeTripPassenger(passenger, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripPassenger(passenger, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripPassenger(passenger, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_removeTripPassengerPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripPassenger(passenger, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_removeTripPassengerPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeTripPassenger(passenger, &__ctx, __del, __cookie);
	}

	bool end_removeTripPassenger(const ::Ice::AsyncResultPtr&);

private:

	bool removeTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Int getNTripPassengers() {
		return getNTripPassengers(0);
	}
	::Ice::Int getNTripPassengers(const ::Ice::Context& __ctx) {
		return getNTripPassengers(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getNTripPassengers(
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNTripPassengers(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getNTripPassengers(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNTripPassengers(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getNTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getNTripPassengers(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getNTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getNTripPassengers(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getNTripPassengers(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Int)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Int)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripOfferTypPrx __proxy =
						::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Int __ret;
				try {
					__ret = __proxy->end_getNTripPassengers(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Int)> _response;
		};
		return begin_getNTripPassengers(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getNTripPassengers() {
		return begin_getNTripPassengers(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getNTripPassengers(
			const ::Ice::Context& __ctx) {
		return begin_getNTripPassengers(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getNTripPassengers(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripPassengers(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripPassengers(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripPassengers(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getNTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getNTripPassengers(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_getNTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getNTripPassengers(&__ctx, __del, __cookie);
	}

	::Ice::Int end_getNTripPassengers(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Int getNTripPassengers(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getNTripPassengers(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void clearTripPassengers() {
		clearTripPassengers(0);
	}
	void clearTripPassengers(const ::Ice::Context& __ctx) {
		clearTripPassengers(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_clearTripPassengers(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearTripPassengers(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_clearTripPassengers(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearTripPassengers(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_clearTripPassengers(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_clearTripPassengers(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_clearTripPassengers(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_clearTripPassengers() {
		return begin_clearTripPassengers(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_clearTripPassengers(
			const ::Ice::Context& __ctx) {
		return begin_clearTripPassengers(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_clearTripPassengers(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripPassengers(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripPassengers(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripPassengers(
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_clearTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripPassengers(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_clearTripPassengers(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripOfferTyp_clearTripPassengersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_clearTripPassengers(&__ctx, __del, __cookie);
	}

	void end_clearTripPassengers(const ::Ice::AsyncResultPtr&);

private:

	void clearTripPassengers(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_clearTripPassengers(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<TripOfferTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_secure(bool __secure) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_twoway() const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_oneway() const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_batchOneway() const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_datagram() const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_batchDatagram() const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripOfferTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<TripOfferTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TripRequestTyp: virtual public ::IceProxy::cardroid::data::zerocice::TripTyp {
public:

	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs() {
		return getTripDateTimePrefs(0);
	}
	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Context& __ctx) {
		return getTripDateTimePrefs(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDateTimePrefs(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDateTimePrefs(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripDateTimePrefs(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripDateTimePrefs(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripDateTimePrefs(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripRequestTypPrx __proxy =
						::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
				try {
					__ret = __proxy->end_getTripDateTimePrefs(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)> _response;
		};
		return begin_getTripDateTimePrefs(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs() {
		return begin_getTripDateTimePrefs(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::Context& __ctx) {
		return begin_getTripDateTimePrefs(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTimePrefs(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripDateTimePrefs(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTimePrefsTypPtr end_getTripDateTimePrefs(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripDateTimePrefs(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp) {
		setTripDateTimePrefs(dtp, 0);
	}
	void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx) {
		setTripDateTimePrefs(dtp, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDateTimePrefs(dtp, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDateTimePrefs(dtp, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripDateTimePrefs(dtp, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripDateTimePrefs(dtp, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp) {
		return begin_setTripDateTimePrefs(dtp, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx) {
		return begin_setTripDateTimePrefs(dtp, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTimePrefs(dtp, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTimePrefs(dtp, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTimePrefs(dtp, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& dtp,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripDateTimePrefs(dtp, &__ctx, __del, __cookie);
	}

	void end_setTripDateTimePrefs(const ::Ice::AsyncResultPtr&);

private:

	void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs() {
		return getTripReturnDateTimePrefs(0);
	}
	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx) {
		return getTripReturnDateTimePrefs(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDateTimePrefs(0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDateTimePrefs(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripReturnDateTimePrefs(&__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripReturnDateTimePrefs(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripReturnDateTimePrefs(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripRequestTypPrx __proxy =
						::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
				try {
					__ret = __proxy->end_getTripReturnDateTimePrefs(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&)> _response;
		};
		return begin_getTripReturnDateTimePrefs(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs() {
		return begin_getTripReturnDateTimePrefs(0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx) {
		return begin_getTripReturnDateTimePrefs(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTimePrefs(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTimePrefs(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripReturnDateTimePrefs(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::DateTimePrefsTypPtr end_getTripReturnDateTimePrefs(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripReturnDateTimePrefs(
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp) {
		setTripReturnDateTimePrefs(rdtp, 0);
	}
	void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx) {
		setTripReturnDateTimePrefs(rdtp, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDateTimePrefs(rdtp, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDateTimePrefs(rdtp, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripReturnDateTimePrefs(rdtp, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripReturnDateTimePrefs(rdtp, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp) {
		return begin_setTripReturnDateTimePrefs(rdtp, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx) {
		return begin_setTripReturnDateTimePrefs(rdtp, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTimePrefs(rdtp, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTimePrefs(rdtp, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTimePrefs(rdtp, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& rdtp,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripReturnDateTimePrefs(rdtp, &__ctx, __del, __cookie);
	}

	void end_setTripReturnDateTimePrefs(const ::Ice::AsyncResultPtr&);

private:

	void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::UserTypPrx getTripRequester() {
		return getTripRequester(0);
	}
	::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Context& __ctx) {
		return getTripRequester(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripRequester(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripRequester(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripRequester(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripRequester(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripRequester(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripRequester(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripRequester(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::TripRequestTypPrx __proxy =
						::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getTripRequester(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getTripRequester(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripRequester() {
		return begin_getTripRequester(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context& __ctx) {
		return begin_getTripRequester(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripRequester(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequester(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequester(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequester(
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripRequesterPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequester(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_getTripRequesterPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequester(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getTripRequester(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripRequester(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester) {
		setTripRequester(requester, 0);
	}
	void setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx) {
		setTripRequester(requester, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripRequester(requester, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripRequester(requester, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTripRequester(requester, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTripRequester(requester, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester) {
		return begin_setTripRequester(requester, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx) {
		return begin_setTripRequester(requester, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripRequester(requester, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripRequester(requester, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripRequesterPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripRequester(requester, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx& requester,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_TripRequestTyp_setTripRequesterPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTripRequester(requester, &__ctx, __del, __cookie);
	}

	void end_setTripRequester(const ::Ice::AsyncResultPtr&);

private:

	void setTripRequester(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTripRequester(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<TripRequestTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_secure(bool __secure) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_twoway() const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_oneway() const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_batchOneway() const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_datagram() const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_batchDatagram() const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_timeout(
			int __timeout) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<TripRequestTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<TripRequestTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserActivityTyp: virtual public ::IceProxy::Ice::Object {
public:

	::cardroid::data::zerocice::UserTypPrx getActivityUser() {
		return getActivityUser(0);
	}
	::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Context& __ctx) {
		return getActivityUser(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getActivityUser(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getActivityUser(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getActivityUser(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getActivityUser(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getActivityUser(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getActivityUser(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getActivityUser(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserActivityTypPrx __proxy =
						::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getActivityUser(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getActivityUser(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getActivityUser() {
		return begin_getActivityUser(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context& __ctx) {
		return begin_getActivityUser(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityUser(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityUser(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityUser(
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getActivityUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityUser(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getActivityUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityUser(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getActivityUser(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getActivityUser(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser) {
		setActivityUser(activityUser, 0);
	}
	void setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx) {
		setActivityUser(activityUser, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setActivityUser(activityUser, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setActivityUser(activityUser, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setActivityUser(activityUser, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setActivityUser(activityUser, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser) {
		return begin_setActivityUser(activityUser, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx) {
		return begin_setActivityUser(activityUser, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityUser(activityUser, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityUser(activityUser, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setActivityUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityUser(activityUser, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx& activityUser,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setActivityUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityUser(activityUser, &__ctx, __del, __cookie);
	}

	void end_setActivityUser(const ::Ice::AsyncResultPtr&);

private:

	void setActivityUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setActivityUser(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip() {
		return getActivityTrip(0);
	}
	::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Context& __ctx) {
		return getActivityTrip(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getActivityTrip(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getActivityTrip(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getActivityTrip(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getActivityTrip(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getActivityTrip(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getActivityTrip(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getActivityTrip(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripOfferTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserActivityTypPrx __proxy =
						::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripOfferTypPrx __ret;
				try {
					__ret = __proxy->end_getActivityTrip(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)> _response;
		};
		return begin_getActivityTrip(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getActivityTrip() {
		return begin_getActivityTrip(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context& __ctx) {
		return begin_getActivityTrip(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityTrip(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityTrip(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityTrip(
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getActivityTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityTrip(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getActivityTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getActivityTrip(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripOfferTypPrx end_getActivityTrip(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getActivityTrip(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip) {
		setActivityTrip(activityTrip, 0);
	}
	void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx) {
		setActivityTrip(activityTrip, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setActivityTrip(activityTrip, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setActivityTrip(activityTrip, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setActivityTrip(activityTrip, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setActivityTrip(activityTrip, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip) {
		return begin_setActivityTrip(activityTrip, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx) {
		return begin_setActivityTrip(activityTrip, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityTrip(activityTrip, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityTrip(activityTrip, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setActivityTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityTrip(activityTrip, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& activityTrip,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setActivityTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setActivityTrip(activityTrip, &__ctx, __del, __cookie);
	}

	void end_setActivityTrip(const ::Ice::AsyncResultPtr&);

private:

	void setActivityTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::ActivityType getUserActivityType() {
		return getUserActivityType(0);
	}
	::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Context& __ctx) {
		return getUserActivityType(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserActivityType(
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::ActivityType)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserActivityType(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserActivityType(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserActivityType(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserActivityType(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::ActivityType)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserActivityType(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserActivityType(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserActivityType(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserActivityType(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(::cardroid::data::zerocice::ActivityType)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(::cardroid::data::zerocice::ActivityType)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserActivityTypPrx __proxy =
						::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::ActivityType __ret;
				try {
					__ret = __proxy->end_getUserActivityType(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::cardroid::data::zerocice::ActivityType)> _response;
		};
		return begin_getUserActivityType(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserActivityType() {
		return begin_getUserActivityType(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserActivityType(
			const ::Ice::Context& __ctx) {
		return begin_getUserActivityType(&__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getUserActivityType(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivityType(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivityType(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivityType(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivityType(
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getUserActivityTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivityType(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivityType(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getUserActivityTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivityType(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::ActivityType end_getUserActivityType(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserActivityType(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType) {
		setUserActivityType(userActivityType, 0);
	}
	void setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx) {
		setUserActivityType(userActivityType, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserActivityType(userActivityType, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserActivityType(userActivityType, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUserActivityType(userActivityType, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUserActivityType(userActivityType, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType) {
		return begin_setUserActivityType(userActivityType, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx) {
		return begin_setUserActivityType(userActivityType, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserActivityType(userActivityType, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserActivityType(userActivityType, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setUserActivityTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserActivityType(userActivityType, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType userActivityType,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setUserActivityTypePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUserActivityType(userActivityType, &__ctx, __del,
				__cookie);
	}

	void end_setUserActivityType(const ::Ice::AsyncResultPtr&);

private:

	void setUserActivityType(::cardroid::data::zerocice::ActivityType,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setUserActivityType(
			::cardroid::data::zerocice::ActivityType, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Long getTimeStampInMillis() {
		return getTimeStampInMillis(0);
	}
	::Ice::Long getTimeStampInMillis(const ::Ice::Context& __ctx) {
		return getTimeStampInMillis(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeStampInMillis(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeStampInMillis(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeStampInMillis(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeStampInMillis(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTimeStampInMillis(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Long)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserActivityTypPrx __proxy =
						::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Long __ret;
				try {
					__ret = __proxy->end_getTimeStampInMillis(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Long)> _response;
		};
		return begin_getTimeStampInMillis(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTimeStampInMillis() {
		return begin_getTimeStampInMillis(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx) {
		return begin_getTimeStampInMillis(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_getTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(&__ctx, __del, __cookie);
	}

	::Ice::Long end_getTimeStampInMillis(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Long getTimeStampInMillis(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTimeStampInMillis(::Ice::Long timeStampMillis) {
		setTimeStampInMillis(timeStampMillis, 0);
	}
	void setTimeStampInMillis(::Ice::Long timeStampMillis,
			const ::Ice::Context& __ctx) {
		setTimeStampInMillis(timeStampMillis, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_setTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx, __del,
				__cookie);
	}

	void end_setTimeStampInMillis(const ::Ice::AsyncResultPtr&);

private:

	void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(::Ice::Long,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::UserActivityTypPrx __proxy =
						::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_UserActivityTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<UserActivityTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_secure(
			bool __secure) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_twoway() const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_oneway() const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_batchOneway() const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_datagram() const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_batchDatagram() const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_compress(
			bool __compress) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_timeout(
			int __timeout) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<UserActivityTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<UserActivityTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MessageTyp: virtual public ::IceProxy::Ice::Object {
public:

	::cardroid::data::zerocice::UserTypPrx getUser1() {
		return getUser1(0);
	}
	::cardroid::data::zerocice::UserTypPrx getUser1(
			const ::Ice::Context& __ctx) {
		return getUser1(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUser1(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUser1(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUser1(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUser1(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUser1(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUser1(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUser1(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::MessageTypPrx __proxy =
						::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getUser1(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getUser1(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUser1() {
		return begin_getUser1(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context& __ctx) {
		return begin_getUser1(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser1(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser1(
			const ::cardroid::data::zerocice::Callback_MessageTyp_getUser1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser1(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_getUser1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser1(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getUser1(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getUser1(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUser1(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setUser1(const ::cardroid::data::zerocice::UserTypPrx& user1) {
		setUser1(user1, 0);
	}
	void setUser1(const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx) {
		setUser1(user1, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUser1(user1, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUser1(user1, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUser1(user1, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUser1(user1, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1) {
		return begin_setUser1(user1, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx) {
		return begin_setUser1(user1, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser1(user1, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser1(user1, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setUser1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser1(user1, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx& user1,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setUser1Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser1(user1, &__ctx, __del, __cookie);
	}

	void end_setUser1(const ::Ice::AsyncResultPtr&);

private:

	void setUser1(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setUser1(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::UserTypPrx getUser2() {
		return getUser2(0);
	}
	::cardroid::data::zerocice::UserTypPrx getUser2(
			const ::Ice::Context& __ctx) {
		return getUser2(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUser2(
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUser2(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUser2(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUser2(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUser2(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUser2(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUser2(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::MessageTypPrx __proxy =
						::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getUser2(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getUser2(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUser2() {
		return begin_getUser2(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context& __ctx) {
		return begin_getUser2(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser2(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser2(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser2(
			const ::cardroid::data::zerocice::Callback_MessageTyp_getUser2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser2(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_getUser2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUser2(&__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getUser2(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getUser2(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUser2(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setUser2(const ::cardroid::data::zerocice::UserTypPrx& user2) {
		setUser2(user2, 0);
	}
	void setUser2(const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx) {
		setUser2(user2, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUser2(user2, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUser2(user2, 0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setUser2(user2, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setUser2(user2, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2) {
		return begin_setUser2(user2, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx) {
		return begin_setUser2(user2, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser2(user2, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser2(user2, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setUser2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser2(user2, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx& user2,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setUser2Ptr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setUser2(user2, &__ctx, __del, __cookie);
	}

	void end_setUser2(const ::Ice::AsyncResultPtr&);

private:

	void setUser2(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setUser2(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string getMessageText() {
		return getMessageText(0);
	}
	::std::string getMessageText(const ::Ice::Context& __ctx) {
		return getMessageText(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getMessageText(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageText(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageText(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageText(0, ::Ice::newCallback(__completed, __sent),
				0);
	}
	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageText(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageText(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getMessageText(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::MessageTypPrx __proxy =
						::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_getMessageText(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_getMessageText(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getMessageText() {
		return begin_getMessageText(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context& __ctx) {
		return begin_getMessageText(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageText(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageText(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageText(
			const ::cardroid::data::zerocice::Callback_MessageTyp_getMessageTextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageText(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_getMessageTextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageText(&__ctx, __del, __cookie);
	}

	::std::string end_getMessageText(const ::Ice::AsyncResultPtr&);

private:

	::std::string getMessageText(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getMessageText(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setMessageText(const ::std::string& msg) {
		setMessageText(msg, 0);
	}
	void setMessageText(const ::std::string& msg, const ::Ice::Context& __ctx) {
		setMessageText(msg, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setMessageText(msg, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setMessageText(msg, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setMessageText(msg, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setMessageText(msg, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg) {
		return begin_setMessageText(msg, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::Context& __ctx) {
		return begin_setMessageText(msg, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setMessageText(msg, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setMessageText(msg, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setMessageTextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setMessageText(msg, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string& msg,
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setMessageTextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setMessageText(msg, &__ctx, __del, __cookie);
	}

	void end_setMessageText(const ::Ice::AsyncResultPtr&);

private:

	void setMessageText(const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setMessageText(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Long getTimeStampInMillis() {
		return getTimeStampInMillis(0);
	}
	::Ice::Long getTimeStampInMillis(const ::Ice::Context& __ctx) {
		return getTimeStampInMillis(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeStampInMillis(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeStampInMillis(0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTimeStampInMillis(&__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTimeStampInMillis(&__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTimeStampInMillis(
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Long)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Long)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::MessageTypPrx __proxy =
						::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Long __ret;
				try {
					__ret = __proxy->end_getTimeStampInMillis(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Long)> _response;
		};
		return begin_getTimeStampInMillis(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTimeStampInMillis() {
		return begin_getTimeStampInMillis(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx) {
		return begin_getTimeStampInMillis(&__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::cardroid::data::zerocice::Callback_MessageTyp_getTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTimeStampInMillis(
			const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_getTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTimeStampInMillis(&__ctx, __del, __cookie);
	}

	::Ice::Long end_getTimeStampInMillis(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Long getTimeStampInMillis(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTimeStampInMillis(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void setTimeStampInMillis(::Ice::Long timeStampMillis) {
		setTimeStampInMillis(timeStampMillis, 0);
	}
	void setTimeStampInMillis(::Ice::Long timeStampMillis,
			const ::Ice::Context& __ctx) {
		setTimeStampInMillis(timeStampMillis, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis) {
		return begin_setTimeStampInMillis(timeStampMillis, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_setTimeStampInMillis(
			::Ice::Long timeStampMillis, const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_setTimeStampInMillisPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_setTimeStampInMillis(timeStampMillis, &__ctx, __del,
				__cookie);
	}

	void end_setTimeStampInMillis(const ::Ice::AsyncResultPtr&);

private:

	void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_setTimeStampInMillis(::Ice::Long,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::std::string toString() {
		return toString(0);
	}
	::std::string toString(const ::Ice::Context& __ctx) {
		return toString(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_toString(&__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_toString(&__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_toString(const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(const ::std::string&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<void(const ::std::string&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::data::zerocice::MessageTypPrx __proxy =
						::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
								__result->getProxy());
				::std::string __ret;
				try {
					__ret = __proxy->end_toString(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::std::string&)> _response;
		};
		return begin_toString(__ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_toString() {
		return begin_toString(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx) {
		return begin_toString(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(
			const ::cardroid::data::zerocice::Callback_MessageTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context& __ctx,
			const ::cardroid::data::zerocice::Callback_MessageTyp_toStringPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_toString(&__ctx, __del, __cookie);
	}

	::std::string end_toString(const ::Ice::AsyncResultPtr&);

private:

	::std::string toString(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_toString(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<MessageTyp> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_secure(bool __secure) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_twoway() const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_oneway() const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_batchOneway() const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_datagram() const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_batchDatagram() const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_compress(bool __compress) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_timeout(int __timeout) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<MessageTyp> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<MessageTyp*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

class QueryResult: virtual public ::IceProxy::Ice::Object {
public:

	::cardroid::ResultSeq next(::Ice::Int n, bool& destroyed) {
		return next(n, destroyed, 0);
	}
	::cardroid::ResultSeq next(::Ice::Int n, bool& destroyed,
			const ::Ice::Context& __ctx) {
		return next(n, destroyed, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_next(::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_next(n, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_next(::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_next(n, 0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_next(::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_next(n, &__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_next(::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_next(n, &__ctx, ::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_next(::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::QueryResultPrx __proxy =
						::cardroid::QueryResultPrx::uncheckedCast(
								__result->getProxy());
				bool destroyed;
				::cardroid::ResultSeq __ret;
				try {
					__ret = __proxy->end_next(destroyed, __result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret, destroyed);
				}
			}

		private:

			::std::function<void(const ::cardroid::ResultSeq&, bool)> _response;
		};
		return begin_next(n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_next(::Ice::Int n) {
		return begin_next(n, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_next(::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_next(n, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_next(::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_next(n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_next(::Ice::Int n, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_next(n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_next(::Ice::Int n,
			const ::cardroid::Callback_QueryResult_nextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_next(n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_next(::Ice::Int n, const ::Ice::Context& __ctx,
			const ::cardroid::Callback_QueryResult_nextPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_next(n, &__ctx, __del, __cookie);
	}

	::cardroid::ResultSeq end_next(bool& destroyed,
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::ResultSeq next(::Ice::Int, bool&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_next(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void destroy() {
		destroy(0);
	}
	void destroy(const ::Ice::Context& __ctx) {
		destroy(&__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_destroy(
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_destroy(0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_destroy(
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_destroy(&__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_destroy() {
		return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx) {
		return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_destroy(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_destroy(&__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_destroy(
			const ::cardroid::Callback_QueryResult_destroyPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_destroy(0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx,
			const ::cardroid::Callback_QueryResult_destroyPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_destroy(&__ctx, __del, __cookie);
	}

	void end_destroy(const ::Ice::AsyncResultPtr&);

private:

	void destroy(const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<QueryResult> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_secure(bool __secure) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_twoway() const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_oneway() const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_batchOneway() const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_datagram() const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_batchDatagram() const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_compress(
			bool __compress) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_timeout(int __timeout) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<QueryResult> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<QueryResult*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

namespace zerocice {

class CardroidManager: virtual public ::IceProxy::Ice::Object {
public:

	void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getUserPlaces(usr, n, first, nrows, result, 0);
	}
	void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getUserPlaces(usr, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserPlaces(usr, n, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserPlaces(usr, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserPlaces(usr, n, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserPlaces(usr, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getUserPlaces(first, nrows, result, __result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getUserPlaces(usr, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n) {
		return begin_getUserPlaces(usr, n, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_getUserPlaces(usr, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserPlaces(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserPlaces(usr, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserPlacesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserPlaces(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserPlacesPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserPlaces(usr, n, &__ctx, __del, __cookie);
	}

	void end_getUserPlaces(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserPlaces(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		searchTrips(tRequest, n, first, nrows, result, 0);
	}
	void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		searchTrips(tRequest, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_searchTrips(tRequest, n, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_searchTrips(tRequest, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_searchTrips(tRequest, n, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_searchTrips(tRequest, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_searchTrips(first, nrows, result, __result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_searchTrips(tRequest, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n) {
		return begin_searchTrips(tRequest, n, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context& __ctx) {
		return begin_searchTrips(tRequest, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_searchTrips(tRequest, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_searchTrips(tRequest, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_searchTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_searchTrips(tRequest, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_searchTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_searchTrips(tRequest, n, &__ctx, __del, __cookie);
	}

	void end_searchTrips(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void searchTrips(const ::cardroid::data::zerocice::TripRequestTypPtr&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int tripId) {
		return getTripFromId(tripId, 0);
	}
	::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx) {
		return getTripFromId(tripId, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripFromId(tripId, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripFromId(tripId, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripFromId(tripId, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripFromId(tripId, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::TripTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripTypPrx __ret;
				try {
					__ret = __proxy->end_getTripFromId(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::TripTypPrx&)> _response;
		};
		return begin_getTripFromId(tripId, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId) {
		return begin_getTripFromId(tripId, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx) {
		return begin_getTripFromId(tripId, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripFromId(tripId, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripFromId(tripId, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripTypPrx end_getTripFromId(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripFromId(::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int tripId) {
		return getTripOfferFromId(tripId, 0);
	}
	::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int tripId, const ::Ice::Context& __ctx) {
		return getTripOfferFromId(tripId, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripOfferFromId(tripId, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripOfferFromId(tripId, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripOfferFromId(tripId, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripOfferFromId(tripId, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripOfferTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripOfferTypPrx __ret;
				try {
					__ret = __proxy->end_getTripOfferFromId(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)> _response;
		};
		return begin_getTripOfferFromId(tripId, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId) {
		return begin_getTripOfferFromId(tripId, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx) {
		return begin_getTripOfferFromId(tripId, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripOfferFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripOfferFromId(tripId, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripOfferFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripOfferFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripOfferFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripOfferFromId(tripId, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripOfferTypPrx end_getTripOfferFromId(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(::Ice::Int,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripOfferFromId(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int tripId) {
		return getTripRequestFromId(tripId, 0);
	}
	::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int tripId, const ::Ice::Context& __ctx) {
		return getTripRequestFromId(tripId, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripRequestFromId(tripId, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripRequestFromId(tripId, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getTripRequestFromId(tripId, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getTripRequestFromId(tripId, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripRequestTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripRequestTypPrx __ret;
				try {
					__ret = __proxy->end_getTripRequestFromId(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)> _response;
		};
		return begin_getTripRequestFromId(tripId, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId) {
		return begin_getTripRequestFromId(tripId, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx) {
		return begin_getTripRequestFromId(tripId, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequestFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequestFromId(tripId, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripRequestFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequestFromId(tripId, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int tripId,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getTripRequestFromIdPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getTripRequestFromId(tripId, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripRequestTypPrx end_getTripRequestFromId(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getTripRequestFromId(::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats) {
		joinTrip(trip, passenger, nSeats, 0);
	}
	void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx) {
		joinTrip(trip, passenger, nSeats, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_joinTrip(trip, passenger, nSeats, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_joinTrip(trip, passenger, nSeats, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_joinTrip(trip, passenger, nSeats, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_joinTrip(trip, passenger, nSeats, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats) {
		return begin_joinTrip(trip, passenger, nSeats, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx) {
		return begin_joinTrip(trip, passenger, nSeats, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_joinTrip(trip, passenger, nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_joinTrip(trip, passenger, nSeats, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats,
			const ::cardroid::zerocice::Callback_CardroidManager_joinTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_joinTrip(trip, passenger, nSeats, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_joinTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_joinTrip(trip, passenger, nSeats, &__ctx, __del, __cookie);
	}

	void end_joinTrip(const ::Ice::AsyncResultPtr&);

private:

	void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_joinTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer) {
		return organizeTrip(tripRequest, tripOffer, 0);
	}
	::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx) {
		return organizeTrip(tripRequest, tripOffer, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_organizeTrip(tripRequest, tripOffer, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_organizeTrip(tripRequest, tripOffer, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_organizeTrip(tripRequest, tripOffer, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_organizeTrip(tripRequest, tripOffer, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripOfferTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripOfferTypPrx __ret;
				try {
					__ret = __proxy->end_organizeTrip(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)> _response;
		};
		return begin_organizeTrip(tripRequest, tripOffer, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer) {
		return begin_organizeTrip(tripRequest, tripOffer, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx) {
		return begin_organizeTrip(tripRequest, tripOffer, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_organizeTrip(tripRequest, tripOffer, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_organizeTrip(tripRequest, tripOffer, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::cardroid::zerocice::Callback_CardroidManager_organizeTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_organizeTrip(tripRequest, tripOffer, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_organizeTripPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_organizeTrip(tripRequest, tripOffer, &__ctx, __del,
				__cookie);
	}

	::cardroid::data::zerocice::TripOfferTypPrx end_organizeTrip(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getUserTrips(usr, n, first, nrows, result, 0);
	}
	void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getUserTrips(usr, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserTrips(usr, n, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserTrips(usr, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserTrips(usr, n, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserTrips(usr, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getUserTrips(first, nrows, result, __result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getUserTrips(usr, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n) {
		return begin_getUserTrips(usr, n, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_getUserTrips(usr, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserTrips(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserTrips(usr, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserTrips(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserTrips(usr, n, &__ctx, __del, __cookie);
	}

	void end_getUserTrips(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getPassengerTrips(passenger, n, first, nrows, result, 0);
	}
	void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getPassengerTrips(passenger, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPassengerTrips(passenger, n, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPassengerTrips(passenger, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getPassengerTrips(passenger, n, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getPassengerTrips(passenger, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getPassengerTrips(first, nrows, result,
							__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getPassengerTrips(passenger, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n) {
		return begin_getPassengerTrips(passenger, n, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context& __ctx) {
		return begin_getPassengerTrips(passenger, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerTrips(passenger, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerTrips(passenger, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getPassengerTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerTrips(passenger, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int n, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getPassengerTripsPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getPassengerTrips(passenger, n, &__ctx, __del, __cookie);
	}

	void end_getPassengerTrips(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void getPassengerTrips(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	bool userTripRegistered(const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip) {
		return userTripRegistered(usr, trip, 0);
	}
	bool userTripRegistered(const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx) {
		return userTripRegistered(usr, trip, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_userTripRegistered(usr, trip, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_userTripRegistered(usr, trip, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_userTripRegistered(usr, trip, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_userTripRegistered(usr, trip, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_userTripRegistered(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_userTripRegistered(usr, trip, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip) {
		return begin_userTripRegistered(usr, trip, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx) {
		return begin_userTripRegistered(usr, trip, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_userTripRegistered(usr, trip, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_userTripRegistered(usr, trip, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::cardroid::zerocice::Callback_CardroidManager_userTripRegisteredPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_userTripRegistered(usr, trip, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_userTripRegisteredPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_userTripRegistered(usr, trip, &__ctx, __del, __cookie);
	}

	bool end_userTripRegistered(const ::Ice::AsyncResultPtr&);

private:

	bool userTripRegistered(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::Ice::Double calculatePriceEstimation(::cardroid::data::zerocice::Fuel f,
			::Ice::Int distance) {
		return calculatePriceEstimation(f, distance, 0);
	}
	::Ice::Double calculatePriceEstimation(::cardroid::data::zerocice::Fuel f,
			::Ice::Int distance, const ::Ice::Context& __ctx) {
		return calculatePriceEstimation(f, distance, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_calculatePriceEstimation(f, distance, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_calculatePriceEstimation(f, distance, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_calculatePriceEstimation(f, distance, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_calculatePriceEstimation(f, distance, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(::Ice::Double)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(::Ice::Double)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::Ice::Double __ret;
				try {
					__ret = __proxy->end_calculatePriceEstimation(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(::Ice::Double)> _response;
		};
		return begin_calculatePriceEstimation(f, distance, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance) {
		return begin_calculatePriceEstimation(f, distance, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context& __ctx) {
		return begin_calculatePriceEstimation(f, distance, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_calculatePriceEstimation(f, distance, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_calculatePriceEstimation(f, distance, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::cardroid::zerocice::Callback_CardroidManager_calculatePriceEstimationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_calculatePriceEstimation(f, distance, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel f, ::Ice::Int distance,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_calculatePriceEstimationPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_calculatePriceEstimation(f, distance, &__ctx, __del,
				__cookie);
	}

	::Ice::Double end_calculatePriceEstimation(const ::Ice::AsyncResultPtr&);

private:

	::Ice::Double calculatePriceEstimation(::cardroid::data::zerocice::Fuel,
			::Ice::Int, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel, ::Ice::Int, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer) {
		return newTripOffer(tOffer, 0);
	}
	::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx) {
		return newTripOffer(tOffer, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newTripOffer(tOffer, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newTripOffer(tOffer, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newTripOffer(tOffer, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newTripOffer(tOffer, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripOfferTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripOfferTypPrx __ret;
				try {
					__ret = __proxy->end_newTripOffer(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripOfferTypPrx&)> _response;
		};
		return begin_newTripOffer(tOffer, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer) {
		return begin_newTripOffer(tOffer, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx) {
		return begin_newTripOffer(tOffer, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripOffer(tOffer, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripOffer(tOffer, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::cardroid::zerocice::Callback_CardroidManager_newTripOfferPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripOffer(tOffer, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_newTripOfferPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripOffer(tOffer, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripOfferTypPrx end_newTripOffer(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest) {
		return newTripRequest(tRequest, 0);
	}
	::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx) {
		return newTripRequest(tRequest, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newTripRequest(tRequest, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newTripRequest(tRequest, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newTripRequest(tRequest, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newTripRequest(tRequest, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::TripRequestTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::TripRequestTypPrx __ret;
				try {
					__ret = __proxy->end_newTripRequest(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::TripRequestTypPrx&)> _response;
		};
		return begin_newTripRequest(tRequest, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest) {
		return begin_newTripRequest(tRequest, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx) {
		return begin_newTripRequest(tRequest, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripRequest(tRequest, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripRequest(tRequest, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::cardroid::zerocice::Callback_CardroidManager_newTripRequestPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripRequest(tRequest, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_newTripRequestPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newTripRequest(tRequest, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::TripRequestTypPrx end_newTripRequest(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getMessageTalksSpeakers(usr, n, first, nrows, result, 0);
	}
	void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getMessageTalksSpeakers(usr, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageTalksSpeakers(usr, n, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageTalksSpeakers(usr, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageTalksSpeakers(usr, n, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageTalksSpeakers(usr, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getMessageTalksSpeakers(first, nrows, result,
							__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getMessageTalksSpeakers(usr, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n) {
		return begin_getMessageTalksSpeakers(usr, n, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_getMessageTalksSpeakers(usr, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalksSpeakers(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalksSpeakers(usr, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getMessageTalksSpeakersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalksSpeakers(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getMessageTalksSpeakersPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalksSpeakers(usr, n, &__ctx, __del, __cookie);
	}

	void end_getMessageTalksSpeakers(::cardroid::ResultSeq& first,
			::Ice::Int& nrows, ::cardroid::QueryResultPrx& result,
			const ::Ice::AsyncResultPtr&);

private:

	void getMessageTalksSpeakers(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getMessageTalks(usr1, usr2, n, first, nrows, result, 0);
	}
	void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getMessageTalks(usr1, usr2, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageTalks(usr1, usr2, n, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageTalks(usr1, usr2, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getMessageTalks(usr1, usr2, n, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getMessageTalks(usr1, usr2, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getMessageTalks(first, nrows, result,
							__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getMessageTalks(usr1, usr2, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n) {
		return begin_getMessageTalks(usr1, usr2, n, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_getMessageTalks(usr1, usr2, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalks(usr1, usr2, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalks(usr1, usr2, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getMessageTalksPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalks(usr1, usr2, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getMessageTalksPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getMessageTalks(usr1, usr2, n, &__ctx, __del, __cookie);
	}

	void end_getMessageTalks(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getMessageTalks(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message) {
		return newMessage(usr1, usr2, message, 0);
	}
	::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx) {
		return newMessage(usr1, usr2, message, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::MessageTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newMessage(usr1, usr2, message, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newMessage(usr1, usr2, message, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::MessageTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_newMessage(usr1, usr2, message, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_newMessage(usr1, usr2, message, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::MessageTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(
									const ::cardroid::data::zerocice::MessageTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::MessageTypPrx __ret;
				try {
					__ret = __proxy->end_newMessage(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::data::zerocice::MessageTypPrx&)> _response;
		};
		return begin_newMessage(usr1, usr2, message, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message) {
		return begin_newMessage(usr1, usr2, message, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx) {
		return begin_newMessage(usr1, usr2, message, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newMessage(usr1, usr2, message, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newMessage(usr1, usr2, message, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message,
			const ::cardroid::zerocice::Callback_CardroidManager_newMessagePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newMessage(usr1, usr2, message, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_newMessagePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_newMessage(usr1, usr2, message, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::MessageTypPrx end_newMessage(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result) {
		getUserActivity(usr, n, first, nrows, result, 0);
	}
	void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Context& __ctx) {
		getUserActivity(usr, n, first, nrows, result, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserActivity(usr, n, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserActivity(usr, n, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserActivity(usr, n, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserActivity(usr, n, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::ResultSeq&, ::Ice::Int,
									const ::cardroid::QueryResultPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::ResultSeq first;
				::Ice::Int nrows;
				::cardroid::QueryResultPrx result;
				try {
					__proxy->end_getUserActivity(first, nrows, result,
							__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(first, nrows, result);
				}
			}

		private:

			::std::function<
					void(const ::cardroid::ResultSeq&, ::Ice::Int,
							const ::cardroid::QueryResultPrx&)> _response;
		};
		return begin_getUserActivity(usr, n, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n) {
		return begin_getUserActivity(usr, n, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx) {
		return begin_getUserActivity(usr, n, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivity(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivity(usr, n, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserActivityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivity(usr, n, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserActivityPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserActivity(usr, n, &__ctx, __del, __cookie);
	}

	void end_getUserActivity(::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::AsyncResultPtr&);

private:

	void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserActivity(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string& email) {
		return getUserFromEmail(email, 0);
	}
	::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string& email, const ::Ice::Context& __ctx) {
		return getUserFromEmail(email, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserFromEmail(email, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserFromEmail(email, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getUserFromEmail(email, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getUserFromEmail(email, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_getUserFromEmail(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_getUserFromEmail(email, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email) {
		return begin_getUserFromEmail(email, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context& __ctx) {
		return begin_getUserFromEmail(email, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserFromEmail(email, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserFromEmail(email, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserFromEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserFromEmail(email, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string& email,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getUserFromEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getUserFromEmail(email, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_getUserFromEmail(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getUserFromEmail(const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner) {
		return getCarFromPlate(plate, owner, 0);
	}
	::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx) {
		return getCarFromPlate(plate, owner, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFromPlate(plate, owner, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFromPlate(plate, owner, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFromPlate(plate, owner, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFromPlate(plate, owner, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_getCarFromPlate(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_getCarFromPlate(plate, owner, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner) {
		return begin_getCarFromPlate(plate, owner, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx) {
		return begin_getCarFromPlate(plate, owner, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlate(plate, owner, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlate(plate, owner, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::cardroid::zerocice::Callback_CardroidManager_getCarFromPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlate(plate, owner, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getCarFromPlatePtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlate(plate, owner, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_getCarFromPlate(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx getCarFromPlate(const ::std::string&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getCarFromPlate(const ::std::string&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string& plate, const ::std::string& ownerEmail) {
		return getCarFromPlateEmail(plate, ownerEmail, 0);
	}
	::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string& plate, const ::std::string& ownerEmail,
			const ::Ice::Context& __ctx) {
		return getCarFromPlateEmail(plate, ownerEmail, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFromPlateEmail(plate, ownerEmail, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_getCarFromPlateEmail(plate, ownerEmail, &__ctx,
				__response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_getCarFromPlateEmail(
			const ::std::string& plate, const ::std::string& ownerEmail,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_getCarFromPlateEmail(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_getCarFromPlateEmail(plate, ownerEmail, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::cardroid::zerocice::Callback_CardroidManager_getCarFromPlateEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_getCarFromPlateEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_getCarFromPlateEmail(plate, ownerEmail, &__ctx, __del,
				__cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_getCarFromPlateEmail(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string&, const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_getCarFromPlateEmail(const ::std::string&,
			const ::std::string&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr) {
		return updateUserData(usr, 0);
	}
	::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx) {
		return updateUserData(usr, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateUserData(usr, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateUserData(usr, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateUserData(usr, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateUserData(usr, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::UserTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::UserTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::UserTypPrx __ret;
				try {
					__ret = __proxy->end_updateUserData(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::UserTypPrx&)> _response;
		};
		return begin_updateUserData(usr, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr) {
		return begin_updateUserData(usr, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx) {
		return begin_updateUserData(usr, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateUserData(usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateUserData(usr, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::cardroid::zerocice::Callback_CardroidManager_updateUserDataPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateUserData(usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_updateUserDataPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateUserData(usr, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::UserTypPrx end_updateUserData(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr) {
		return updateCarData(car, usr, 0);
	}
	::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx) {
		return updateCarData(car, usr, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateCarData(car, usr, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateCarData(car, usr, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateCarData(car, usr, &__ctx, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateCarData(car, usr, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_updateCarData(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_updateCarData(car, usr, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr) {
		return begin_updateCarData(car, usr, 0, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx) {
		return begin_updateCarData(car, usr, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarData(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarData(car, usr, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::cardroid::zerocice::Callback_CardroidManager_updateCarDataPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarData(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_updateCarDataPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarData(car, usr, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_updateCarData(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail) {
		return updateCarDataEmail(car, usrEmail, 0);
	}
	::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx) {
		return updateCarDataEmail(car, usrEmail, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateCarDataEmail(car, usrEmail, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateCarDataEmail(car, usrEmail, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_updateCarDataEmail(car, usrEmail, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_updateCarDataEmail(car, usrEmail, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_updateCarDataEmail(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_updateCarDataEmail(car, usrEmail, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail) {
		return begin_updateCarDataEmail(car, usrEmail, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx) {
		return begin_updateCarDataEmail(car, usrEmail, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarDataEmail(car, usrEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarDataEmail(car, usrEmail, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::cardroid::zerocice::Callback_CardroidManager_updateCarDataEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarDataEmail(car, usrEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_updateCarDataEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_updateCarDataEmail(car, usrEmail, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_updateCarDataEmail(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr) {
		return addCar(car, usr, 0);
	}
	::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx) {
		return addCar(car, usr, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCar(car, usr, 0, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCar(car, usr, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCar(car, usr, &__ctx, __response, __exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCar(car, usr, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_addCar(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_addCar(car, usr, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr) {
		return begin_addCar(car, usr, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx) {
		return begin_addCar(car, usr, &__ctx, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(car, usr, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::zerocice::Callback_CardroidManager_addCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_addCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCar(car, usr, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_addCar(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail) {
		return addCarEmail(car, usrEmail, 0);
	}
	::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx) {
		return addCarEmail(car, usrEmail, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCarEmail(car, usrEmail, 0, __response, __exception,
				__sent);
	}
	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCarEmail(car, usrEmail, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_addCarEmail(car, usrEmail, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_addCarEmail(car, usrEmail, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<
					void(const ::cardroid::data::zerocice::CarTypPrx&)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(
					const ::std::function<
							void(const ::cardroid::data::zerocice::CarTypPrx&)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::zerocice::CardroidManagerPrx __proxy =
						::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
								__result->getProxy());
				::cardroid::data::zerocice::CarTypPrx __ret;
				try {
					__ret = __proxy->end_addCarEmail(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(const ::cardroid::data::zerocice::CarTypPrx&)> _response;
		};
		return begin_addCarEmail(car, usrEmail, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail) {
		return begin_addCarEmail(car, usrEmail, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx) {
		return begin_addCarEmail(car, usrEmail, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCarEmail(car, usrEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCarEmail(car, usrEmail, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail,
			const ::cardroid::zerocice::Callback_CardroidManager_addCarEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCarEmail(car, usrEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_addCarEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_addCarEmail(car, usrEmail, &__ctx, __del, __cookie);
	}

	::cardroid::data::zerocice::CarTypPrx end_addCarEmail(
			const ::Ice::AsyncResultPtr&);

private:

	::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void removeCar(const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr) {
		removeCar(car, usr, 0);
	}
	void removeCar(const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx) {
		removeCar(car, usr, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_removeCar(car, usr, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCar(car, usr, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_removeCar(car, usr, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCar(car, usr, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr) {
		return begin_removeCar(car, usr, 0, ::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx) {
		return begin_removeCar(car, usr, &__ctx, ::IceInternal::__dummyCallback,
				0);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(car, usr, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::zerocice::Callback_CardroidManager_removeCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(car, usr, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_removeCarPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCar(car, usr, &__ctx, __del, __cookie);
	}

	void end_removeCar(const ::Ice::AsyncResultPtr&);

private:

	void removeCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_removeCar(
			const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	void removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail) {
		removeCarPlateEmail(plate, ownerEmail, 0);
	}
	void removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx) {
		removeCarPlateEmail(plate, ownerEmail, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_removeCarPlateEmail(plate, ownerEmail, 0,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent));
	}
	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCarPlateEmail(plate, ownerEmail, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void()>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return begin_removeCarPlateEmail(plate, ownerEmail, &__ctx,
				new ::IceInternal::Cpp11FnOnewayCallbackNC(__response,
						__exception, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_removeCarPlateEmail(plate, ownerEmail, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}
#endif

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail) {
		return begin_removeCarPlateEmail(plate, ownerEmail, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx) {
		return begin_removeCarPlateEmail(plate, ownerEmail, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCarPlateEmail(plate, ownerEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCarPlateEmail(plate, ownerEmail, &__ctx, __del,
				__cookie);
	}

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail,
			const ::cardroid::zerocice::Callback_CardroidManager_removeCarPlateEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCarPlateEmail(plate, ownerEmail, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Context& __ctx,
			const ::cardroid::zerocice::Callback_CardroidManager_removeCarPlateEmailPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_removeCarPlateEmail(plate, ownerEmail, &__ctx, __del,
				__cookie);
	}

	void end_removeCarPlateEmail(const ::Ice::AsyncResultPtr&);

private:

	void removeCarPlateEmail(const ::std::string&, const ::std::string&,
			const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_removeCarPlateEmail(const ::std::string&,
			const ::std::string&, const ::Ice::Context*,
			const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<CardroidManager> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_secure(
			bool __secure) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_twoway() const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_oneway() const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_batchOneway() const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_datagram() const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_batchDatagram() const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_compress(
			bool __compress) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_timeout(
			int __timeout) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<CardroidManager> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<CardroidManager*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate {

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::LatLngTyp getCoords(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setCoords(const ::cardroid::data::zerocice::LatLngTyp&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setDescription(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool hasDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::Blob getSnapshotBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setSnapshotBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool hasSnapshot(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class CarTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::std::string getBrand(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setBrand(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getModel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setModel(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setCarFuel(::cardroid::data::zerocice::Fuel,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Double getConsumptionPerKm(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setConsumptionPerKm(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getColor(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setColor(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getPlate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setPlate(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class UserTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getSurname(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setSurname(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::Blob getAvatarBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setAvatarBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool hasAvatar(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::PlaceTypPtr getUserHome(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getTelephone(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTelephone(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getEmail(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setEmail(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool hasReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setUserCars(const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void increaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void increaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void decreaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void decreaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool addCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool removeCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void clearCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class DateTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::Ice::Long getTimeInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTimeInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class DateTimeTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTyp {
public:
};

class DateTimePrefsTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTyp {
public:

	virtual ::Ice::Int getToleranceDays(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setToleranceDays(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTimePrefs(::cardroid::data::zerocice::TimePreferences,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class TripTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::Ice::Int getTripId(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTripId(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::DateTypPtr getTripDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool hasTripReturnDate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool hasWeekDaysPeriodicity(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setDistance(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool hasDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setCharacteristics(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool hasCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTripType(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getTripType(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class WaypointTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::Ice::Int getNOrder(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setNOrder(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class PassengerTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setPassengerUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class TripOfferTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::UserTypPrx getTripDriver(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx getTripCar(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Double getPrice(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setPrice(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool addTripWaypoint(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool removeTripWaypoint(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void clearTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool addTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Int getNTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void clearTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class TripRequestTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setTripRequester(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class UserActivityTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setActivityUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setUserActivityType(::cardroid::data::zerocice::ActivityType,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

class MessageTyp: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getUser1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setUser1(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::UserTypPrx getUser2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void setUser2(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string getMessageText(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setMessageText(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

}

}

class QueryResult: virtual public ::IceDelegate::Ice::Object {
public:

	virtual ::cardroid::ResultSeq next(::Ice::Int, bool&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void destroy(const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

namespace zerocice {

class CardroidManager: virtual public ::IceDelegate::Ice::Object {
public:

	virtual void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual bool userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::Ice::Double calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel, ::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string&, const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string&, const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual ::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void removeCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

	virtual void removeCarPlateEmail(const ::std::string&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM {

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp: virtual public ::IceDelegate::cardroid::data::zerocice::PlaceTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::LatLngTyp getCoords(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setCoords(const ::cardroid::data::zerocice::LatLngTyp&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string getDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setDescription(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Blob getSnapshotBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setSnapshotBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasSnapshot(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class CarTyp: virtual public ::IceDelegate::cardroid::data::zerocice::CarTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::std::string getBrand(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setBrand(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getModel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setModel(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setCarFuel(::cardroid::data::zerocice::Fuel,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double getConsumptionPerKm(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setConsumptionPerKm(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getColor(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setColor(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getPlate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setPlate(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class UserTyp: virtual public ::IceDelegate::cardroid::data::zerocice::UserTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getSurname(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setSurname(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Blob getAvatarBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setAvatarBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasAvatar(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getUserHome(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getTelephone(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTelephone(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getEmail(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setEmail(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserCars(const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void increaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void increaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void decreaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void decreaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool addCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool removeCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class DateTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::Ice::Long getTimeInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class DateTimeTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTimeTyp,
		virtual public ::IceDelegateM::cardroid::data::zerocice::DateTyp {
public:
};

class DateTimePrefsTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTimePrefsTyp,
		virtual public ::IceDelegateM::cardroid::data::zerocice::DateTyp {
public:

	virtual ::Ice::Int getToleranceDays(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setToleranceDays(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTimePrefs(::cardroid::data::zerocice::TimePreferences,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TripTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::Ice::Int getTripId(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTripId(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasTripReturnDate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasWeekDaysPeriodicity(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setDistance(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setCharacteristics(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTripType(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getTripType(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class WaypointTyp: virtual public ::IceDelegate::cardroid::data::zerocice::WaypointTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::Ice::Int getNOrder(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNOrder(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class PassengerTyp: virtual public ::IceDelegate::cardroid::data::zerocice::PassengerTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPassengerUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class TripOfferTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripOfferTyp,
		virtual public ::IceDelegateM::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripDriver(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getTripCar(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double getPrice(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setPrice(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool addTripWaypoint(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool removeTripWaypoint(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool addTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class TripRequestTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripRequestTyp,
		virtual public ::IceDelegateM::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripRequester(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class UserActivityTyp: virtual public ::IceDelegate::cardroid::data::zerocice::UserActivityTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setActivityUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserActivityType(::cardroid::data::zerocice::ActivityType,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class MessageTyp: virtual public ::IceDelegate::cardroid::data::zerocice::MessageTyp,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getUser1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUser1(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUser2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUser2(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string getMessageText(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setMessageText(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

}

}

class QueryResult: virtual public ::IceDelegate::cardroid::QueryResult,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual ::cardroid::ResultSeq next(::Ice::Int, bool&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void destroy(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

namespace zerocice {

class CardroidManager: virtual public ::IceDelegate::cardroid::zerocice::CardroidManager,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel, ::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string&, const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string&, const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void removeCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void removeCarPlateEmail(const ::std::string&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD {

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp: virtual public ::IceDelegate::cardroid::data::zerocice::PlaceTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::LatLngTyp getCoords(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setCoords(const ::cardroid::data::zerocice::LatLngTyp&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string getDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setDescription(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasDescription(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Blob getSnapshotBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setSnapshotBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasSnapshot(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class CarTyp: virtual public ::IceDelegate::cardroid::data::zerocice::CarTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::std::string getBrand(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setBrand(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getModel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setModel(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setCarFuel(::cardroid::data::zerocice::Fuel,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double getConsumptionPerKm(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setConsumptionPerKm(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getColor(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setColor(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getPlate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setPlate(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class UserTyp: virtual public ::IceDelegate::cardroid::data::zerocice::UserTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::std::string getName(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setName(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getSurname(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setSurname(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Blob getAvatarBytes(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setAvatarBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasAvatar(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getUserHome(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getTelephone(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTelephone(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getEmail(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setEmail(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasReputation(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserCars(const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void increaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void increaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void decreaseReputation1(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void decreaseReputation(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool addCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool removeCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearCars(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class DateTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::Ice::Long getTimeInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class DateTimeTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTimeTyp,
		virtual public ::IceDelegateD::cardroid::data::zerocice::DateTyp {
public:
};

class DateTimePrefsTyp: virtual public ::IceDelegate::cardroid::data::zerocice::DateTimePrefsTyp,
		virtual public ::IceDelegateD::cardroid::data::zerocice::DateTyp {
public:

	virtual ::Ice::Int getToleranceDays(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setToleranceDays(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTimePrefs(::cardroid::data::zerocice::TimePreferences,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class TripTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::Ice::Int getTripId(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTripId(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool hasTripReturnDate(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasWeekDaysPeriodicity(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setDistance(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasDistance(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string getCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setCharacteristics(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool hasCharacteristics(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTripType(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getTripType(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class WaypointTyp: virtual public ::IceDelegate::cardroid::data::zerocice::WaypointTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::Ice::Int getNOrder(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNOrder(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class PassengerTyp: virtual public ::IceDelegate::cardroid::data::zerocice::PassengerTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setPassengerUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNSeats(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setNSeats(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class TripOfferTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripOfferTyp,
		virtual public ::IceDelegateD::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripDriver(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getTripCar(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double getPrice(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setPrice(::Ice::Double, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool addTripWaypoint(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool removeTripWaypoint(::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearTripWaypoints(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool addTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Int getNTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void clearTripPassengers(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class TripRequestTyp: virtual public ::IceDelegate::cardroid::data::zerocice::TripRequestTyp,
		virtual public ::IceDelegateD::cardroid::data::zerocice::TripTyp {
public:

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setTripRequester(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class UserActivityTyp: virtual public ::IceDelegate::cardroid::data::zerocice::UserActivityTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setActivityUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUserActivityType(::cardroid::data::zerocice::ActivityType,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

class MessageTyp: virtual public ::IceDelegate::cardroid::data::zerocice::MessageTyp,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::cardroid::data::zerocice::UserTypPrx getUser1(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUser1(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUser2(
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void setUser2(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::std::string getMessageText(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setMessageText(const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::std::string toString(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

}

}

class QueryResult: virtual public ::IceDelegate::cardroid::QueryResult,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual ::cardroid::ResultSeq next(::Ice::Int, bool&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void destroy(const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

namespace zerocice {

class CardroidManager: virtual public ::IceDelegate::cardroid::zerocice::CardroidManager,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual bool userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::Ice::Double calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel, ::Ice::Int, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string&, const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string&, const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void removeCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);

	virtual void removeCarPlateEmail(const ::std::string&, const ::std::string&,
			const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace cardroid {

namespace data {

namespace zerocice {

class PlaceTyp: virtual public ::Ice::Object {
public:

	typedef PlaceTypPrx ProxyType;
	typedef PlaceTypPtr PointerType;

	PlaceTyp() {
	}

	PlaceTyp(const ::std::string& __ice_name,
			const ::cardroid::data::zerocice::LatLngTyp& __ice_coords,
			const IceUtil::Optional< ::std::string>& __ice_placeDescription,
			const IceUtil::Optional< ::cardroid::data::zerocice::Blob>& __ice_placeSnapshotBytes) :
			name(__ice_name), coords(__ice_coords), placeDescription(
					__ice_placeDescription), placeSnapshotBytes(
					__ice_placeSnapshotBytes) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::std::string getName(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getName(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setName(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setName(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::LatLngTyp getCoords(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getCoords(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setCoords(const ::cardroid::data::zerocice::LatLngTyp&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setCoords(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getDescription(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getDescription(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setDescription(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setDescription(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasDescription(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasDescription(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::Blob getSnapshotBytes(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getSnapshotBytes(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setSnapshotBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setSnapshotBytes(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasSnapshot(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasSnapshot(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::std::string name;

	::cardroid::data::zerocice::LatLngTyp coords;

	IceUtil::Optional< ::std::string> placeDescription;

	IceUtil::Optional< ::cardroid::data::zerocice::Blob> placeSnapshotBytes;
};

inline bool operator==(const PlaceTyp& l, const PlaceTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PlaceTyp& l, const PlaceTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class CarTyp: virtual public ::Ice::Object {
public:

	typedef CarTypPrx ProxyType;
	typedef CarTypPtr PointerType;

	CarTyp() {
	}

	CarTyp(const ::std::string& __ice_brand, const ::std::string& __ice_model,
			::cardroid::data::zerocice::Fuel __ice_carFuel,
			::Ice::Double __ice_consumptionPerKm, ::Ice::Int __ice_nSeats,
			const ::std::string& __ice_color, const ::std::string& __ice_plate) :
			brand(__ice_brand), model(__ice_model), carFuel(__ice_carFuel), consumptionPerKm(
					__ice_consumptionPerKm), nSeats(__ice_nSeats), color(
					__ice_color), plate(__ice_plate) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::std::string getBrand(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getBrand(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setBrand(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setBrand(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getModel(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getModel(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setModel(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setModel(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::Fuel getCarFuel(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getCarFuel(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setCarFuel(::cardroid::data::zerocice::Fuel,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setCarFuel(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Double getConsumptionPerKm(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getConsumptionPerKm(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setConsumptionPerKm(::Ice::Double, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setConsumptionPerKm(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNSeats(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setNSeats(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getColor(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getColor(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setColor(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setColor(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getPlate(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getPlate(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setPlate(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setPlate(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::std::string brand;

	::std::string model;

	::cardroid::data::zerocice::Fuel carFuel;

	::Ice::Double consumptionPerKm;

	::Ice::Int nSeats;

	::std::string color;

	::std::string plate;
};

inline bool operator==(const CarTyp& l, const CarTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CarTyp& l, const CarTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class UserTyp: virtual public ::Ice::Object, public IceInternal::GCShared {
public:

	typedef UserTypPrx ProxyType;
	typedef UserTypPtr PointerType;

	UserTyp() {
	}

	UserTyp(const ::std::string& __ice_name, const ::std::string& __ice_surname,
			const IceUtil::Optional< ::cardroid::data::zerocice::Blob>& __ice_userAvatarBytes,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_home,
			::Ice::Int __ice_telephone, const ::std::string& __ice_email,
			const IceUtil::Optional< ::Ice::Int>& __ice_userReputation,
			const ::cardroid::data::zerocice::CarCollection& __ice_cars) :
			name(__ice_name), surname(__ice_surname), userAvatarBytes(
					__ice_userAvatarBytes), home(__ice_home), telephone(
					__ice_telephone), email(__ice_email), userReputation(
					__ice_userReputation), cars(__ice_cars) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void __addObject(::IceInternal::GCCountMap&);
	virtual bool __usesGC();
	virtual void __gcReachable(::IceInternal::GCCountMap&) const;
	virtual void __gcClear();

	virtual ::std::string getName(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getName(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setName(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setName(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getSurname(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getSurname(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setSurname(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setSurname(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::Blob getAvatarBytes(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getAvatarBytes(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setAvatarBytes(const ::cardroid::data::zerocice::Blob&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setAvatarBytes(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasAvatar(const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasAvatar(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::PlaceTypPtr getUserHome(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getUserHome(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setUserHome(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setUserHome(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getTelephone(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTelephone(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTelephone(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTelephone(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getEmail(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getEmail(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setEmail(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getReputation(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getReputation(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setReputation(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setReputation(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasReputation(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasReputation(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::CarCollection getUserCars(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getUserCars(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setUserCars(const ::cardroid::data::zerocice::CarCollection&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setUserCars(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void increaseReputation1(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___increaseReputation1(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void increaseReputation(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___increaseReputation(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void decreaseReputation1(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___decreaseReputation1(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void decreaseReputation(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___decreaseReputation(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool addCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___addCar(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool removeCar(const ::cardroid::data::zerocice::CarTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___removeCar(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNCars(const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getNCars(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void clearCars(const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___clearCars(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::std::string name;

	::std::string surname;

	IceUtil::Optional< ::cardroid::data::zerocice::Blob> userAvatarBytes;

	::cardroid::data::zerocice::PlaceTypPtr home;

	::Ice::Int telephone;

	::std::string email;

	IceUtil::Optional< ::Ice::Int> userReputation;

	::cardroid::data::zerocice::CarCollection cars;
};

inline bool operator==(const UserTyp& l, const UserTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserTyp& l, const UserTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class DateTyp: virtual public ::Ice::Object {
public:

	typedef DateTypPrx ProxyType;
	typedef DateTypPtr PointerType;

	DateTyp() {
	}

	explicit DateTyp(::Ice::Long __ice_datetime) :
			datetime(__ice_datetime) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::Ice::Long getTimeInMillis(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTimeInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTimeInMillis(::Ice::Long, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTimeInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::Ice::Long datetime;
};

inline bool operator==(const DateTyp& l, const DateTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DateTyp& l, const DateTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class DateTimeTyp: public ::cardroid::data::zerocice::DateTyp {
public:

	typedef DateTimeTypPrx ProxyType;
	typedef DateTimeTypPtr PointerType;

	DateTimeTyp() {
	}

	explicit DateTimeTyp(::Ice::Long __ice_datetime) :
			::cardroid::data::zerocice::DateTyp(__ice_datetime)

	{
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::cardroid::data::zerocice::DateTyp::__writeImpl;
	using ::cardroid::data::zerocice::DateTyp::__readImpl;
#endif
};

inline bool operator==(const DateTimeTyp& l, const DateTimeTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DateTimeTyp& l, const DateTimeTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class DateTimePrefsTyp: public ::cardroid::data::zerocice::DateTyp {
public:

	typedef DateTimePrefsTypPrx ProxyType;
	typedef DateTimePrefsTypPtr PointerType;

	DateTimePrefsTyp() {
	}

	DateTimePrefsTyp(::Ice::Long __ice_datetime, ::Ice::Int __ice_toleranceDays,
			::cardroid::data::zerocice::TimePreferences __ice_timePrefs) :
			::cardroid::data::zerocice::DateTyp(__ice_datetime), toleranceDays(
					__ice_toleranceDays), timePrefs(__ice_timePrefs) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::Ice::Int getToleranceDays(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getToleranceDays(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setToleranceDays(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setToleranceDays(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TimePreferences getTimePrefs(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTimePrefs(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTimePrefs(::cardroid::data::zerocice::TimePreferences,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTimePrefs(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::cardroid::data::zerocice::DateTyp::__writeImpl;
	using ::cardroid::data::zerocice::DateTyp::__readImpl;
#endif

public:

	::Ice::Int toleranceDays;

	::cardroid::data::zerocice::TimePreferences timePrefs;
};

inline bool operator==(const DateTimePrefsTyp& l, const DateTimePrefsTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DateTimePrefsTyp& l, const DateTimePrefsTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class TripTyp: virtual public ::Ice::Object, public IceInternal::GCShared {
public:

	typedef TripTypPrx ProxyType;
	typedef TripTypPtr PointerType;

	TripTyp() {
	}

	TripTyp(::Ice::Int __ice_tripId,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_fromPlace,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_toPlace,
			const ::cardroid::data::zerocice::DateTypPtr& __ice_tDate,
			::Ice::Int __ice_nSeats,
			const IceUtil::Optional< ::cardroid::data::zerocice::DateTypPtr>& __ice_tReturnDate,
			const IceUtil::Optional< ::cardroid::data::zerocice::WeekdaysV>& __ice_tWeekDays,
			const IceUtil::Optional< ::cardroid::data::zerocice::Periodicity>& __ice_tPeriodicity,
			const IceUtil::Optional< ::Ice::Int>& __ice_tripDistance,
			const IceUtil::Optional< ::std::string>& __ice_tripCharacteristics,
			::Ice::Int __ice_tripType) :
			tripId(__ice_tripId), fromPlace(__ice_fromPlace), toPlace(
					__ice_toPlace), tDate(__ice_tDate), nSeats(__ice_nSeats), tReturnDate(
					__ice_tReturnDate), tWeekDays(__ice_tWeekDays), tPeriodicity(
					__ice_tPeriodicity), tripDistance(__ice_tripDistance), tripCharacteristics(
					__ice_tripCharacteristics), tripType(__ice_tripType) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void __addObject(::IceInternal::GCCountMap&);
	virtual bool __usesGC();
	virtual void __gcReachable(::IceInternal::GCCountMap&) const;
	virtual void __gcClear();

	virtual ::Ice::Int getTripId(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripId(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripId(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripId(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace1(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getPlace1(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setPlace1(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setPlace1(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getPlace2(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getPlace2(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setPlace2(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setPlace2(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripDate(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripDate(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripDate(const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripDate(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNSeats(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setNSeats(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::DateTypPtr getTripReturnDate(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripReturnDate(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripReturnDate(
			const ::cardroid::data::zerocice::DateTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripReturnDate(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasTripReturnDate(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasTripReturnDate(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::WeekdaysV getTripWeekDays(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripWeekDays(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::Periodicity getTripPeriodicity(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripPeriodicity(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripWeekDaysPeriodicity(
			const ::cardroid::data::zerocice::WeekdaysV&,
			::cardroid::data::zerocice::Periodicity, const ::Ice::Current& =
					::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripWeekDaysPeriodicity(
			::IceInternal::Incoming&, const ::Ice::Current&);

	virtual bool hasWeekDaysPeriodicity(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasWeekDaysPeriodicity(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::Int getDistance(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getDistance(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setDistance(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setDistance(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasDistance(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasDistance(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::std::string getCharacteristics(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getCharacteristics(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setCharacteristics(const ::std::string&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setCharacteristics(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool hasCharacteristics(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___hasCharacteristics(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripType(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripType(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getTripType(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripType(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::Ice::Int tripId;

	::cardroid::data::zerocice::PlaceTypPtr fromPlace;

	::cardroid::data::zerocice::PlaceTypPtr toPlace;

	::cardroid::data::zerocice::DateTypPtr tDate;

	::Ice::Int nSeats;

	IceUtil::Optional< ::cardroid::data::zerocice::DateTypPtr> tReturnDate;

	IceUtil::Optional< ::cardroid::data::zerocice::WeekdaysV> tWeekDays;

	IceUtil::Optional< ::cardroid::data::zerocice::Periodicity> tPeriodicity;

	IceUtil::Optional< ::Ice::Int> tripDistance;

	IceUtil::Optional< ::std::string> tripCharacteristics;

	::Ice::Int tripType;
};

inline bool operator==(const TripTyp& l, const TripTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TripTyp& l, const TripTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class WaypointTyp: virtual public ::Ice::Object, public IceInternal::GCShared {
public:

	typedef WaypointTypPrx ProxyType;
	typedef WaypointTypPtr PointerType;

	WaypointTyp() {
	}

	WaypointTyp(::Ice::Int __ice_nOrder,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_waypointPlace) :
			nOrder(__ice_nOrder), waypointPlace(__ice_waypointPlace) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void __addObject(::IceInternal::GCCountMap&);
	virtual bool __usesGC();
	virtual void __gcReachable(::IceInternal::GCCountMap&) const;
	virtual void __gcClear();

	virtual ::Ice::Int getNOrder(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getNOrder(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setNOrder(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setNOrder(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::PlaceTypPtr getWaypointPlace(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getWaypointPlace(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setWaypointPlace(
			const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setWaypointPlace(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::Ice::Int nOrder;

	::cardroid::data::zerocice::PlaceTypPtr waypointPlace;
};

inline bool operator==(const WaypointTyp& l, const WaypointTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WaypointTyp& l, const WaypointTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class PassengerTyp: virtual public ::Ice::Object {
public:

	typedef PassengerTypPrx ProxyType;
	typedef PassengerTypPtr PointerType;

	PassengerTyp() {
	}

	PassengerTyp(
			const ::cardroid::data::zerocice::UserTypPrx& __ice_passengerUser,
			::Ice::Int __ice_nSeats) :
			passengerUser(__ice_passengerUser), nSeats(__ice_nSeats) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::cardroid::data::zerocice::UserTypPrx getPassengerUser(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getPassengerUser(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setPassengerUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setPassengerUser(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNSeats(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setNSeats(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setNSeats(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::cardroid::data::zerocice::UserTypPrx passengerUser;

	::Ice::Int nSeats;
};

inline bool operator==(const PassengerTyp& l, const PassengerTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PassengerTyp& l, const PassengerTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class TripOfferTyp: public ::cardroid::data::zerocice::TripTyp {
public:

	typedef TripOfferTypPrx ProxyType;
	typedef TripOfferTypPtr PointerType;

	TripOfferTyp() {
	}

	TripOfferTyp(::Ice::Int __ice_tripId,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_fromPlace,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_toPlace,
			const ::cardroid::data::zerocice::DateTypPtr& __ice_tDate,
			::Ice::Int __ice_nSeats,
			const IceUtil::Optional< ::cardroid::data::zerocice::DateTypPtr>& __ice_tReturnDate,
			const IceUtil::Optional< ::cardroid::data::zerocice::WeekdaysV>& __ice_tWeekDays,
			const IceUtil::Optional< ::cardroid::data::zerocice::Periodicity>& __ice_tPeriodicity,
			const IceUtil::Optional< ::Ice::Int>& __ice_tripDistance,
			const IceUtil::Optional< ::std::string>& __ice_tripCharacteristics,
			::Ice::Int __ice_tripType,
			const ::cardroid::data::zerocice::UserTypPrx& __ice_driver,
			const ::cardroid::data::zerocice::WaypointCollection& __ice_waypoints,
			const ::cardroid::data::zerocice::CarTypPrx& __ice_tripOfferCar,
			const ::cardroid::data::zerocice::PassengerCollection& __ice_passengers,
			::Ice::Double __ice_price,
			const ::cardroid::data::zerocice::AllowedV& __ice_allowed,
			const ::cardroid::data::zerocice::DateTimeTypPtr& __ice_tDateTime,
			const IceUtil::Optional< ::cardroid::data::zerocice::DateTimeTypPtr>& __ice_tReturnDateTime) :
			::cardroid::data::zerocice::TripTyp(__ice_tripId, __ice_fromPlace,
					__ice_toPlace, __ice_tDate, __ice_nSeats, __ice_tReturnDate,
					__ice_tWeekDays, __ice_tPeriodicity, __ice_tripDistance,
					__ice_tripCharacteristics, __ice_tripType), driver(
					__ice_driver), waypoints(__ice_waypoints), tripOfferCar(
					__ice_tripOfferCar), passengers(__ice_passengers), price(
					__ice_price), allowed(__ice_allowed), tDateTime(
					__ice_tDateTime), tReturnDateTime(__ice_tReturnDateTime) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void __gcReachable(::IceInternal::GCCountMap&) const;
	virtual void __gcClear();

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripDateTime(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripDateTime(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripDateTime(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::DateTimeTypPtr getTripReturnDateTime(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripReturnDateTime(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripReturnDateTime(
			const ::cardroid::data::zerocice::DateTimeTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripReturnDateTime(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripDriver(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripDriver(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripDriver(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripDriver(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::WaypointCollection getTripWaypoints(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripWaypoints(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripWaypoints(
			const ::cardroid::data::zerocice::WaypointCollection&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripWaypoints(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx getTripCar(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripCar(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripCar(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::PassengerCollection getTripPassengers(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripPassengers(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripPassengers(
			const ::cardroid::data::zerocice::PassengerCollection&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripPassengers(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Double getPrice(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getPrice(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setPrice(::Ice::Double, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setPrice(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::AllowedV getAllowedFeatures(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getAllowedFeatures(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setAllowedFeatures(const ::cardroid::data::zerocice::AllowedV&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setAllowedFeatures(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool addTripWaypoint(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___addTripWaypoint(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool removeTripWaypoint(::Ice::Int, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___removeTripWaypoint(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNTripWaypoints(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getNTripWaypoints(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void clearTripWaypoints(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___clearTripWaypoints(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool addTripPassenger(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___addTripPassenger(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool removeTripPassenger(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___removeTripPassenger(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Int getNTripPassengers(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getNTripPassengers(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void clearTripPassengers(const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___clearTripPassengers(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::cardroid::data::zerocice::TripTyp::__writeImpl;
	using ::cardroid::data::zerocice::TripTyp::__readImpl;
#endif

public:

	::cardroid::data::zerocice::UserTypPrx driver;

	::cardroid::data::zerocice::WaypointCollection waypoints;

	::cardroid::data::zerocice::CarTypPrx tripOfferCar;

	::cardroid::data::zerocice::PassengerCollection passengers;

	::Ice::Double price;

	::cardroid::data::zerocice::AllowedV allowed;

	::cardroid::data::zerocice::DateTimeTypPtr tDateTime;

	IceUtil::Optional< ::cardroid::data::zerocice::DateTimeTypPtr> tReturnDateTime;
};

inline bool operator==(const TripOfferTyp& l, const TripOfferTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TripOfferTyp& l, const TripOfferTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class TripRequestTyp: public ::cardroid::data::zerocice::TripTyp {
public:

	typedef TripRequestTypPrx ProxyType;
	typedef TripRequestTypPtr PointerType;

	TripRequestTyp() {
	}

	TripRequestTyp(::Ice::Int __ice_tripId,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_fromPlace,
			const ::cardroid::data::zerocice::PlaceTypPtr& __ice_toPlace,
			const ::cardroid::data::zerocice::DateTypPtr& __ice_tDate,
			::Ice::Int __ice_nSeats,
			const IceUtil::Optional< ::cardroid::data::zerocice::DateTypPtr>& __ice_tReturnDate,
			const IceUtil::Optional< ::cardroid::data::zerocice::WeekdaysV>& __ice_tWeekDays,
			const IceUtil::Optional< ::cardroid::data::zerocice::Periodicity>& __ice_tPeriodicity,
			const IceUtil::Optional< ::Ice::Int>& __ice_tripDistance,
			const IceUtil::Optional< ::std::string>& __ice_tripCharacteristics,
			::Ice::Int __ice_tripType,
			const ::cardroid::data::zerocice::UserTypPrx& __ice_requester,
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr& __ice_tDateTimePrefs,
			const IceUtil::Optional<
					::cardroid::data::zerocice::DateTimePrefsTypPtr>& __ice_tReturnDateTimePrefs) :
			::cardroid::data::zerocice::TripTyp(__ice_tripId, __ice_fromPlace,
					__ice_toPlace, __ice_tDate, __ice_nSeats, __ice_tReturnDate,
					__ice_tWeekDays, __ice_tPeriodicity, __ice_tripDistance,
					__ice_tripCharacteristics, __ice_tripType), requester(
					__ice_requester), tDateTimePrefs(__ice_tDateTimePrefs), tReturnDateTimePrefs(
					__ice_tReturnDateTimePrefs) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void __gcReachable(::IceInternal::GCCountMap&) const;
	virtual void __gcClear();

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripDateTimePrefs(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripDateTimePrefs(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripDateTimePrefs(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::DateTimePrefsTypPtr getTripReturnDateTimePrefs(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripReturnDateTimePrefs(
			::IceInternal::Incoming&, const ::Ice::Current&) const;

	virtual void setTripReturnDateTimePrefs(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripReturnDateTimePrefs(
			::IceInternal::Incoming&, const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::UserTypPrx getTripRequester(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTripRequester(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTripRequester(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTripRequester(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::cardroid::data::zerocice::TripTyp::__writeImpl;
	using ::cardroid::data::zerocice::TripTyp::__readImpl;
#endif

public:

	::cardroid::data::zerocice::UserTypPrx requester;

	::cardroid::data::zerocice::DateTimePrefsTypPtr tDateTimePrefs;

	IceUtil::Optional< ::cardroid::data::zerocice::DateTimePrefsTypPtr> tReturnDateTimePrefs;
};

inline bool operator==(const TripRequestTyp& l, const TripRequestTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TripRequestTyp& l, const TripRequestTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class UserActivityTyp: virtual public ::Ice::Object {
public:

	typedef UserActivityTypPrx ProxyType;
	typedef UserActivityTypPtr PointerType;

	UserActivityTyp() {
	}

	UserActivityTyp(
			const ::cardroid::data::zerocice::UserTypPrx& __ice_activityUser,
			const ::cardroid::data::zerocice::TripOfferTypPrx& __ice_activityTrip,
			::cardroid::data::zerocice::ActivityType __ice_userActivityType,
			::Ice::Long __ice_timeStamp) :
			activityUser(__ice_activityUser), activityTrip(__ice_activityTrip), userActivityType(
					__ice_userActivityType), timeStamp(__ice_timeStamp) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::cardroid::data::zerocice::UserTypPrx getActivityUser(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getActivityUser(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setActivityUser(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setActivityUser(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getActivityTrip(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getActivityTrip(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setActivityTrip(
			const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setActivityTrip(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::ActivityType getUserActivityType(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getUserActivityType(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setUserActivityType(::cardroid::data::zerocice::ActivityType,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setUserActivityType(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTimeStampInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTimeStampInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::cardroid::data::zerocice::UserTypPrx activityUser;

	::cardroid::data::zerocice::TripOfferTypPrx activityTrip;

	::cardroid::data::zerocice::ActivityType userActivityType;

	::Ice::Long timeStamp;
};

inline bool operator==(const UserActivityTyp& l, const UserActivityTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserActivityTyp& l, const UserActivityTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

class MessageTyp: virtual public ::Ice::Object {
public:

	typedef MessageTypPrx ProxyType;
	typedef MessageTypPtr PointerType;

	MessageTyp() {
	}

	MessageTyp(const ::cardroid::data::zerocice::UserTypPrx& __ice_user1,
			const ::cardroid::data::zerocice::UserTypPrx& __ice_user2,
			const ::std::string& __ice_msg, ::Ice::Long __ice_timeStamp) :
			user1(__ice_user1), user2(__ice_user2), msg(__ice_msg), timeStamp(
					__ice_timeStamp) {
	}

	virtual ::Ice::ObjectPtr ice_clone() const;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::cardroid::data::zerocice::UserTypPrx getUser1(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getUser1(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setUser1(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setUser1(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUser2(
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getUser2(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setUser2(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setUser2(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string getMessageText(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getMessageText(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setMessageText(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setMessageText(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Long getTimeStampInMillis(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___getTimeStampInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual void setTimeStampInMillis(::Ice::Long, const ::Ice::Current& =
			::Ice::Current()) = 0;
	::Ice::DispatchStatus ___setTimeStampInMillis(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::std::string toString(const ::Ice::Current& =
			::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___toString(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif

public:

	::cardroid::data::zerocice::UserTypPrx user1;

	::cardroid::data::zerocice::UserTypPrx user2;

	::std::string msg;

	::Ice::Long timeStamp;
};

inline bool operator==(const MessageTyp& l, const MessageTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MessageTyp& l, const MessageTyp& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

}

}

class QueryResult: virtual public ::Ice::Object {
public:

	typedef QueryResultPrx ProxyType;
	typedef QueryResultPtr PointerType;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual ::cardroid::ResultSeq next(::Ice::Int, bool&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___next(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif
};

inline bool operator==(const QueryResult& l, const QueryResult& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const QueryResult& l, const QueryResult& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

namespace zerocice {

class CardroidManager: virtual public ::Ice::Object {
public:

	typedef CardroidManagerPrx ProxyType;
	typedef CardroidManagerPtr PointerType;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Current& =
					::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getUserPlaces(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___searchTrips(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getTripFromId(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getTripOfferFromId(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getTripRequestFromId(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___joinTrip(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx&,
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___organizeTrip(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Current& =
					::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getUserTrips(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void getPassengerTrips(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getPassengerTrips(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual bool userTripRegistered(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::TripTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___userTripRegistered(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::Double calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel, ::Ice::Int,
			const ::Ice::Current& = ::Ice::Current()) const = 0;
	::Ice::DispatchStatus ___calculatePriceEstimation(::IceInternal::Incoming&,
			const ::Ice::Current&) const;

	virtual ::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___newTripOffer(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___newTripRequest(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getMessageTalksSpeakers(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, ::Ice::Int,
			::cardroid::ResultSeq&, ::Ice::Int&, ::cardroid::QueryResultPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getMessageTalks(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&, const ::std::string&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___newMessage(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx&,
			::Ice::Int, ::cardroid::ResultSeq&, ::Ice::Int&,
			::cardroid::QueryResultPrx&, const ::Ice::Current& =
					::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getUserActivity(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getUserFromEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string&, const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getCarFromPlate(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string&, const ::std::string&, const ::Ice::Current& =
					::Ice::Current()) = 0;
	::Ice::DispatchStatus ___getCarFromPlateEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___updateUserData(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPtr&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___updateCarData(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___updateCarDataEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___addCar(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr&, const ::std::string&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___addCarEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void removeCar(const ::cardroid::data::zerocice::CarTypPrx&,
			const ::cardroid::data::zerocice::UserTypPrx&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___removeCar(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual void removeCarPlateEmail(const ::std::string&, const ::std::string&,
			const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___removeCarPlateEmail(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif
};

inline bool operator==(const CardroidManager& l, const CardroidManager& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CardroidManager& l, const CardroidManager& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

}

}

namespace cardroid {

namespace data {

namespace zerocice {

template<class T>
class CallbackNC_PlaceTyp_getName: public Callback_PlaceTyp_getName_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_PlaceTyp_getName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getName(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_getNamePtr newCallback_PlaceTyp_getName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_getNamePtr newCallback_PlaceTyp_getName(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_getName: public Callback_PlaceTyp_getName_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_PlaceTyp_getName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getName(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_getNamePtr newCallback_PlaceTyp_getName(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_getNamePtr newCallback_PlaceTyp_getName(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_setName: public Callback_PlaceTyp_setName_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PlaceTyp_setName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_setName: public Callback_PlaceTyp_setName_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PlaceTyp_setName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setNamePtr newCallback_PlaceTyp_setName(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_getCoords: public Callback_PlaceTyp_getCoords_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::LatLngTyp&);

	CallbackNC_PlaceTyp_getCoords(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::LatLngTyp __ret;
		try {
			__ret = __proxy->end_getCoords(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_getCoordsPtr newCallback_PlaceTyp_getCoords(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::LatLngTyp&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getCoords<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_getCoordsPtr newCallback_PlaceTyp_getCoords(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::LatLngTyp&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getCoords<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_getCoords: public Callback_PlaceTyp_getCoords_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::LatLngTyp&,
			const CT&);

	Callback_PlaceTyp_getCoords(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::LatLngTyp __ret;
		try {
			__ret = __proxy->end_getCoords(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_getCoordsPtr newCallback_PlaceTyp_getCoords(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::LatLngTyp&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getCoords<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_getCoordsPtr newCallback_PlaceTyp_getCoords(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::LatLngTyp&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getCoords<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_setCoords: public Callback_PlaceTyp_setCoords_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PlaceTyp_setCoords(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setCoords<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setCoords<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setCoords<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setCoords<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_setCoords: public Callback_PlaceTyp_setCoords_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PlaceTyp_setCoords(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setCoords<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setCoords<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setCoords<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setCoordsPtr newCallback_PlaceTyp_setCoords(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setCoords<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_getDescription: public Callback_PlaceTyp_getDescription_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_PlaceTyp_getDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getDescription(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_getDescriptionPtr newCallback_PlaceTyp_getDescription(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_getDescriptionPtr newCallback_PlaceTyp_getDescription(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_getDescription: public Callback_PlaceTyp_getDescription_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_PlaceTyp_getDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getDescription(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_getDescriptionPtr newCallback_PlaceTyp_getDescription(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_getDescriptionPtr newCallback_PlaceTyp_getDescription(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_setDescription: public Callback_PlaceTyp_setDescription_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PlaceTyp_setDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setDescription<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_setDescription: public Callback_PlaceTyp_setDescription_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PlaceTyp_setDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setDescription<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setDescriptionPtr newCallback_PlaceTyp_setDescription(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setDescription<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_hasDescription: public Callback_PlaceTyp_hasDescription_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_PlaceTyp_hasDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasDescription(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_hasDescriptionPtr newCallback_PlaceTyp_hasDescription(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_hasDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_hasDescriptionPtr newCallback_PlaceTyp_hasDescription(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_hasDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_hasDescription: public Callback_PlaceTyp_hasDescription_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_PlaceTyp_hasDescription(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasDescription(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_hasDescriptionPtr newCallback_PlaceTyp_hasDescription(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_hasDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_hasDescriptionPtr newCallback_PlaceTyp_hasDescription(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_hasDescription<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_getSnapshotBytes: public Callback_PlaceTyp_getSnapshotBytes_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::Blob&);

	CallbackNC_PlaceTyp_getSnapshotBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Blob __ret;
		try {
			__ret = __proxy->end_getSnapshotBytes(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_getSnapshotBytesPtr newCallback_PlaceTyp_getSnapshotBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getSnapshotBytes<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PlaceTyp_getSnapshotBytesPtr newCallback_PlaceTyp_getSnapshotBytes(
		T* instance, void (T::*cb)(const ::cardroid::data::zerocice::Blob&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_getSnapshotBytes<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_getSnapshotBytes: public Callback_PlaceTyp_getSnapshotBytes_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::Blob&,
			const CT&);

	Callback_PlaceTyp_getSnapshotBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Blob __ret;
		try {
			__ret = __proxy->end_getSnapshotBytes(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_getSnapshotBytesPtr newCallback_PlaceTyp_getSnapshotBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getSnapshotBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_getSnapshotBytesPtr newCallback_PlaceTyp_getSnapshotBytes(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_getSnapshotBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_setSnapshotBytes: public Callback_PlaceTyp_setSnapshotBytes_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PlaceTyp_setSnapshotBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setSnapshotBytes<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setSnapshotBytes<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setSnapshotBytes<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_setSnapshotBytes<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_setSnapshotBytes: public Callback_PlaceTyp_setSnapshotBytes_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PlaceTyp_setSnapshotBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setSnapshotBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setSnapshotBytes<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setSnapshotBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_setSnapshotBytesPtr newCallback_PlaceTyp_setSnapshotBytes(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_setSnapshotBytes<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_hasSnapshot: public Callback_PlaceTyp_hasSnapshot_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_PlaceTyp_hasSnapshot(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasSnapshot(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_hasSnapshotPtr newCallback_PlaceTyp_hasSnapshot(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_hasSnapshot<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_hasSnapshotPtr newCallback_PlaceTyp_hasSnapshot(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_hasSnapshot<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_hasSnapshot: public Callback_PlaceTyp_hasSnapshot_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_PlaceTyp_hasSnapshot(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasSnapshot(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_hasSnapshotPtr newCallback_PlaceTyp_hasSnapshot(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_hasSnapshot<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_hasSnapshotPtr newCallback_PlaceTyp_hasSnapshot(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_hasSnapshot<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PlaceTyp_toString: public Callback_PlaceTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_PlaceTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PlaceTyp_toStringPtr newCallback_PlaceTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlaceTyp_toStringPtr newCallback_PlaceTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PlaceTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlaceTyp_toString: public Callback_PlaceTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_PlaceTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PlaceTypPrx __proxy =
				::cardroid::data::zerocice::PlaceTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PlaceTyp_toStringPtr newCallback_PlaceTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlaceTyp_toStringPtr newCallback_PlaceTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PlaceTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getBrand: public Callback_CarTyp_getBrand_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_CarTyp_getBrand(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getBrand(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getBrandPtr newCallback_CarTyp_getBrand(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getBrand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getBrandPtr newCallback_CarTyp_getBrand(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getBrand<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getBrand: public Callback_CarTyp_getBrand_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_CarTyp_getBrand(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getBrand(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getBrandPtr newCallback_CarTyp_getBrand(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getBrand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getBrandPtr newCallback_CarTyp_getBrand(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getBrand<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setBrand: public Callback_CarTyp_setBrand_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setBrand(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setBrand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setBrand<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setBrand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setBrand<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setBrand: public Callback_CarTyp_setBrand_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setBrand(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setBrand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setBrand<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setBrand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setBrandPtr newCallback_CarTyp_setBrand(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setBrand<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getModel: public Callback_CarTyp_getModel_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_CarTyp_getModel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getModel(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getModelPtr newCallback_CarTyp_getModel(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getModelPtr newCallback_CarTyp_getModel(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getModel: public Callback_CarTyp_getModel_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_CarTyp_getModel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getModel(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getModelPtr newCallback_CarTyp_getModel(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getModelPtr newCallback_CarTyp_getModel(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setModel: public Callback_CarTyp_setModel_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setModel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setModel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setModel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setModel: public Callback_CarTyp_setModel_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setModel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setModelPtr newCallback_CarTyp_setModel(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setModel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getCarFuel: public Callback_CarTyp_getCarFuel_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::cardroid::data::zerocice::Fuel);

	CallbackNC_CarTyp_getCarFuel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Fuel __ret;
		try {
			__ret = __proxy->end_getCarFuel(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getCarFuelPtr newCallback_CarTyp_getCarFuel(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::Fuel),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getCarFuel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getCarFuelPtr newCallback_CarTyp_getCarFuel(
		T* instance, void (T::*cb)(::cardroid::data::zerocice::Fuel),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getCarFuel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getCarFuel: public Callback_CarTyp_getCarFuel_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::cardroid::data::zerocice::Fuel, const CT&);

	Callback_CarTyp_getCarFuel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Fuel __ret;
		try {
			__ret = __proxy->end_getCarFuel(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getCarFuelPtr newCallback_CarTyp_getCarFuel(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::Fuel, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getCarFuel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getCarFuelPtr newCallback_CarTyp_getCarFuel(
		T* instance, void (T::*cb)(::cardroid::data::zerocice::Fuel, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getCarFuel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setCarFuel: public Callback_CarTyp_setCarFuel_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setCarFuel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setCarFuel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setCarFuel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setCarFuel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setCarFuel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setCarFuel: public Callback_CarTyp_setCarFuel_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setCarFuel(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setCarFuel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setCarFuel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setCarFuel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setCarFuelPtr newCallback_CarTyp_setCarFuel(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setCarFuel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getConsumptionPerKm: public Callback_CarTyp_getConsumptionPerKm_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Double);

	CallbackNC_CarTyp_getConsumptionPerKm(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_getConsumptionPerKm(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getConsumptionPerKmPtr newCallback_CarTyp_getConsumptionPerKm(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getConsumptionPerKm<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CarTyp_getConsumptionPerKmPtr newCallback_CarTyp_getConsumptionPerKm(
		T* instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getConsumptionPerKm<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getConsumptionPerKm: public Callback_CarTyp_getConsumptionPerKm_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Double, const CT&);

	Callback_CarTyp_getConsumptionPerKm(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_getConsumptionPerKm(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getConsumptionPerKmPtr newCallback_CarTyp_getConsumptionPerKm(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getConsumptionPerKm<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CarTyp_getConsumptionPerKmPtr newCallback_CarTyp_getConsumptionPerKm(
		T* instance, void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getConsumptionPerKm<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CarTyp_setConsumptionPerKm: public Callback_CarTyp_setConsumptionPerKm_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setConsumptionPerKm(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setConsumptionPerKm<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setConsumptionPerKm<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setConsumptionPerKm<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setConsumptionPerKm<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setConsumptionPerKm: public Callback_CarTyp_setConsumptionPerKm_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setConsumptionPerKm(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setConsumptionPerKm<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setConsumptionPerKm<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setConsumptionPerKm<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CarTyp_setConsumptionPerKmPtr newCallback_CarTyp_setConsumptionPerKm(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setConsumptionPerKm<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_CarTyp_getNSeats: public Callback_CarTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_CarTyp_getNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getNSeatsPtr newCallback_CarTyp_getNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getNSeatsPtr newCallback_CarTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getNSeats: public Callback_CarTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_CarTyp_getNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getNSeatsPtr newCallback_CarTyp_getNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getNSeatsPtr newCallback_CarTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setNSeats: public Callback_CarTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setNSeats: public Callback_CarTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setNSeatsPtr newCallback_CarTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getColor: public Callback_CarTyp_getColor_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_CarTyp_getColor(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getColor(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getColorPtr newCallback_CarTyp_getColor(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getColor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getColorPtr newCallback_CarTyp_getColor(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getColor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getColor: public Callback_CarTyp_getColor_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_CarTyp_getColor(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getColor(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getColorPtr newCallback_CarTyp_getColor(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getColor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getColorPtr newCallback_CarTyp_getColor(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getColor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setColor: public Callback_CarTyp_setColor_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setColor(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setColor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setColor<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setColor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setColor<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setColor: public Callback_CarTyp_setColor_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setColor(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setColor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setColor<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setColor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setColorPtr newCallback_CarTyp_setColor(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setColor<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_getPlate: public Callback_CarTyp_getPlate_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_CarTyp_getPlate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getPlate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_getPlatePtr newCallback_CarTyp_getPlate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_getPlatePtr newCallback_CarTyp_getPlate(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_getPlate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_getPlate: public Callback_CarTyp_getPlate_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_CarTyp_getPlate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getPlate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_getPlatePtr newCallback_CarTyp_getPlate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_getPlatePtr newCallback_CarTyp_getPlate(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_getPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_setPlate: public Callback_CarTyp_setPlate_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CarTyp_setPlate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setPlate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_setPlate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_setPlate: public Callback_CarTyp_setPlate_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CarTyp_setPlate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setPlate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_setPlatePtr newCallback_CarTyp_setPlate(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_setPlate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CarTyp_toString: public Callback_CarTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_CarTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CarTyp_toStringPtr newCallback_CarTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CarTyp_toStringPtr newCallback_CarTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CarTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CarTyp_toString: public Callback_CarTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_CarTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::CarTypPrx __proxy =
				::cardroid::data::zerocice::CarTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CarTyp_toStringPtr newCallback_CarTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CarTyp_toStringPtr newCallback_CarTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CarTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getName: public Callback_UserTyp_getName_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_UserTyp_getName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getName(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getNamePtr newCallback_UserTyp_getName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getNamePtr newCallback_UserTyp_getName(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getName: public Callback_UserTyp_getName_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_UserTyp_getName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getName(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getNamePtr newCallback_UserTyp_getName(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getNamePtr newCallback_UserTyp_getName(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setName: public Callback_UserTyp_setName_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setName<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setName<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setName: public Callback_UserTyp_setName_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setName(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setNamePtr newCallback_UserTyp_setName(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setName<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getSurname: public Callback_UserTyp_getSurname_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_UserTyp_getSurname(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getSurname(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getSurnamePtr newCallback_UserTyp_getSurname(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getSurname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getSurnamePtr newCallback_UserTyp_getSurname(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getSurname<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getSurname: public Callback_UserTyp_getSurname_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_UserTyp_getSurname(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getSurname(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getSurnamePtr newCallback_UserTyp_getSurname(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getSurname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getSurnamePtr newCallback_UserTyp_getSurname(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getSurname<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setSurname: public Callback_UserTyp_setSurname_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setSurname(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setSurname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setSurname<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setSurname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setSurname<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setSurname: public Callback_UserTyp_setSurname_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setSurname(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setSurname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setSurname<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setSurname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setSurnamePtr newCallback_UserTyp_setSurname(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setSurname<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getAvatarBytes: public Callback_UserTyp_getAvatarBytes_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::Blob&);

	CallbackNC_UserTyp_getAvatarBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Blob __ret;
		try {
			__ret = __proxy->end_getAvatarBytes(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getAvatarBytesPtr newCallback_UserTyp_getAvatarBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getAvatarBytes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getAvatarBytesPtr newCallback_UserTyp_getAvatarBytes(
		T* instance, void (T::*cb)(const ::cardroid::data::zerocice::Blob&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getAvatarBytes<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getAvatarBytes: public Callback_UserTyp_getAvatarBytes_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::Blob&,
			const CT&);

	Callback_UserTyp_getAvatarBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Blob __ret;
		try {
			__ret = __proxy->end_getAvatarBytes(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getAvatarBytesPtr newCallback_UserTyp_getAvatarBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getAvatarBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_getAvatarBytesPtr newCallback_UserTyp_getAvatarBytes(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::Blob&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getAvatarBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_UserTyp_setAvatarBytes: public Callback_UserTyp_setAvatarBytes_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setAvatarBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setAvatarBytes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setAvatarBytes<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setAvatarBytes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setAvatarBytes<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setAvatarBytes: public Callback_UserTyp_setAvatarBytes_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setAvatarBytes(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setAvatarBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setAvatarBytes<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setAvatarBytes<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_setAvatarBytesPtr newCallback_UserTyp_setAvatarBytes(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setAvatarBytes<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_hasAvatar: public Callback_UserTyp_hasAvatar_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_UserTyp_hasAvatar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasAvatar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_hasAvatarPtr newCallback_UserTyp_hasAvatar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_hasAvatar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_hasAvatarPtr newCallback_UserTyp_hasAvatar(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_hasAvatar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_hasAvatar: public Callback_UserTyp_hasAvatar_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_UserTyp_hasAvatar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasAvatar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_hasAvatarPtr newCallback_UserTyp_hasAvatar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_hasAvatar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_hasAvatarPtr newCallback_UserTyp_hasAvatar(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_hasAvatar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getUserHome: public Callback_UserTyp_getUserHome_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&);

	CallbackNC_UserTyp_getUserHome(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getUserHome(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getUserHomePtr newCallback_UserTyp_getUserHome(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getUserHome<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getUserHomePtr newCallback_UserTyp_getUserHome(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getUserHome<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getUserHome: public Callback_UserTyp_getUserHome_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const CT&);

	Callback_UserTyp_getUserHome(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getUserHome(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getUserHomePtr newCallback_UserTyp_getUserHome(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getUserHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getUserHomePtr newCallback_UserTyp_getUserHome(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getUserHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setUserHome: public Callback_UserTyp_setUserHome_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setUserHome(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserHome<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserHome<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserHome<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserHome<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setUserHome: public Callback_UserTyp_setUserHome_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setUserHome(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserHome<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserHome<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserHomePtr newCallback_UserTyp_setUserHome(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserHome<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getTelephone: public Callback_UserTyp_getTelephone_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_UserTyp_getTelephone(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTelephone(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getTelephonePtr newCallback_UserTyp_getTelephone(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getTelephone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getTelephonePtr newCallback_UserTyp_getTelephone(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getTelephone<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getTelephone: public Callback_UserTyp_getTelephone_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_UserTyp_getTelephone(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTelephone(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getTelephonePtr newCallback_UserTyp_getTelephone(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getTelephone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getTelephonePtr newCallback_UserTyp_getTelephone(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getTelephone<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setTelephone: public Callback_UserTyp_setTelephone_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setTelephone(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setTelephone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setTelephone<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setTelephone<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setTelephone<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setTelephone: public Callback_UserTyp_setTelephone_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setTelephone(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setTelephone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setTelephone<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setTelephone<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setTelephonePtr newCallback_UserTyp_setTelephone(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setTelephone<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getEmail: public Callback_UserTyp_getEmail_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_UserTyp_getEmail(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getEmailPtr newCallback_UserTyp_getEmail(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getEmail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getEmailPtr newCallback_UserTyp_getEmail(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getEmail<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getEmail: public Callback_UserTyp_getEmail_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_UserTyp_getEmail(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getEmailPtr newCallback_UserTyp_getEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getEmail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getEmailPtr newCallback_UserTyp_getEmail(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getEmail<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setEmail: public Callback_UserTyp_setEmail_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setEmail(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setEmail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setEmail<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setEmail<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setEmail<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setEmail: public Callback_UserTyp_setEmail_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setEmail(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setEmail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setEmail<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setEmail<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setEmailPtr newCallback_UserTyp_setEmail(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setEmail<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getReputation: public Callback_UserTyp_getReputation_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_UserTyp_getReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getReputation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getReputationPtr newCallback_UserTyp_getReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getReputation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getReputationPtr newCallback_UserTyp_getReputation(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getReputation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getReputation: public Callback_UserTyp_getReputation_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_UserTyp_getReputation(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getReputation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getReputationPtr newCallback_UserTyp_getReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getReputationPtr newCallback_UserTyp_getReputation(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setReputation: public Callback_UserTyp_setReputation_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setReputation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setReputation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setReputation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setReputation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setReputation: public Callback_UserTyp_setReputation_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setReputation(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setReputation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setReputationPtr newCallback_UserTyp_setReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setReputation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_hasReputation: public Callback_UserTyp_hasReputation_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_UserTyp_hasReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasReputation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_hasReputationPtr newCallback_UserTyp_hasReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_hasReputation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_hasReputationPtr newCallback_UserTyp_hasReputation(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_hasReputation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_hasReputation: public Callback_UserTyp_hasReputation_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_UserTyp_hasReputation(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasReputation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_hasReputationPtr newCallback_UserTyp_hasReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_hasReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_hasReputationPtr newCallback_UserTyp_hasReputation(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_hasReputation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getUserCars: public Callback_UserTyp_getUserCars_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::CarCollection&);

	CallbackNC_UserTyp_getUserCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarCollection __ret;
		try {
			__ret = __proxy->end_getUserCars(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getUserCarsPtr newCallback_UserTyp_getUserCars(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getUserCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getUserCarsPtr newCallback_UserTyp_getUserCars(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getUserCars<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getUserCars: public Callback_UserTyp_getUserCars_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::CarCollection&, const CT&);

	Callback_UserTyp_getUserCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarCollection __ret;
		try {
			__ret = __proxy->end_getUserCars(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getUserCarsPtr newCallback_UserTyp_getUserCars(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getUserCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getUserCarsPtr newCallback_UserTyp_getUserCars(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getUserCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_setUserCars: public Callback_UserTyp_setUserCars_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_setUserCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserCars<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_setUserCars<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_setUserCars: public Callback_UserTyp_setUserCars_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_setUserCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserCars<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_setUserCarsPtr newCallback_UserTyp_setUserCars(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_setUserCars<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_toString: public Callback_UserTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_UserTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_toStringPtr newCallback_UserTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_toStringPtr newCallback_UserTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_toString: public Callback_UserTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_UserTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_toStringPtr newCallback_UserTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_toStringPtr newCallback_UserTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_increaseReputation1: public Callback_UserTyp_increaseReputation1_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_increaseReputation1(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation1<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation1<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation1<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation1<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_increaseReputation1: public Callback_UserTyp_increaseReputation1_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_increaseReputation1(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation1<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation1<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation1<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputation1Ptr newCallback_UserTyp_increaseReputation1(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation1<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_UserTyp_increaseReputation: public Callback_UserTyp_increaseReputation_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_increaseReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_increaseReputation<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_increaseReputation: public Callback_UserTyp_increaseReputation_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_increaseReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_increaseReputationPtr newCallback_UserTyp_increaseReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_increaseReputation<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_UserTyp_decreaseReputation1: public Callback_UserTyp_decreaseReputation1_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_decreaseReputation1(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation1<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation1<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation1<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation1<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_decreaseReputation1: public Callback_UserTyp_decreaseReputation1_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_decreaseReputation1(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation1<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation1<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation1<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputation1Ptr newCallback_UserTyp_decreaseReputation1(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation1<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_UserTyp_decreaseReputation: public Callback_UserTyp_decreaseReputation_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_decreaseReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_decreaseReputation<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_decreaseReputation: public Callback_UserTyp_decreaseReputation_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_decreaseReputation(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserTyp_decreaseReputationPtr newCallback_UserTyp_decreaseReputation(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_decreaseReputation<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_UserTyp_addCar: public Callback_UserTyp_addCar_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_UserTyp_addCar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_addCarPtr newCallback_UserTyp_addCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_addCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_addCarPtr newCallback_UserTyp_addCar(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_addCar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_addCar: public Callback_UserTyp_addCar_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_UserTyp_addCar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_addCarPtr newCallback_UserTyp_addCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_addCar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_addCarPtr newCallback_UserTyp_addCar(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_addCar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_removeCar: public Callback_UserTyp_removeCar_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_UserTyp_removeCar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_removeCarPtr newCallback_UserTyp_removeCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_removeCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_removeCarPtr newCallback_UserTyp_removeCar(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_removeCar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_removeCar: public Callback_UserTyp_removeCar_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_UserTyp_removeCar(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_removeCarPtr newCallback_UserTyp_removeCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_removeCar<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_removeCarPtr newCallback_UserTyp_removeCar(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_removeCar<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_getNCars: public Callback_UserTyp_getNCars_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_UserTyp_getNCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNCars(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserTyp_getNCarsPtr newCallback_UserTyp_getNCars(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getNCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_getNCarsPtr newCallback_UserTyp_getNCars(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_getNCars<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_getNCars: public Callback_UserTyp_getNCars_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_UserTyp_getNCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserTypPrx __proxy =
				::cardroid::data::zerocice::UserTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNCars(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserTyp_getNCarsPtr newCallback_UserTyp_getNCars(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getNCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_getNCarsPtr newCallback_UserTyp_getNCars(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_getNCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserTyp_clearCars: public Callback_UserTyp_clearCars_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserTyp_clearCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_clearCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_clearCars<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_clearCars<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserTyp_clearCars<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserTyp_clearCars: public Callback_UserTyp_clearCars_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserTyp_clearCars(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_clearCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_clearCars<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_clearCars<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserTyp_clearCarsPtr newCallback_UserTyp_clearCars(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserTyp_clearCars<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DateTyp_getTimeInMillis: public Callback_DateTyp_getTimeInMillis_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Long);

	CallbackNC_DateTyp_getTimeInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTypPrx __proxy =
				::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_DateTyp_getTimeInMillisPtr newCallback_DateTyp_getTimeInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_getTimeInMillis<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DateTyp_getTimeInMillisPtr newCallback_DateTyp_getTimeInMillis(
		T* instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_getTimeInMillis<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DateTyp_getTimeInMillis: public Callback_DateTyp_getTimeInMillis_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Long, const CT&);

	Callback_DateTyp_getTimeInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTypPrx __proxy =
				::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_DateTyp_getTimeInMillisPtr newCallback_DateTyp_getTimeInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_getTimeInMillis<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTyp_getTimeInMillisPtr newCallback_DateTyp_getTimeInMillis(
		T* instance, void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_getTimeInMillis<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_DateTyp_setTimeInMillis: public Callback_DateTyp_setTimeInMillis_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_DateTyp_setTimeInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_setTimeInMillis<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_setTimeInMillis<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_setTimeInMillis<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_setTimeInMillis<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DateTyp_setTimeInMillis: public Callback_DateTyp_setTimeInMillis_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_DateTyp_setTimeInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_setTimeInMillis<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_setTimeInMillis<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_setTimeInMillis<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTyp_setTimeInMillisPtr newCallback_DateTyp_setTimeInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_setTimeInMillis<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_DateTyp_toString: public Callback_DateTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_DateTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTypPrx __proxy =
				::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_DateTyp_toStringPtr newCallback_DateTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DateTyp_toStringPtr newCallback_DateTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DateTyp_toString: public Callback_DateTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_DateTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTypPrx __proxy =
				::cardroid::data::zerocice::DateTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_DateTyp_toStringPtr newCallback_DateTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DateTyp_toStringPtr newCallback_DateTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DateTimePrefsTyp_getToleranceDays: public Callback_DateTimePrefsTyp_getToleranceDays_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_DateTimePrefsTyp_getToleranceDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
				::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getToleranceDays(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_DateTimePrefsTyp_getToleranceDaysPtr newCallback_DateTimePrefsTyp_getToleranceDays(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_getToleranceDays<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_DateTimePrefsTyp_getToleranceDaysPtr newCallback_DateTimePrefsTyp_getToleranceDays(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_getToleranceDays<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_DateTimePrefsTyp_getToleranceDays: public Callback_DateTimePrefsTyp_getToleranceDays_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_DateTimePrefsTyp_getToleranceDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
				::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getToleranceDays(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_DateTimePrefsTyp_getToleranceDaysPtr newCallback_DateTimePrefsTyp_getToleranceDays(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_getToleranceDays<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_getToleranceDaysPtr newCallback_DateTimePrefsTyp_getToleranceDays(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_getToleranceDays<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_DateTimePrefsTyp_setToleranceDays: public Callback_DateTimePrefsTyp_setToleranceDays_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_DateTimePrefsTyp_setToleranceDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setToleranceDays<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setToleranceDays<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setToleranceDays<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setToleranceDays<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_DateTimePrefsTyp_setToleranceDays: public Callback_DateTimePrefsTyp_setToleranceDays_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_DateTimePrefsTyp_setToleranceDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setToleranceDays<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setToleranceDays<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setToleranceDays<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setToleranceDaysPtr newCallback_DateTimePrefsTyp_setToleranceDays(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setToleranceDays<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_DateTimePrefsTyp_getTimePrefs: public Callback_DateTimePrefsTyp_getTimePrefs_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::cardroid::data::zerocice::TimePreferences);

	CallbackNC_DateTimePrefsTyp_getTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
				::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TimePreferences __ret;
		try {
			__ret = __proxy->end_getTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_DateTimePrefsTyp_getTimePrefsPtr newCallback_DateTimePrefsTyp_getTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::TimePreferences),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_getTimePrefs<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_DateTimePrefsTyp_getTimePrefsPtr newCallback_DateTimePrefsTyp_getTimePrefs(
		T* instance, void (T::*cb)(::cardroid::data::zerocice::TimePreferences),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_getTimePrefs<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_DateTimePrefsTyp_getTimePrefs: public Callback_DateTimePrefsTyp_getTimePrefs_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::cardroid::data::zerocice::TimePreferences,
			const CT&);

	Callback_DateTimePrefsTyp_getTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::DateTimePrefsTypPrx __proxy =
				::cardroid::data::zerocice::DateTimePrefsTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TimePreferences __ret;
		try {
			__ret = __proxy->end_getTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_DateTimePrefsTyp_getTimePrefsPtr newCallback_DateTimePrefsTyp_getTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::TimePreferences, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_getTimePrefs<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_getTimePrefsPtr newCallback_DateTimePrefsTyp_getTimePrefs(
		T* instance,
		void (T::*cb)(::cardroid::data::zerocice::TimePreferences, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_getTimePrefs<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_DateTimePrefsTyp_setTimePrefs: public Callback_DateTimePrefsTyp_setTimePrefs_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_DateTimePrefsTyp_setTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setTimePrefs<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setTimePrefs<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setTimePrefs<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_DateTimePrefsTyp_setTimePrefs<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_DateTimePrefsTyp_setTimePrefs: public Callback_DateTimePrefsTyp_setTimePrefs_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_DateTimePrefsTyp_setTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setTimePrefs<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setTimePrefs<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setTimePrefs<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_DateTimePrefsTyp_setTimePrefsPtr newCallback_DateTimePrefsTyp_setTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_DateTimePrefsTyp_setTimePrefs<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripId: public Callback_TripTyp_getTripId_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripTyp_getTripId(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTripId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripIdPtr newCallback_TripTyp_getTripId(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getTripIdPtr newCallback_TripTyp_getTripId(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripId: public Callback_TripTyp_getTripId_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripTyp_getTripId(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTripId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripIdPtr newCallback_TripTyp_getTripId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripIdPtr newCallback_TripTyp_getTripId(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setTripId: public Callback_TripTyp_setTripId_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setTripId(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripId<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripId<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setTripId: public Callback_TripTyp_setTripId_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setTripId(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripId<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripIdPtr newCallback_TripTyp_setTripId(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripId<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getPlace1: public Callback_TripTyp_getPlace1_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&);

	CallbackNC_TripTyp_getPlace1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getPlace1(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getPlace1Ptr newCallback_TripTyp_getPlace1(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getPlace1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getPlace1Ptr newCallback_TripTyp_getPlace1(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getPlace1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getPlace1: public Callback_TripTyp_getPlace1_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const CT&);

	Callback_TripTyp_getPlace1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getPlace1(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getPlace1Ptr newCallback_TripTyp_getPlace1(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getPlace1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getPlace1Ptr newCallback_TripTyp_getPlace1(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getPlace1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setPlace1: public Callback_TripTyp_setPlace1_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setPlace1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace1<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace1<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setPlace1: public Callback_TripTyp_setPlace1_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setPlace1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace1<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace1Ptr newCallback_TripTyp_setPlace1(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace1<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getPlace2: public Callback_TripTyp_getPlace2_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&);

	CallbackNC_TripTyp_getPlace2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getPlace2(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getPlace2Ptr newCallback_TripTyp_getPlace2(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getPlace2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getPlace2Ptr newCallback_TripTyp_getPlace2(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getPlace2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getPlace2: public Callback_TripTyp_getPlace2_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const CT&);

	Callback_TripTyp_getPlace2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getPlace2(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getPlace2Ptr newCallback_TripTyp_getPlace2(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getPlace2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getPlace2Ptr newCallback_TripTyp_getPlace2(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getPlace2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setPlace2: public Callback_TripTyp_setPlace2_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setPlace2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace2<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setPlace2<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setPlace2: public Callback_TripTyp_setPlace2_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setPlace2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace2<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setPlace2Ptr newCallback_TripTyp_setPlace2(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setPlace2<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripDate: public Callback_TripTyp_getTripDate_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::DateTypPtr&);

	CallbackNC_TripTyp_getTripDate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripDatePtr newCallback_TripTyp_getTripDate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getTripDatePtr newCallback_TripTyp_getTripDate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripDate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripDate: public Callback_TripTyp_getTripDate_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::DateTypPtr&,
			const CT&);

	Callback_TripTyp_getTripDate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripDatePtr newCallback_TripTyp_getTripDate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripDatePtr newCallback_TripTyp_getTripDate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setTripDate: public Callback_TripTyp_setTripDate_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setTripDate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripDate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripDate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setTripDate: public Callback_TripTyp_setTripDate_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setTripDate(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripDate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripDatePtr newCallback_TripTyp_setTripDate(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripDate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getNSeats: public Callback_TripTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripTyp_getNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getNSeatsPtr newCallback_TripTyp_getNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getNSeatsPtr newCallback_TripTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getNSeats: public Callback_TripTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripTyp_getNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getNSeatsPtr newCallback_TripTyp_getNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getNSeatsPtr newCallback_TripTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setNSeats: public Callback_TripTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setNSeats: public Callback_TripTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setNSeats(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setNSeats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setNSeatsPtr newCallback_TripTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripReturnDate: public Callback_TripTyp_getTripReturnDate_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::DateTypPtr&);

	CallbackNC_TripTyp_getTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripReturnDatePtr newCallback_TripTyp_getTripReturnDate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_getTripReturnDatePtr newCallback_TripTyp_getTripReturnDate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripReturnDate: public Callback_TripTyp_getTripReturnDate_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::DateTypPtr&,
			const CT&);

	Callback_TripTyp_getTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripReturnDatePtr newCallback_TripTyp_getTripReturnDate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripReturnDatePtr newCallback_TripTyp_getTripReturnDate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTypPtr&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_setTripReturnDate: public Callback_TripTyp_setTripReturnDate_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripReturnDate<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripReturnDate<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setTripReturnDate: public Callback_TripTyp_setTripReturnDate_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripReturnDate<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripReturnDatePtr newCallback_TripTyp_setTripReturnDate(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripReturnDate<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_hasTripReturnDate: public Callback_TripTyp_hasTripReturnDate_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripTyp_hasTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasTripReturnDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_hasTripReturnDatePtr newCallback_TripTyp_hasTripReturnDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_hasTripReturnDatePtr newCallback_TripTyp_hasTripReturnDate(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasTripReturnDate<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_hasTripReturnDate: public Callback_TripTyp_hasTripReturnDate_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripTyp_hasTripReturnDate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasTripReturnDate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_hasTripReturnDatePtr newCallback_TripTyp_hasTripReturnDate(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_hasTripReturnDatePtr newCallback_TripTyp_hasTripReturnDate(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasTripReturnDate<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripWeekDays: public Callback_TripTyp_getTripWeekDays_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::WeekdaysV&);

	CallbackNC_TripTyp_getTripWeekDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::WeekdaysV __ret;
		try {
			__ret = __proxy->end_getTripWeekDays(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripWeekDaysPtr newCallback_TripTyp_getTripWeekDays(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WeekdaysV&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripWeekDays<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getTripWeekDaysPtr newCallback_TripTyp_getTripWeekDays(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WeekdaysV&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripWeekDays<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripWeekDays: public Callback_TripTyp_getTripWeekDays_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::WeekdaysV&,
			const CT&);

	Callback_TripTyp_getTripWeekDays(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::WeekdaysV __ret;
		try {
			__ret = __proxy->end_getTripWeekDays(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripWeekDaysPtr newCallback_TripTyp_getTripWeekDays(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WeekdaysV&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripWeekDays<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripWeekDaysPtr newCallback_TripTyp_getTripWeekDays(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WeekdaysV&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripWeekDays<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripPeriodicity: public Callback_TripTyp_getTripPeriodicity_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::cardroid::data::zerocice::Periodicity);

	CallbackNC_TripTyp_getTripPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Periodicity __ret;
		try {
			__ret = __proxy->end_getTripPeriodicity(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripPeriodicityPtr newCallback_TripTyp_getTripPeriodicity(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::Periodicity),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripPeriodicity<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_getTripPeriodicityPtr newCallback_TripTyp_getTripPeriodicity(
		T* instance, void (T::*cb)(::cardroid::data::zerocice::Periodicity),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripPeriodicity<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripPeriodicity: public Callback_TripTyp_getTripPeriodicity_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::cardroid::data::zerocice::Periodicity,
			const CT&);

	Callback_TripTyp_getTripPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::Periodicity __ret;
		try {
			__ret = __proxy->end_getTripPeriodicity(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripPeriodicityPtr newCallback_TripTyp_getTripPeriodicity(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::Periodicity, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripPeriodicity<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripPeriodicityPtr newCallback_TripTyp_getTripPeriodicity(
		T* instance,
		void (T::*cb)(::cardroid::data::zerocice::Periodicity, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripPeriodicity<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_setTripWeekDaysPeriodicity: public Callback_TripTyp_setTripWeekDaysPeriodicity_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setTripWeekDaysPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripWeekDaysPeriodicity<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripWeekDaysPeriodicity<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripWeekDaysPeriodicity<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripWeekDaysPeriodicity<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setTripWeekDaysPeriodicity: public Callback_TripTyp_setTripWeekDaysPeriodicity_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setTripWeekDaysPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripWeekDaysPeriodicity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripWeekDaysPeriodicity<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripWeekDaysPeriodicity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripWeekDaysPeriodicityPtr newCallback_TripTyp_setTripWeekDaysPeriodicity(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripWeekDaysPeriodicity<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_hasWeekDaysPeriodicity: public Callback_TripTyp_hasWeekDaysPeriodicity_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripTyp_hasWeekDaysPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasWeekDaysPeriodicity(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_hasWeekDaysPeriodicityPtr newCallback_TripTyp_hasWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasWeekDaysPeriodicity<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_hasWeekDaysPeriodicityPtr newCallback_TripTyp_hasWeekDaysPeriodicity(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasWeekDaysPeriodicity<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_hasWeekDaysPeriodicity: public Callback_TripTyp_hasWeekDaysPeriodicity_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripTyp_hasWeekDaysPeriodicity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasWeekDaysPeriodicity(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_hasWeekDaysPeriodicityPtr newCallback_TripTyp_hasWeekDaysPeriodicity(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasWeekDaysPeriodicity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_hasWeekDaysPeriodicityPtr newCallback_TripTyp_hasWeekDaysPeriodicity(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasWeekDaysPeriodicity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getDistance: public Callback_TripTyp_getDistance_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripTyp_getDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getDistance(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getDistancePtr newCallback_TripTyp_getDistance(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getDistance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getDistancePtr newCallback_TripTyp_getDistance(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getDistance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getDistance: public Callback_TripTyp_getDistance_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripTyp_getDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getDistance(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getDistancePtr newCallback_TripTyp_getDistance(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getDistancePtr newCallback_TripTyp_getDistance(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_setDistance: public Callback_TripTyp_setDistance_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setDistance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setDistance<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setDistance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setDistance<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setDistance: public Callback_TripTyp_setDistance_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setDistance<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setDistancePtr newCallback_TripTyp_setDistance(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setDistance<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_hasDistance: public Callback_TripTyp_hasDistance_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripTyp_hasDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasDistance(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_hasDistancePtr newCallback_TripTyp_hasDistance(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasDistance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_hasDistancePtr newCallback_TripTyp_hasDistance(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasDistance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_hasDistance: public Callback_TripTyp_hasDistance_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripTyp_hasDistance(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasDistance(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_hasDistancePtr newCallback_TripTyp_hasDistance(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_hasDistancePtr newCallback_TripTyp_hasDistance(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasDistance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getCharacteristics: public Callback_TripTyp_getCharacteristics_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_TripTyp_getCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getCharacteristics(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getCharacteristicsPtr newCallback_TripTyp_getCharacteristics(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_getCharacteristicsPtr newCallback_TripTyp_getCharacteristics(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getCharacteristics: public Callback_TripTyp_getCharacteristics_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_TripTyp_getCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getCharacteristics(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getCharacteristicsPtr newCallback_TripTyp_getCharacteristics(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_getCharacteristicsPtr newCallback_TripTyp_getCharacteristics(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_setCharacteristics: public Callback_TripTyp_setCharacteristics_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setCharacteristics<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setCharacteristics<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setCharacteristics: public Callback_TripTyp_setCharacteristics_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setCharacteristics<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_setCharacteristicsPtr newCallback_TripTyp_setCharacteristics(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setCharacteristics<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_hasCharacteristics: public Callback_TripTyp_hasCharacteristics_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripTyp_hasCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasCharacteristics(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_hasCharacteristicsPtr newCallback_TripTyp_hasCharacteristics(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripTyp_hasCharacteristicsPtr newCallback_TripTyp_hasCharacteristics(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_hasCharacteristics<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_hasCharacteristics: public Callback_TripTyp_hasCharacteristics_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripTyp_hasCharacteristics(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_hasCharacteristics(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_hasCharacteristicsPtr newCallback_TripTyp_hasCharacteristics(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripTyp_hasCharacteristicsPtr newCallback_TripTyp_hasCharacteristics(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_hasCharacteristics<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripTyp_setTripType: public Callback_TripTyp_setTripType_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripTyp_setTripType(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripType<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_setTripType<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_setTripType: public Callback_TripTyp_setTripType_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripTyp_setTripType(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripType<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_setTripTypePtr newCallback_TripTyp_setTripType(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_setTripType<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_getTripType: public Callback_TripTyp_getTripType_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripTyp_getTripType(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTripType(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_getTripTypePtr newCallback_TripTyp_getTripType(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_getTripTypePtr newCallback_TripTyp_getTripType(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_getTripType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_getTripType: public Callback_TripTyp_getTripType_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripTyp_getTripType(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getTripType(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_getTripTypePtr newCallback_TripTyp_getTripType(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_getTripTypePtr newCallback_TripTyp_getTripType(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_getTripType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripTyp_toString: public Callback_TripTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_TripTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripTyp_toStringPtr newCallback_TripTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripTyp_toStringPtr newCallback_TripTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripTyp_toString: public Callback_TripTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_TripTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripTypPrx __proxy =
				::cardroid::data::zerocice::TripTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripTyp_toStringPtr newCallback_TripTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripTyp_toStringPtr newCallback_TripTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WaypointTyp_getNOrder: public Callback_WaypointTyp_getNOrder_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_WaypointTyp_getNOrder(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNOrder(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_WaypointTyp_getNOrderPtr newCallback_WaypointTyp_getNOrder(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_getNOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WaypointTyp_getNOrderPtr newCallback_WaypointTyp_getNOrder(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_getNOrder<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WaypointTyp_getNOrder: public Callback_WaypointTyp_getNOrder_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_WaypointTyp_getNOrder(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNOrder(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_WaypointTyp_getNOrderPtr newCallback_WaypointTyp_getNOrder(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_getNOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_getNOrderPtr newCallback_WaypointTyp_getNOrder(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_getNOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WaypointTyp_setNOrder: public Callback_WaypointTyp_setNOrder_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_WaypointTyp_setNOrder(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setNOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setNOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setNOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setNOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_WaypointTyp_setNOrder: public Callback_WaypointTyp_setNOrder_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_WaypointTyp_setNOrder(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setNOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setNOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setNOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setNOrderPtr newCallback_WaypointTyp_setNOrder(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setNOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_WaypointTyp_getWaypointPlace: public Callback_WaypointTyp_getWaypointPlace_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&);

	CallbackNC_WaypointTyp_getWaypointPlace(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getWaypointPlace(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_WaypointTyp_getWaypointPlacePtr newCallback_WaypointTyp_getWaypointPlace(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_getWaypointPlace<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_WaypointTyp_getWaypointPlacePtr newCallback_WaypointTyp_getWaypointPlace(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_getWaypointPlace<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_WaypointTyp_getWaypointPlace: public Callback_WaypointTyp_getWaypointPlace_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::PlaceTypPtr&,
			const CT&);

	Callback_WaypointTyp_getWaypointPlace(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PlaceTypPtr __ret;
		try {
			__ret = __proxy->end_getWaypointPlace(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_WaypointTyp_getWaypointPlacePtr newCallback_WaypointTyp_getWaypointPlace(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_getWaypointPlace<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_getWaypointPlacePtr newCallback_WaypointTyp_getWaypointPlace(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PlaceTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_getWaypointPlace<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_WaypointTyp_setWaypointPlace: public Callback_WaypointTyp_setWaypointPlace_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_WaypointTyp_setWaypointPlace(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setWaypointPlace<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setWaypointPlace<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setWaypointPlace<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_setWaypointPlace<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_WaypointTyp_setWaypointPlace: public Callback_WaypointTyp_setWaypointPlace_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_WaypointTyp_setWaypointPlace(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setWaypointPlace<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setWaypointPlace<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setWaypointPlace<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_setWaypointPlacePtr newCallback_WaypointTyp_setWaypointPlace(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_setWaypointPlace<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_WaypointTyp_toString: public Callback_WaypointTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_WaypointTyp_toString(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_WaypointTyp_toStringPtr newCallback_WaypointTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WaypointTyp_toStringPtr newCallback_WaypointTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_WaypointTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WaypointTyp_toString: public Callback_WaypointTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_WaypointTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::WaypointTypPrx __proxy =
				::cardroid::data::zerocice::WaypointTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_WaypointTyp_toStringPtr newCallback_WaypointTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WaypointTyp_toStringPtr newCallback_WaypointTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_WaypointTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PassengerTyp_getPassengerUser: public Callback_PassengerTyp_getPassengerUser_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_PassengerTyp_getPassengerUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getPassengerUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PassengerTyp_getPassengerUserPtr newCallback_PassengerTyp_getPassengerUser(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_getPassengerUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PassengerTyp_getPassengerUserPtr newCallback_PassengerTyp_getPassengerUser(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_getPassengerUser<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_PassengerTyp_getPassengerUser: public Callback_PassengerTyp_getPassengerUser_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_PassengerTyp_getPassengerUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getPassengerUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PassengerTyp_getPassengerUserPtr newCallback_PassengerTyp_getPassengerUser(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_getPassengerUser<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_getPassengerUserPtr newCallback_PassengerTyp_getPassengerUser(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_getPassengerUser<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_PassengerTyp_setPassengerUser: public Callback_PassengerTyp_setPassengerUser_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PassengerTyp_setPassengerUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setPassengerUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setPassengerUser<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setPassengerUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setPassengerUser<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_PassengerTyp_setPassengerUser: public Callback_PassengerTyp_setPassengerUser_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PassengerTyp_setPassengerUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setPassengerUser<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setPassengerUser<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setPassengerUser<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setPassengerUserPtr newCallback_PassengerTyp_setPassengerUser(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setPassengerUser<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_PassengerTyp_getNSeats: public Callback_PassengerTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_PassengerTyp_getNSeats(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PassengerTyp_getNSeatsPtr newCallback_PassengerTyp_getNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PassengerTyp_getNSeatsPtr newCallback_PassengerTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_getNSeats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PassengerTyp_getNSeats: public Callback_PassengerTyp_getNSeats_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_PassengerTyp_getNSeats(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNSeats(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PassengerTyp_getNSeatsPtr newCallback_PassengerTyp_getNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_getNSeats<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_getNSeatsPtr newCallback_PassengerTyp_getNSeats(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_getNSeats<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_PassengerTyp_setNSeats: public Callback_PassengerTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_PassengerTyp_setNSeats(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setNSeats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_setNSeats<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PassengerTyp_setNSeats: public Callback_PassengerTyp_setNSeats_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_PassengerTyp_setNSeats(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setNSeats<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setNSeats<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_setNSeatsPtr newCallback_PassengerTyp_setNSeats(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_setNSeats<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PassengerTyp_toString: public Callback_PassengerTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_PassengerTyp_toString(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_PassengerTyp_toStringPtr newCallback_PassengerTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PassengerTyp_toStringPtr newCallback_PassengerTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_PassengerTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PassengerTyp_toString: public Callback_PassengerTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_PassengerTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::PassengerTypPrx __proxy =
				::cardroid::data::zerocice::PassengerTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_PassengerTyp_toStringPtr newCallback_PassengerTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PassengerTyp_toStringPtr newCallback_PassengerTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_PassengerTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripDateTime: public Callback_TripOfferTyp_getTripDateTime_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimeTypPtr&);

	CallbackNC_TripOfferTyp_getTripDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimeTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDateTime(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripDateTimePtr newCallback_TripOfferTyp_getTripDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripDateTime<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getTripDateTimePtr newCallback_TripOfferTyp_getTripDateTime(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripDateTime<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripDateTime: public Callback_TripOfferTyp_getTripDateTime_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimeTypPtr&, const CT&);

	Callback_TripOfferTyp_getTripDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimeTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDateTime(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripDateTimePtr newCallback_TripOfferTyp_getTripDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripDateTime<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripDateTimePtr newCallback_TripOfferTyp_getTripDateTime(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripDateTime<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripDateTime: public Callback_TripOfferTyp_setTripDateTime_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDateTime<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDateTime<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDateTime<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDateTime<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripDateTime: public Callback_TripOfferTyp_setTripDateTime_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDateTime<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDateTime<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDateTime<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDateTimePtr newCallback_TripOfferTyp_setTripDateTime(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDateTime<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripReturnDateTime: public Callback_TripOfferTyp_getTripReturnDateTime_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimeTypPtr&);

	CallbackNC_TripOfferTyp_getTripReturnDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimeTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDateTime(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripReturnDateTimePtr newCallback_TripOfferTyp_getTripReturnDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripReturnDateTime<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_getTripReturnDateTimePtr newCallback_TripOfferTyp_getTripReturnDateTime(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripReturnDateTime<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripReturnDateTime: public Callback_TripOfferTyp_getTripReturnDateTime_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimeTypPtr&, const CT&);

	Callback_TripOfferTyp_getTripReturnDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimeTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDateTime(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripReturnDateTimePtr newCallback_TripOfferTyp_getTripReturnDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripReturnDateTime<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripReturnDateTimePtr newCallback_TripOfferTyp_getTripReturnDateTime(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimeTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripReturnDateTime<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripReturnDateTime: public Callback_TripOfferTyp_setTripReturnDateTime_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripReturnDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripReturnDateTime<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripReturnDateTime<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripReturnDateTime<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripReturnDateTime<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripReturnDateTime: public Callback_TripOfferTyp_setTripReturnDateTime_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripReturnDateTime(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripReturnDateTime<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripReturnDateTime<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripReturnDateTime<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripReturnDateTimePtr newCallback_TripOfferTyp_setTripReturnDateTime(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripReturnDateTime<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripDriver: public Callback_TripOfferTyp_getTripDriver_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_TripOfferTyp_getTripDriver(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getTripDriver(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripDriverPtr newCallback_TripOfferTyp_getTripDriver(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripDriver<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getTripDriverPtr newCallback_TripOfferTyp_getTripDriver(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripDriver<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripDriver: public Callback_TripOfferTyp_getTripDriver_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_TripOfferTyp_getTripDriver(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getTripDriver(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripDriverPtr newCallback_TripOfferTyp_getTripDriver(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripDriver<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripDriverPtr newCallback_TripOfferTyp_getTripDriver(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripDriver<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripDriver: public Callback_TripOfferTyp_setTripDriver_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripDriver(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDriver<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDriver<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDriver<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripDriver<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripDriver: public Callback_TripOfferTyp_setTripDriver_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripDriver(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDriver<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDriver<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDriver<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripDriverPtr newCallback_TripOfferTyp_setTripDriver(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripDriver<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripWaypoints: public Callback_TripOfferTyp_getTripWaypoints_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::WaypointCollection&);

	CallbackNC_TripOfferTyp_getTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::WaypointCollection __ret;
		try {
			__ret = __proxy->end_getTripWaypoints(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripWaypointsPtr newCallback_TripOfferTyp_getTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WaypointCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getTripWaypointsPtr newCallback_TripOfferTyp_getTripWaypoints(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WaypointCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripWaypoints: public Callback_TripOfferTyp_getTripWaypoints_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::WaypointCollection&, const CT&);

	Callback_TripOfferTyp_getTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::WaypointCollection __ret;
		try {
			__ret = __proxy->end_getTripWaypoints(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripWaypointsPtr newCallback_TripOfferTyp_getTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WaypointCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripWaypoints<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripWaypointsPtr newCallback_TripOfferTyp_getTripWaypoints(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::WaypointCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripWaypoints<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripWaypoints: public Callback_TripOfferTyp_setTripWaypoints_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripWaypoints<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripWaypoints<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripWaypoints: public Callback_TripOfferTyp_setTripWaypoints_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripWaypoints<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripWaypoints<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripWaypoints<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripWaypointsPtr newCallback_TripOfferTyp_setTripWaypoints(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripWaypoints<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripCar: public Callback_TripOfferTyp_getTripCar_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_TripOfferTyp_getTripCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getTripCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripCarPtr newCallback_TripOfferTyp_getTripCar(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_getTripCarPtr newCallback_TripOfferTyp_getTripCar(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripCar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripCar: public Callback_TripOfferTyp_getTripCar_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_TripOfferTyp_getTripCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getTripCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripCarPtr newCallback_TripOfferTyp_getTripCar(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripCarPtr newCallback_TripOfferTyp_getTripCar(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripCar: public Callback_TripOfferTyp_setTripCar_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripCar<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripCar<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripCar: public Callback_TripOfferTyp_setTripCar_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripCar<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripCarPtr newCallback_TripOfferTyp_setTripCar(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripCar<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getTripPassengers: public Callback_TripOfferTyp_getTripPassengers_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::PassengerCollection&);

	CallbackNC_TripOfferTyp_getTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PassengerCollection __ret;
		try {
			__ret = __proxy->end_getTripPassengers(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getTripPassengersPtr newCallback_TripOfferTyp_getTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PassengerCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getTripPassengersPtr newCallback_TripOfferTyp_getTripPassengers(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PassengerCollection&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getTripPassengers: public Callback_TripOfferTyp_getTripPassengers_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::PassengerCollection&, const CT&);

	Callback_TripOfferTyp_getTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::PassengerCollection __ret;
		try {
			__ret = __proxy->end_getTripPassengers(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getTripPassengersPtr newCallback_TripOfferTyp_getTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PassengerCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getTripPassengersPtr newCallback_TripOfferTyp_getTripPassengers(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::PassengerCollection&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setTripPassengers: public Callback_TripOfferTyp_setTripPassengers_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripPassengers<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setTripPassengers<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setTripPassengers: public Callback_TripOfferTyp_setTripPassengers_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripPassengers<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setTripPassengersPtr newCallback_TripOfferTyp_setTripPassengers(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setTripPassengers<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getPrice: public Callback_TripOfferTyp_getPrice_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Double);

	CallbackNC_TripOfferTyp_getPrice(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_getPrice(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getPricePtr newCallback_TripOfferTyp_getPrice(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getPrice<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_getPricePtr newCallback_TripOfferTyp_getPrice(
		T* instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getPrice<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getPrice: public Callback_TripOfferTyp_getPrice_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Double, const CT&);

	Callback_TripOfferTyp_getPrice(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_getPrice(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getPricePtr newCallback_TripOfferTyp_getPrice(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getPrice<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getPricePtr newCallback_TripOfferTyp_getPrice(
		T* instance, void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getPrice<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setPrice: public Callback_TripOfferTyp_setPrice_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setPrice(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setPrice<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setPrice<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setPrice<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setPrice<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setPrice: public Callback_TripOfferTyp_setPrice_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setPrice(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setPrice<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setPrice<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setPrice<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setPricePtr newCallback_TripOfferTyp_setPrice(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setPrice<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getAllowedFeatures: public Callback_TripOfferTyp_getAllowedFeatures_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::AllowedV&);

	CallbackNC_TripOfferTyp_getAllowedFeatures(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::AllowedV __ret;
		try {
			__ret = __proxy->end_getAllowedFeatures(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getAllowedFeaturesPtr newCallback_TripOfferTyp_getAllowedFeatures(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::AllowedV&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getAllowedFeatures<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getAllowedFeaturesPtr newCallback_TripOfferTyp_getAllowedFeatures(
		T* instance, void (T::*cb)(const ::cardroid::data::zerocice::AllowedV&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getAllowedFeatures<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getAllowedFeatures: public Callback_TripOfferTyp_getAllowedFeatures_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::AllowedV&,
			const CT&);

	Callback_TripOfferTyp_getAllowedFeatures(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::AllowedV __ret;
		try {
			__ret = __proxy->end_getAllowedFeatures(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getAllowedFeaturesPtr newCallback_TripOfferTyp_getAllowedFeatures(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::AllowedV&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getAllowedFeatures<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getAllowedFeaturesPtr newCallback_TripOfferTyp_getAllowedFeatures(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::AllowedV&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getAllowedFeatures<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_setAllowedFeatures: public Callback_TripOfferTyp_setAllowedFeatures_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_setAllowedFeatures(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setAllowedFeatures<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setAllowedFeatures<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setAllowedFeatures<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_setAllowedFeatures<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_setAllowedFeatures: public Callback_TripOfferTyp_setAllowedFeatures_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_setAllowedFeatures(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setAllowedFeatures<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setAllowedFeatures<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setAllowedFeatures<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_setAllowedFeaturesPtr newCallback_TripOfferTyp_setAllowedFeatures(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_setAllowedFeatures<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_addTripWaypoint: public Callback_TripOfferTyp_addTripWaypoint_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripOfferTyp_addTripWaypoint(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addTripWaypoint(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_addTripWaypointPtr newCallback_TripOfferTyp_addTripWaypoint(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_addTripWaypoint<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_addTripWaypointPtr newCallback_TripOfferTyp_addTripWaypoint(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_addTripWaypoint<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_addTripWaypoint: public Callback_TripOfferTyp_addTripWaypoint_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripOfferTyp_addTripWaypoint(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addTripWaypoint(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_addTripWaypointPtr newCallback_TripOfferTyp_addTripWaypoint(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_addTripWaypoint<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_addTripWaypointPtr newCallback_TripOfferTyp_addTripWaypoint(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_addTripWaypoint<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_removeTripWaypoint: public Callback_TripOfferTyp_removeTripWaypoint_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripOfferTyp_removeTripWaypoint(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeTripWaypoint(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_removeTripWaypointPtr newCallback_TripOfferTyp_removeTripWaypoint(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_removeTripWaypoint<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_removeTripWaypointPtr newCallback_TripOfferTyp_removeTripWaypoint(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_removeTripWaypoint<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_removeTripWaypoint: public Callback_TripOfferTyp_removeTripWaypoint_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripOfferTyp_removeTripWaypoint(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeTripWaypoint(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_removeTripWaypointPtr newCallback_TripOfferTyp_removeTripWaypoint(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_removeTripWaypoint<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_removeTripWaypointPtr newCallback_TripOfferTyp_removeTripWaypoint(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_removeTripWaypoint<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getNTripWaypoints: public Callback_TripOfferTyp_getNTripWaypoints_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripOfferTyp_getNTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNTripWaypoints(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getNTripWaypointsPtr newCallback_TripOfferTyp_getNTripWaypoints(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getNTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getNTripWaypointsPtr newCallback_TripOfferTyp_getNTripWaypoints(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getNTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getNTripWaypoints: public Callback_TripOfferTyp_getNTripWaypoints_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripOfferTyp_getNTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNTripWaypoints(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getNTripWaypointsPtr newCallback_TripOfferTyp_getNTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getNTripWaypoints<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getNTripWaypointsPtr newCallback_TripOfferTyp_getNTripWaypoints(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getNTripWaypoints<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_clearTripWaypoints: public Callback_TripOfferTyp_clearTripWaypoints_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_clearTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripWaypoints<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripWaypoints<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripWaypoints<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_clearTripWaypoints: public Callback_TripOfferTyp_clearTripWaypoints_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_clearTripWaypoints(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripWaypoints<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripWaypoints<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripWaypoints<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripWaypointsPtr newCallback_TripOfferTyp_clearTripWaypoints(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripWaypoints<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_addTripPassenger: public Callback_TripOfferTyp_addTripPassenger_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripOfferTyp_addTripPassenger(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addTripPassenger(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_addTripPassengerPtr newCallback_TripOfferTyp_addTripPassenger(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_addTripPassenger<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_addTripPassengerPtr newCallback_TripOfferTyp_addTripPassenger(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_addTripPassenger<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_addTripPassenger: public Callback_TripOfferTyp_addTripPassenger_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripOfferTyp_addTripPassenger(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_addTripPassenger(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_addTripPassengerPtr newCallback_TripOfferTyp_addTripPassenger(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_addTripPassenger<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_addTripPassengerPtr newCallback_TripOfferTyp_addTripPassenger(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_addTripPassenger<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_removeTripPassenger: public Callback_TripOfferTyp_removeTripPassenger_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_TripOfferTyp_removeTripPassenger(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeTripPassenger(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_removeTripPassengerPtr newCallback_TripOfferTyp_removeTripPassenger(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_removeTripPassenger<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_removeTripPassengerPtr newCallback_TripOfferTyp_removeTripPassenger(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_removeTripPassenger<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_removeTripPassenger: public Callback_TripOfferTyp_removeTripPassenger_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_TripOfferTyp_removeTripPassenger(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_removeTripPassenger(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_removeTripPassengerPtr newCallback_TripOfferTyp_removeTripPassenger(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_removeTripPassenger<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_removeTripPassengerPtr newCallback_TripOfferTyp_removeTripPassenger(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_removeTripPassenger<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_getNTripPassengers: public Callback_TripOfferTyp_getNTripPassengers_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Int);

	CallbackNC_TripOfferTyp_getNTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNTripPassengers(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripOfferTyp_getNTripPassengersPtr newCallback_TripOfferTyp_getNTripPassengers(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getNTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_getNTripPassengersPtr newCallback_TripOfferTyp_getNTripPassengers(
		T* instance, void (T::*cb)(::Ice::Int),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_getNTripPassengers<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_getNTripPassengers: public Callback_TripOfferTyp_getNTripPassengers_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Int, const CT&);

	Callback_TripOfferTyp_getNTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripOfferTypPrx __proxy =
				::cardroid::data::zerocice::TripOfferTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Int __ret;
		try {
			__ret = __proxy->end_getNTripPassengers(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripOfferTyp_getNTripPassengersPtr newCallback_TripOfferTyp_getNTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getNTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_getNTripPassengersPtr newCallback_TripOfferTyp_getNTripPassengers(
		T* instance, void (T::*cb)(::Ice::Int, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_getNTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripOfferTyp_clearTripPassengers: public Callback_TripOfferTyp_clearTripPassengers_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripOfferTyp_clearTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripPassengers<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripPassengers<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripPassengers<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripOfferTyp_clearTripPassengers<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripOfferTyp_clearTripPassengers: public Callback_TripOfferTyp_clearTripPassengers_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripOfferTyp_clearTripPassengers(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripPassengers<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripPassengers<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripOfferTyp_clearTripPassengersPtr newCallback_TripOfferTyp_clearTripPassengers(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripOfferTyp_clearTripPassengers<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_getTripDateTimePrefs: public Callback_TripRequestTyp_getTripDateTimePrefs_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&);

	CallbackNC_TripRequestTyp_getTripDateTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDateTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripRequestTyp_getTripDateTimePrefsPtr newCallback_TripRequestTyp_getTripDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripDateTimePrefs<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripRequestTyp_getTripDateTimePrefsPtr newCallback_TripRequestTyp_getTripDateTimePrefs(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripDateTimePrefs<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_getTripDateTimePrefs: public Callback_TripRequestTyp_getTripDateTimePrefs_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&, const CT&);

	Callback_TripRequestTyp_getTripDateTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
		try {
			__ret = __proxy->end_getTripDateTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripRequestTyp_getTripDateTimePrefsPtr newCallback_TripRequestTyp_getTripDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripDateTimePrefs<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_getTripDateTimePrefsPtr newCallback_TripRequestTyp_getTripDateTimePrefs(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripDateTimePrefs<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_setTripDateTimePrefs: public Callback_TripRequestTyp_setTripDateTimePrefs_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripRequestTyp_setTripDateTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripDateTimePrefs<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripDateTimePrefs<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripDateTimePrefs<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripDateTimePrefs<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_setTripDateTimePrefs: public Callback_TripRequestTyp_setTripDateTimePrefs_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripRequestTyp_setTripDateTimePrefs(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripDateTimePrefs<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripDateTimePrefs<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripDateTimePrefs<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripDateTimePrefsPtr newCallback_TripRequestTyp_setTripDateTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripDateTimePrefs<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_getTripReturnDateTimePrefs: public Callback_TripRequestTyp_getTripReturnDateTimePrefs_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&);

	CallbackNC_TripRequestTyp_getTripReturnDateTimePrefs(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDateTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_getTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripReturnDateTimePrefs<T>(instance,
			cb, excb, sentcb);
}

template<class T> Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_getTripReturnDateTimePrefs(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripReturnDateTimePrefs<T>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_getTripReturnDateTimePrefs: public Callback_TripRequestTyp_getTripReturnDateTimePrefs_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::DateTimePrefsTypPtr&, const CT&);

	Callback_TripRequestTyp_getTripReturnDateTimePrefs(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::DateTimePrefsTypPtr __ret;
		try {
			__ret = __proxy->end_getTripReturnDateTimePrefs(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_getTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripReturnDateTimePrefs<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_getTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_getTripReturnDateTimePrefs(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::DateTimePrefsTypPtr&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripReturnDateTimePrefs<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs: public Callback_TripRequestTyp_setTripReturnDateTimePrefs_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs<T>(instance,
			cb, excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs<T>(instance,
			0, excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs<T>(instance,
			cb, excb, sentcb);
}

template<class T> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripReturnDateTimePrefs<T>(instance,
			0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_setTripReturnDateTimePrefs: public Callback_TripRequestTyp_setTripReturnDateTimePrefs_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripRequestTyp_setTripReturnDateTimePrefs(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripReturnDateTimePrefs<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripReturnDateTimePrefs<T, CT>(
			instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripReturnDateTimePrefs<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripReturnDateTimePrefsPtr newCallback_TripRequestTyp_setTripReturnDateTimePrefs(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripReturnDateTimePrefs<T, CT>(
			instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_getTripRequester: public Callback_TripRequestTyp_getTripRequester_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_TripRequestTyp_getTripRequester(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getTripRequester(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_TripRequestTyp_getTripRequesterPtr newCallback_TripRequestTyp_getTripRequester(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripRequester<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripRequestTyp_getTripRequesterPtr newCallback_TripRequestTyp_getTripRequester(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_getTripRequester<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_getTripRequester: public Callback_TripRequestTyp_getTripRequester_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_TripRequestTyp_getTripRequester(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::TripRequestTypPrx __proxy =
				::cardroid::data::zerocice::TripRequestTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getTripRequester(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_TripRequestTyp_getTripRequesterPtr newCallback_TripRequestTyp_getTripRequester(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripRequester<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_getTripRequesterPtr newCallback_TripRequestTyp_getTripRequester(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_getTripRequester<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_TripRequestTyp_setTripRequester: public Callback_TripRequestTyp_setTripRequester_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_TripRequestTyp_setTripRequester(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripRequester<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripRequester<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripRequester<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_TripRequestTyp_setTripRequester<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_TripRequestTyp_setTripRequester: public Callback_TripRequestTyp_setTripRequester_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_TripRequestTyp_setTripRequester(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripRequester<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripRequester<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripRequester<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_TripRequestTyp_setTripRequesterPtr newCallback_TripRequestTyp_setTripRequester(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_TripRequestTyp_setTripRequester<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_getActivityUser: public Callback_UserActivityTyp_getActivityUser_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_UserActivityTyp_getActivityUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getActivityUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserActivityTyp_getActivityUserPtr newCallback_UserActivityTyp_getActivityUser(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getActivityUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_getActivityUserPtr newCallback_UserActivityTyp_getActivityUser(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getActivityUser<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_getActivityUser: public Callback_UserActivityTyp_getActivityUser_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_UserActivityTyp_getActivityUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getActivityUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserActivityTyp_getActivityUserPtr newCallback_UserActivityTyp_getActivityUser(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getActivityUser<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_getActivityUserPtr newCallback_UserActivityTyp_getActivityUser(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getActivityUser<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_setActivityUser: public Callback_UserActivityTyp_setActivityUser_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserActivityTyp_setActivityUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityUser<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityUser<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_setActivityUser: public Callback_UserActivityTyp_setActivityUser_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserActivityTyp_setActivityUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityUser<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityUser<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityUser<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityUserPtr newCallback_UserActivityTyp_setActivityUser(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityUser<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_getActivityTrip: public Callback_UserActivityTyp_getActivityTrip_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&);

	CallbackNC_UserActivityTyp_getActivityTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_getActivityTrip(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserActivityTyp_getActivityTripPtr newCallback_UserActivityTyp_getActivityTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getActivityTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_getActivityTripPtr newCallback_UserActivityTyp_getActivityTrip(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getActivityTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_getActivityTrip: public Callback_UserActivityTyp_getActivityTrip_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&, const CT&);

	Callback_UserActivityTyp_getActivityTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_getActivityTrip(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserActivityTyp_getActivityTripPtr newCallback_UserActivityTyp_getActivityTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getActivityTrip<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_getActivityTripPtr newCallback_UserActivityTyp_getActivityTrip(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getActivityTrip<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_setActivityTrip: public Callback_UserActivityTyp_setActivityTrip_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserActivityTyp_setActivityTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityTrip<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setActivityTrip<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_setActivityTrip: public Callback_UserActivityTyp_setActivityTrip_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserActivityTyp_setActivityTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityTrip<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityTrip<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityTrip<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setActivityTripPtr newCallback_UserActivityTyp_setActivityTrip(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setActivityTrip<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_getUserActivityType: public Callback_UserActivityTyp_getUserActivityType_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::cardroid::data::zerocice::ActivityType);

	CallbackNC_UserActivityTyp_getUserActivityType(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::ActivityType __ret;
		try {
			__ret = __proxy->end_getUserActivityType(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserActivityTyp_getUserActivityTypePtr newCallback_UserActivityTyp_getUserActivityType(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::ActivityType),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getUserActivityType<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_getUserActivityTypePtr newCallback_UserActivityTyp_getUserActivityType(
		T* instance, void (T::*cb)(::cardroid::data::zerocice::ActivityType),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getUserActivityType<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_getUserActivityType: public Callback_UserActivityTyp_getUserActivityType_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::cardroid::data::zerocice::ActivityType,
			const CT&);

	Callback_UserActivityTyp_getUserActivityType(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::ActivityType __ret;
		try {
			__ret = __proxy->end_getUserActivityType(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserActivityTyp_getUserActivityTypePtr newCallback_UserActivityTyp_getUserActivityType(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::cardroid::data::zerocice::ActivityType, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getUserActivityType<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_getUserActivityTypePtr newCallback_UserActivityTyp_getUserActivityType(
		T* instance,
		void (T::*cb)(::cardroid::data::zerocice::ActivityType, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getUserActivityType<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_setUserActivityType: public Callback_UserActivityTyp_setUserActivityType_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserActivityTyp_setUserActivityType(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setUserActivityType<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setUserActivityType<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setUserActivityType<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setUserActivityType<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_setUserActivityType: public Callback_UserActivityTyp_setUserActivityType_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserActivityTyp_setUserActivityType(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setUserActivityType<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setUserActivityType<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setUserActivityType<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setUserActivityTypePtr newCallback_UserActivityTyp_setUserActivityType(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setUserActivityType<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_getTimeStampInMillis: public Callback_UserActivityTyp_getTimeStampInMillis_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Long);

	CallbackNC_UserActivityTyp_getTimeStampInMillis(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeStampInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserActivityTyp_getTimeStampInMillisPtr newCallback_UserActivityTyp_getTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getTimeStampInMillis<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_getTimeStampInMillisPtr newCallback_UserActivityTyp_getTimeStampInMillis(
		T* instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_getTimeStampInMillis<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_getTimeStampInMillis: public Callback_UserActivityTyp_getTimeStampInMillis_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Long, const CT&);

	Callback_UserActivityTyp_getTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeStampInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserActivityTyp_getTimeStampInMillisPtr newCallback_UserActivityTyp_getTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getTimeStampInMillis<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_getTimeStampInMillisPtr newCallback_UserActivityTyp_getTimeStampInMillis(
		T* instance, void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_getTimeStampInMillis<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_setTimeStampInMillis: public Callback_UserActivityTyp_setTimeStampInMillis_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_UserActivityTyp_setTimeStampInMillis(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setTimeStampInMillis<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setTimeStampInMillis<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setTimeStampInMillis<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_setTimeStampInMillis<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_setTimeStampInMillis: public Callback_UserActivityTyp_setTimeStampInMillis_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_UserActivityTyp_setTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setTimeStampInMillis<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setTimeStampInMillis<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setTimeStampInMillis<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_setTimeStampInMillisPtr newCallback_UserActivityTyp_setTimeStampInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_setTimeStampInMillis<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_UserActivityTyp_toString: public Callback_UserActivityTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_UserActivityTyp_toString(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_UserActivityTyp_toStringPtr newCallback_UserActivityTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_toString<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_UserActivityTyp_toStringPtr newCallback_UserActivityTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_UserActivityTyp_toString<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_UserActivityTyp_toString: public Callback_UserActivityTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_UserActivityTyp_toString(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::UserActivityTypPrx __proxy =
				::cardroid::data::zerocice::UserActivityTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_UserActivityTyp_toStringPtr newCallback_UserActivityTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_toString<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_UserActivityTyp_toStringPtr newCallback_UserActivityTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_UserActivityTyp_toString<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_MessageTyp_getUser1: public Callback_MessageTyp_getUser1_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_MessageTyp_getUser1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUser1(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_MessageTyp_getUser1Ptr newCallback_MessageTyp_getUser1(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getUser1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_getUser1Ptr newCallback_MessageTyp_getUser1(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getUser1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_getUser1: public Callback_MessageTyp_getUser1_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_MessageTyp_getUser1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUser1(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_MessageTyp_getUser1Ptr newCallback_MessageTyp_getUser1(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getUser1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_getUser1Ptr newCallback_MessageTyp_getUser1(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getUser1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_setUser1: public Callback_MessageTyp_setUser1_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_MessageTyp_setUser1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser1<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser1<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_setUser1: public Callback_MessageTyp_setUser1_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_MessageTyp_setUser1(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser1<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser1Ptr newCallback_MessageTyp_setUser1(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser1<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_getUser2: public Callback_MessageTyp_getUser2_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_MessageTyp_getUser2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUser2(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_MessageTyp_getUser2Ptr newCallback_MessageTyp_getUser2(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getUser2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_getUser2Ptr newCallback_MessageTyp_getUser2(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getUser2<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_getUser2: public Callback_MessageTyp_getUser2_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_MessageTyp_getUser2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUser2(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_MessageTyp_getUser2Ptr newCallback_MessageTyp_getUser2(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getUser2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_getUser2Ptr newCallback_MessageTyp_getUser2(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getUser2<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_setUser2: public Callback_MessageTyp_setUser2_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_MessageTyp_setUser2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser2<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser2<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setUser2<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_setUser2: public Callback_MessageTyp_setUser2_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_MessageTyp_setUser2(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser2<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser2<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setUser2Ptr newCallback_MessageTyp_setUser2(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setUser2<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_getMessageText: public Callback_MessageTyp_getMessageText_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_MessageTyp_getMessageText(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getMessageText(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_MessageTyp_getMessageTextPtr newCallback_MessageTyp_getMessageText(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getMessageText<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_getMessageTextPtr newCallback_MessageTyp_getMessageText(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getMessageText<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_getMessageText: public Callback_MessageTyp_getMessageText_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_MessageTyp_getMessageText(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_getMessageText(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_MessageTyp_getMessageTextPtr newCallback_MessageTyp_getMessageText(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getMessageText<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_MessageTyp_getMessageTextPtr newCallback_MessageTyp_getMessageText(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getMessageText<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_MessageTyp_setMessageText: public Callback_MessageTyp_setMessageText_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_MessageTyp_setMessageText(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setMessageText<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setMessageText<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setMessageText<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setMessageText<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_setMessageText: public Callback_MessageTyp_setMessageText_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_MessageTyp_setMessageText(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setMessageText<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setMessageText<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setMessageText<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setMessageTextPtr newCallback_MessageTyp_setMessageText(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setMessageText<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_MessageTyp_getTimeStampInMillis: public Callback_MessageTyp_getTimeStampInMillis_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Long);

	CallbackNC_MessageTyp_getTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeStampInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_MessageTyp_getTimeStampInMillisPtr newCallback_MessageTyp_getTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getTimeStampInMillis<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_getTimeStampInMillisPtr newCallback_MessageTyp_getTimeStampInMillis(
		T* instance, void (T::*cb)(::Ice::Long),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_getTimeStampInMillis<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_getTimeStampInMillis: public Callback_MessageTyp_getTimeStampInMillis_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Long, const CT&);

	Callback_MessageTyp_getTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Long __ret;
		try {
			__ret = __proxy->end_getTimeStampInMillis(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_MessageTyp_getTimeStampInMillisPtr newCallback_MessageTyp_getTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getTimeStampInMillis<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_getTimeStampInMillisPtr newCallback_MessageTyp_getTimeStampInMillis(
		T* instance, void (T::*cb)(::Ice::Long, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_getTimeStampInMillis<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_setTimeStampInMillis: public Callback_MessageTyp_setTimeStampInMillis_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_MessageTyp_setTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setTimeStampInMillis<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setTimeStampInMillis<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setTimeStampInMillis<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_setTimeStampInMillis<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_setTimeStampInMillis: public Callback_MessageTyp_setTimeStampInMillis_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_MessageTyp_setTimeStampInMillis(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setTimeStampInMillis<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setTimeStampInMillis<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setTimeStampInMillis<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_setTimeStampInMillisPtr newCallback_MessageTyp_setTimeStampInMillis(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_setTimeStampInMillis<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T>
class CallbackNC_MessageTyp_toString: public Callback_MessageTyp_toString_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::std::string&);

	CallbackNC_MessageTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_MessageTyp_toStringPtr newCallback_MessageTyp_toString(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MessageTyp_toStringPtr newCallback_MessageTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_MessageTyp_toString<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MessageTyp_toString: public Callback_MessageTyp_toString_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::std::string&, const CT&);

	Callback_MessageTyp_toString(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::data::zerocice::MessageTypPrx __proxy =
				::cardroid::data::zerocice::MessageTypPrx::uncheckedCast(
						__result->getProxy());
		::std::string __ret;
		try {
			__ret = __proxy->end_toString(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_MessageTyp_toStringPtr newCallback_MessageTyp_toString(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MessageTyp_toStringPtr newCallback_MessageTyp_toString(
		T* instance, void (T::*cb)(const ::std::string&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_MessageTyp_toString<T, CT>(instance, cb, excb, sentcb);
}

}

}

template<class T>
class CallbackNC_QueryResult_next: public Callback_QueryResult_next_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, bool);

	CallbackNC_QueryResult_next(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::QueryResultPrx __proxy =
				::cardroid::QueryResultPrx::uncheckedCast(__result->getProxy());
		bool destroyed;
		::cardroid::ResultSeq __ret;
		try {
			__ret = __proxy->end_next(destroyed, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret,
					destroyed);
		}
	}

	Response response;
};

template<class T> Callback_QueryResult_nextPtr newCallback_QueryResult_next(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_next<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryResult_nextPtr newCallback_QueryResult_next(
		T* instance, void (T::*cb)(const ::cardroid::ResultSeq&, bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_next<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryResult_next: public Callback_QueryResult_next_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, bool, const CT&);

	Callback_QueryResult_next(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::QueryResultPrx __proxy =
				::cardroid::QueryResultPrx::uncheckedCast(__result->getProxy());
		bool destroyed;
		::cardroid::ResultSeq __ret;
		try {
			__ret = __proxy->end_next(destroyed, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					destroyed, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_QueryResult_nextPtr newCallback_QueryResult_next(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryResult_nextPtr newCallback_QueryResult_next(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_next<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QueryResult_destroy: public Callback_QueryResult_destroy_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_QueryResult_destroy(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_QueryResult_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryResult_destroy: public Callback_QueryResult_destroy_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_QueryResult_destroy(const TPtr& obj, Response cb, Exception excb,
			Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryResult_destroyPtr newCallback_QueryResult_destroy(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_QueryResult_destroy<T, CT>(instance, 0, excb, sentcb);
}

namespace zerocice {

template<class T>
class CallbackNC_CardroidManager_getUserPlaces: public Callback_CardroidManager_getUserPlaces_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getUserPlaces(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserPlaces(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getUserPlacesPtr newCallback_CardroidManager_getUserPlaces(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserPlaces<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getUserPlacesPtr newCallback_CardroidManager_getUserPlaces(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserPlaces<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getUserPlaces: public Callback_CardroidManager_getUserPlaces_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getUserPlaces(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserPlaces(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getUserPlacesPtr newCallback_CardroidManager_getUserPlaces(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserPlaces<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getUserPlacesPtr newCallback_CardroidManager_getUserPlaces(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserPlaces<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_searchTrips: public Callback_CardroidManager_searchTrips_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_searchTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_searchTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_searchTripsPtr newCallback_CardroidManager_searchTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_searchTrips<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_searchTripsPtr newCallback_CardroidManager_searchTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_searchTrips<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_searchTrips: public Callback_CardroidManager_searchTrips_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_searchTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_searchTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_searchTripsPtr newCallback_CardroidManager_searchTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_searchTrips<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_searchTripsPtr newCallback_CardroidManager_searchTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_searchTrips<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getTripFromId: public Callback_CardroidManager_getTripFromId_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::TripTypPrx&);

	CallbackNC_CardroidManager_getTripFromId(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripTypPrx __ret;
		try {
			__ret = __proxy->end_getTripFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getTripFromIdPtr newCallback_CardroidManager_getTripFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripFromId<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getTripFromIdPtr newCallback_CardroidManager_getTripFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripFromId<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getTripFromId: public Callback_CardroidManager_getTripFromId_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::TripTypPrx&,
			const CT&);

	Callback_CardroidManager_getTripFromId(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripTypPrx __ret;
		try {
			__ret = __proxy->end_getTripFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getTripFromIdPtr newCallback_CardroidManager_getTripFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripFromId<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getTripFromIdPtr newCallback_CardroidManager_getTripFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripFromId<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getTripOfferFromId: public Callback_CardroidManager_getTripOfferFromId_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&);

	CallbackNC_CardroidManager_getTripOfferFromId(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_getTripOfferFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getTripOfferFromIdPtr newCallback_CardroidManager_getTripOfferFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripOfferFromId<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_getTripOfferFromIdPtr newCallback_CardroidManager_getTripOfferFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripOfferFromId<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getTripOfferFromId: public Callback_CardroidManager_getTripOfferFromId_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&, const CT&);

	Callback_CardroidManager_getTripOfferFromId(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_getTripOfferFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getTripOfferFromIdPtr newCallback_CardroidManager_getTripOfferFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripOfferFromId<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getTripOfferFromIdPtr newCallback_CardroidManager_getTripOfferFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripOfferFromId<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getTripRequestFromId: public Callback_CardroidManager_getTripRequestFromId_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripRequestTypPrx&);

	CallbackNC_CardroidManager_getTripRequestFromId(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripRequestTypPrx __ret;
		try {
			__ret = __proxy->end_getTripRequestFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getTripRequestFromIdPtr newCallback_CardroidManager_getTripRequestFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripRequestFromId<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_getTripRequestFromIdPtr newCallback_CardroidManager_getTripRequestFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getTripRequestFromId<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getTripRequestFromId: public Callback_CardroidManager_getTripRequestFromId_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripRequestTypPrx&, const CT&);

	Callback_CardroidManager_getTripRequestFromId(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripRequestTypPrx __ret;
		try {
			__ret = __proxy->end_getTripRequestFromId(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getTripRequestFromIdPtr newCallback_CardroidManager_getTripRequestFromId(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripRequestFromId<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getTripRequestFromIdPtr newCallback_CardroidManager_getTripRequestFromId(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getTripRequestFromId<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_joinTrip: public Callback_CardroidManager_joinTrip_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CardroidManager_joinTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_joinTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_joinTrip<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_joinTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_joinTrip<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_joinTrip: public Callback_CardroidManager_joinTrip_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CardroidManager_joinTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_joinTrip<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_joinTrip<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_joinTrip<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_joinTripPtr newCallback_CardroidManager_joinTrip(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_joinTrip<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_organizeTrip: public Callback_CardroidManager_organizeTrip_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&);

	CallbackNC_CardroidManager_organizeTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_organizeTrip(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_organizeTripPtr newCallback_CardroidManager_organizeTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_organizeTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_organizeTripPtr newCallback_CardroidManager_organizeTrip(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_organizeTrip<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_organizeTrip: public Callback_CardroidManager_organizeTrip_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&, const CT&);

	Callback_CardroidManager_organizeTrip(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_organizeTrip(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_organizeTripPtr newCallback_CardroidManager_organizeTrip(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_organizeTrip<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_organizeTripPtr newCallback_CardroidManager_organizeTrip(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_organizeTrip<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getUserTrips: public Callback_CardroidManager_getUserTrips_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getUserTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getUserTripsPtr newCallback_CardroidManager_getUserTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserTrips<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getUserTripsPtr newCallback_CardroidManager_getUserTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserTrips<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getUserTrips: public Callback_CardroidManager_getUserTrips_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getUserTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getUserTripsPtr newCallback_CardroidManager_getUserTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserTrips<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getUserTripsPtr newCallback_CardroidManager_getUserTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserTrips<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getPassengerTrips: public Callback_CardroidManager_getPassengerTrips_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getPassengerTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getPassengerTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getPassengerTripsPtr newCallback_CardroidManager_getPassengerTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getPassengerTrips<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_getPassengerTripsPtr newCallback_CardroidManager_getPassengerTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getPassengerTrips<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getPassengerTrips: public Callback_CardroidManager_getPassengerTrips_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getPassengerTrips(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getPassengerTrips(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getPassengerTripsPtr newCallback_CardroidManager_getPassengerTrips(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getPassengerTrips<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getPassengerTripsPtr newCallback_CardroidManager_getPassengerTrips(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getPassengerTrips<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_userTripRegistered: public Callback_CardroidManager_userTripRegistered_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_CardroidManager_userTripRegistered(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_userTripRegistered(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_userTripRegisteredPtr newCallback_CardroidManager_userTripRegistered(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_userTripRegistered<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_userTripRegisteredPtr newCallback_CardroidManager_userTripRegistered(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_userTripRegistered<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_userTripRegistered: public Callback_CardroidManager_userTripRegistered_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_CardroidManager_userTripRegistered(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_userTripRegistered(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_userTripRegisteredPtr newCallback_CardroidManager_userTripRegistered(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_userTripRegistered<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_userTripRegisteredPtr newCallback_CardroidManager_userTripRegistered(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_userTripRegistered<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_calculatePriceEstimation: public Callback_CardroidManager_calculatePriceEstimation_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(::Ice::Double);

	CallbackNC_CardroidManager_calculatePriceEstimation(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_calculatePriceEstimation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_calculatePriceEstimationPtr newCallback_CardroidManager_calculatePriceEstimation(
		const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_calculatePriceEstimation<T>(instance,
			cb, excb, sentcb);
}

template<class T> Callback_CardroidManager_calculatePriceEstimationPtr newCallback_CardroidManager_calculatePriceEstimation(
		T* instance, void (T::*cb)(::Ice::Double),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_calculatePriceEstimation<T>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_calculatePriceEstimation: public Callback_CardroidManager_calculatePriceEstimation_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(::Ice::Double, const CT&);

	Callback_CardroidManager_calculatePriceEstimation(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::Ice::Double __ret;
		try {
			__ret = __proxy->end_calculatePriceEstimation(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_calculatePriceEstimationPtr newCallback_CardroidManager_calculatePriceEstimation(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_calculatePriceEstimation<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_calculatePriceEstimationPtr newCallback_CardroidManager_calculatePriceEstimation(
		T* instance, void (T::*cb)(::Ice::Double, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_calculatePriceEstimation<T, CT>(
			instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_newTripOffer: public Callback_CardroidManager_newTripOffer_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&);

	CallbackNC_CardroidManager_newTripOffer(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_newTripOffer(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_newTripOfferPtr newCallback_CardroidManager_newTripOffer(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newTripOffer<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_newTripOfferPtr newCallback_CardroidManager_newTripOffer(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newTripOffer<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_newTripOffer: public Callback_CardroidManager_newTripOffer_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripOfferTypPrx&, const CT&);

	Callback_CardroidManager_newTripOffer(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripOfferTypPrx __ret;
		try {
			__ret = __proxy->end_newTripOffer(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_newTripOfferPtr newCallback_CardroidManager_newTripOffer(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newTripOffer<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_newTripOfferPtr newCallback_CardroidManager_newTripOffer(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripOfferTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newTripOffer<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_newTripRequest: public Callback_CardroidManager_newTripRequest_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripRequestTypPrx&);

	CallbackNC_CardroidManager_newTripRequest(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripRequestTypPrx __ret;
		try {
			__ret = __proxy->end_newTripRequest(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_newTripRequestPtr newCallback_CardroidManager_newTripRequest(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newTripRequest<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_newTripRequestPtr newCallback_CardroidManager_newTripRequest(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newTripRequest<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_newTripRequest: public Callback_CardroidManager_newTripRequest_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::TripRequestTypPrx&, const CT&);

	Callback_CardroidManager_newTripRequest(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::TripRequestTypPrx __ret;
		try {
			__ret = __proxy->end_newTripRequest(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_newTripRequestPtr newCallback_CardroidManager_newTripRequest(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newTripRequest<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_newTripRequestPtr newCallback_CardroidManager_newTripRequest(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::TripRequestTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newTripRequest<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getMessageTalksSpeakers: public Callback_CardroidManager_getMessageTalksSpeakers_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getMessageTalksSpeakers(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getMessageTalksSpeakers(first, nrows, result,
					__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getMessageTalksSpeakersPtr newCallback_CardroidManager_getMessageTalksSpeakers(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getMessageTalksSpeakers<T>(instance,
			cb, excb, sentcb);
}

template<class T> Callback_CardroidManager_getMessageTalksSpeakersPtr newCallback_CardroidManager_getMessageTalksSpeakers(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getMessageTalksSpeakers<T>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getMessageTalksSpeakers: public Callback_CardroidManager_getMessageTalksSpeakers_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getMessageTalksSpeakers(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getMessageTalksSpeakers(first, nrows, result,
					__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getMessageTalksSpeakersPtr newCallback_CardroidManager_getMessageTalksSpeakers(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getMessageTalksSpeakers<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getMessageTalksSpeakersPtr newCallback_CardroidManager_getMessageTalksSpeakers(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getMessageTalksSpeakers<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getMessageTalks: public Callback_CardroidManager_getMessageTalks_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getMessageTalks(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getMessageTalks(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getMessageTalksPtr newCallback_CardroidManager_getMessageTalks(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getMessageTalks<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getMessageTalksPtr newCallback_CardroidManager_getMessageTalks(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getMessageTalks<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getMessageTalks: public Callback_CardroidManager_getMessageTalks_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getMessageTalks(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getMessageTalks(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getMessageTalksPtr newCallback_CardroidManager_getMessageTalks(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getMessageTalks<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getMessageTalksPtr newCallback_CardroidManager_getMessageTalks(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getMessageTalks<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_newMessage: public Callback_CardroidManager_newMessage_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::MessageTypPrx&);

	CallbackNC_CardroidManager_newMessage(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::MessageTypPrx __ret;
		try {
			__ret = __proxy->end_newMessage(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_newMessagePtr newCallback_CardroidManager_newMessage(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::MessageTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newMessage<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_newMessagePtr newCallback_CardroidManager_newMessage(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::MessageTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_newMessage<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_newMessage: public Callback_CardroidManager_newMessage_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(
			const ::cardroid::data::zerocice::MessageTypPrx&, const CT&);

	Callback_CardroidManager_newMessage(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::MessageTypPrx __ret;
		try {
			__ret = __proxy->end_newMessage(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_newMessagePtr newCallback_CardroidManager_newMessage(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::MessageTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newMessage<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_newMessagePtr newCallback_CardroidManager_newMessage(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::MessageTypPrx&,
				const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_newMessage<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getUserActivity: public Callback_CardroidManager_getUserActivity_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&);

	CallbackNC_CardroidManager_getUserActivity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserActivity(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(first,
					nrows, result);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getUserActivityPtr newCallback_CardroidManager_getUserActivity(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserActivity<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getUserActivityPtr newCallback_CardroidManager_getUserActivity(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserActivity<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getUserActivity: public Callback_CardroidManager_getUserActivity_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::ResultSeq&, ::Ice::Int,
			const ::cardroid::QueryResultPrx&, const CT&);

	Callback_CardroidManager_getUserActivity(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::ResultSeq first;
		::Ice::Int nrows;
		::cardroid::QueryResultPrx result;
		try {
			__proxy->end_getUserActivity(first, nrows, result, __result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(first,
					nrows, result, CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getUserActivityPtr newCallback_CardroidManager_getUserActivity(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserActivity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getUserActivityPtr newCallback_CardroidManager_getUserActivity(
		T* instance,
		void (T::*cb)(const ::cardroid::ResultSeq&, ::Ice::Int,
				const ::cardroid::QueryResultPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserActivity<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getUserFromEmail: public Callback_CardroidManager_getUserFromEmail_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_CardroidManager_getUserFromEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUserFromEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getUserFromEmailPtr newCallback_CardroidManager_getUserFromEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserFromEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_getUserFromEmailPtr newCallback_CardroidManager_getUserFromEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getUserFromEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getUserFromEmail: public Callback_CardroidManager_getUserFromEmail_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_CardroidManager_getUserFromEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_getUserFromEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getUserFromEmailPtr newCallback_CardroidManager_getUserFromEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserFromEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getUserFromEmailPtr newCallback_CardroidManager_getUserFromEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getUserFromEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getCarFromPlate: public Callback_CardroidManager_getCarFromPlate_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_getCarFromPlate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getCarFromPlate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getCarFromPlatePtr newCallback_CardroidManager_getCarFromPlate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getCarFromPlate<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_getCarFromPlatePtr newCallback_CardroidManager_getCarFromPlate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getCarFromPlate<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getCarFromPlate: public Callback_CardroidManager_getCarFromPlate_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_getCarFromPlate(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getCarFromPlate(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getCarFromPlatePtr newCallback_CardroidManager_getCarFromPlate(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getCarFromPlate<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getCarFromPlatePtr newCallback_CardroidManager_getCarFromPlate(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getCarFromPlate<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_getCarFromPlateEmail: public Callback_CardroidManager_getCarFromPlateEmail_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_getCarFromPlateEmail(const TPtr& obj,
			Response cb, Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getCarFromPlateEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_getCarFromPlateEmailPtr newCallback_CardroidManager_getCarFromPlateEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getCarFromPlateEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_getCarFromPlateEmailPtr newCallback_CardroidManager_getCarFromPlateEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_getCarFromPlateEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_getCarFromPlateEmail: public Callback_CardroidManager_getCarFromPlateEmail_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_getCarFromPlateEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_getCarFromPlateEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_getCarFromPlateEmailPtr newCallback_CardroidManager_getCarFromPlateEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getCarFromPlateEmail<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_getCarFromPlateEmailPtr newCallback_CardroidManager_getCarFromPlateEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_getCarFromPlateEmail<T, CT>(instance,
			cb, excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_updateUserData: public Callback_CardroidManager_updateUserData_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&);

	CallbackNC_CardroidManager_updateUserData(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_updateUserData(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_updateUserDataPtr newCallback_CardroidManager_updateUserData(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateUserData<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_updateUserDataPtr newCallback_CardroidManager_updateUserData(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateUserData<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_updateUserData: public Callback_CardroidManager_updateUserData_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::UserTypPrx&,
			const CT&);

	Callback_CardroidManager_updateUserData(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::UserTypPrx __ret;
		try {
			__ret = __proxy->end_updateUserData(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_updateUserDataPtr newCallback_CardroidManager_updateUserData(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateUserData<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_updateUserDataPtr newCallback_CardroidManager_updateUserData(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::UserTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateUserData<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_updateCarData: public Callback_CardroidManager_updateCarData_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_updateCarData(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_updateCarData(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_updateCarDataPtr newCallback_CardroidManager_updateCarData(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateCarData<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_updateCarDataPtr newCallback_CardroidManager_updateCarData(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateCarData<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_updateCarData: public Callback_CardroidManager_updateCarData_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_updateCarData(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_updateCarData(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_updateCarDataPtr newCallback_CardroidManager_updateCarData(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateCarData<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_updateCarDataPtr newCallback_CardroidManager_updateCarData(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateCarData<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_updateCarDataEmail: public Callback_CardroidManager_updateCarDataEmail_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_updateCarDataEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_updateCarDataEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_updateCarDataEmailPtr newCallback_CardroidManager_updateCarDataEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateCarDataEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_updateCarDataEmailPtr newCallback_CardroidManager_updateCarDataEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_updateCarDataEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_updateCarDataEmail: public Callback_CardroidManager_updateCarDataEmail_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_updateCarDataEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_updateCarDataEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_updateCarDataEmailPtr newCallback_CardroidManager_updateCarDataEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateCarDataEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_updateCarDataEmailPtr newCallback_CardroidManager_updateCarDataEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_updateCarDataEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T>
class CallbackNC_CardroidManager_addCar: public Callback_CardroidManager_addCar_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_addCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_addCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_addCarPtr newCallback_CardroidManager_addCar(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_addCar<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CardroidManager_addCarPtr newCallback_CardroidManager_addCar(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_addCar<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_addCar: public Callback_CardroidManager_addCar_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_addCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_addCar(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_addCarPtr newCallback_CardroidManager_addCar(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_addCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_addCarPtr newCallback_CardroidManager_addCar(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_addCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_addCarEmail: public Callback_CardroidManager_addCarEmail_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&);

	CallbackNC_CardroidManager_addCarEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_addCarEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_CardroidManager_addCarEmailPtr newCallback_CardroidManager_addCarEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_addCarEmail<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_addCarEmailPtr newCallback_CardroidManager_addCarEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_addCarEmail<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_addCarEmail: public Callback_CardroidManager_addCarEmail_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const ::cardroid::data::zerocice::CarTypPrx&,
			const CT&);

	Callback_CardroidManager_addCarEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::zerocice::CardroidManagerPrx __proxy =
				::cardroid::zerocice::CardroidManagerPrx::uncheckedCast(
						__result->getProxy());
		::cardroid::data::zerocice::CarTypPrx __ret;
		try {
			__ret = __proxy->end_addCarEmail(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_CardroidManager_addCarEmailPtr newCallback_CardroidManager_addCarEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_addCarEmail<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_addCarEmailPtr newCallback_CardroidManager_addCarEmail(
		T* instance,
		void (T::*cb)(const ::cardroid::data::zerocice::CarTypPrx&, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_addCarEmail<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_removeCar: public Callback_CardroidManager_removeCar_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CardroidManager_removeCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCar<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCar<T>(instance, 0, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCar<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCar<T>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_removeCar: public Callback_CardroidManager_removeCar_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CardroidManager_removeCar(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCar<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCar<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPtr newCallback_CardroidManager_removeCar(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCar<T, CT>(instance, 0, excb,
			sentcb);
}

template<class T>
class CallbackNC_CardroidManager_removeCarPlateEmail: public Callback_CardroidManager_removeCarPlateEmail_Base,
		public ::IceInternal::OnewayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)();

	CallbackNC_CardroidManager_removeCarPlateEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb) {
	}
};

template<class T> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		const IceUtil::Handle<T>& instance, void (T::*cb)(),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCarPlateEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCarPlateEmail<T>(instance, 0,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCarPlateEmail<T>(instance, cb,
			excb, sentcb);
}

template<class T> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		T* instance, void (T::*excb)(const ::Ice::Exception&),
		void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_CardroidManager_removeCarPlateEmail<T>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT>
class Callback_CardroidManager_removeCarPlateEmail: public Callback_CardroidManager_removeCarPlateEmail_Base,
		public ::IceInternal::OnewayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(const CT&);

	Callback_CardroidManager_removeCarPlateEmail(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb) {
	}
};

template<class T, typename CT> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCarPlateEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		const IceUtil::Handle<T>& instance,
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCarPlateEmail<T, CT>(instance, 0,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		T* instance, void (T::*cb)(const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCarPlateEmail<T, CT>(instance, cb,
			excb, sentcb);
}

template<class T, typename CT> Callback_CardroidManager_removeCarPlateEmailPtr newCallback_CardroidManager_removeCarPlateEmail(
		T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_CardroidManager_removeCarPlateEmail<T, CT>(instance, 0,
			excb, sentcb);
}

}

}

#endif
