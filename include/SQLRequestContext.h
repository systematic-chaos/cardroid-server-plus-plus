#ifndef SQLREQUESTCONTEXT_H_
#define SQLREQUESTCONTEXT_H_

#include <boost/thread/thread.hpp>
#include <Ice/Config.h>
#include <Ice/Current.h>
#include <Ice/Logger.h>
#include <IceStorm/IceStorm.h>
#include <map>
#include <string>
#include <functional>
#include <vector>
#include <forward_list>
#include <unordered_map>

#include "Cardroid.h"
#include "Session.h"
#include "QueryResultI.h"
#include "QueryType.h"
#include "ICar.h"
#include "IMessage.h"
#include "IPlace.h"
#include "ITrip.h"
#include "ITripOffer.h"
#include "ITripRequest.h"
#include "IUser.h"
#include "IUserActivity.h"
#include "Util.h"

namespace std {
	template <> struct hash< ::boost::thread::id> {
		typedef size_t result_type;
		typedef ::boost::thread::id argument_type;

		size_t operator()(const ::boost::thread::id& id) const noexcept	{
			std::ostringstream os;
			os << id;
			return hash<string>()(os.str());
		}
	};
}

namespace Cardroid {
namespace Network {
namespace Server {

class QueryResultListener;
class QueryResultI;

/**
 * \class SQLRequestContext
 *
 * A SQL request context encapsulates SQL resources allocated in the
 * process of executing a request, such as the database connection,
 * and associated SQL statements.
 *
 * The request context is automatically destroyed at the end of a
 * request.
 *
 * When the request context is destroyed, the transaction is either
 * automatically commited or rolled back, depending whether the
 * request executed successfully.
 */
class SQLRequestContext: public cardroid::zerocice::CardroidManager {

private:

	// A map of threads to request contexts
	static unordered_map< ::boost::thread::id, SQLRequestContext*> _contextMap;
	static ::Ice::LoggerPtr _logger;
	static ::Cardroid::occi::StatelessConnectionPoolHolder* _pool;
	static ::IceStorm::TopicManagerPrx _topicManager;

	bool _trace = true;
	forward_list< ::Cardroid::occi::StatementHolder*> _statements;
	::Cardroid::occi::ConnectionHolderPtr _conn;
	QueryResultListener* _queryResultListener;

public:

	SQLRequestContext();

	void setQueryResultListener(const QueryResultListener& listener);
	void destroyFromDispatch(bool commit);
	void destroyInternal(bool commit);

	static SQLRequestContext& getCurrentContext();
	static void initialize(::Ice::LoggerPtr logger,
			::Cardroid::occi::StatelessConnectionPoolHolder* pool,
			IceStorm::TopicManagerPrx topicManager);

	::Cardroid::occi::StatementHolder prepareStatement(
			const ::std::string& sql);
	::Cardroid::occi::StatementHolder prepareStatement(const ::std::string& sql,
			int autoGeneratedKeys);
	void destroy(bool commit);
	void error(const ::std::string& prefix, const ::std::exception& ex);
	::oracle::occi::Statement::Status executeStatement(
			const ::std::string& sql92Style, int nParams,
			::oracle::occi::PObject* params[]);
	::oracle::occi::Statement::Status executeStatement(
			const ::std::string& sql92Style,
			::std::map< ::oracle::occi::PObject*, ::oracle::occi::Type> params);
	::oracle::occi::ResultSet* executeStatementQuery(
			const ::std::string& sql92Style, int rowsFetched, int nParams,
			::oracle::occi::PObject* params[]);
	::oracle::occi::ResultSet* executeStatementQuery(
			const ::std::string& sql92Style, int rowsFetched,
			::std::map<string, ::oracle::occi::Type> params);
	int executeStatementUpdate(const ::std::string& sql92Style, int nParams,
			::oracle::occi::PObject* params[]);
	int executeStatementUpdate(const ::std::string& sql92Style,
			::std::map< ::oracle::occi::PObject*, ::oracle::occi::Type> params);
	::oracle::occi::Statement::Status executeProcedure(
			const ::std::string& sql92Style, int nParams,
			::oracle::occi::PObject* params[]);
	::oracle::occi::Statement::Status executeProcedure(
			const ::std::string& sql92Style,
			::std::map< ::oracle::occi::PObject*, ::oracle::occi::Type> params);
	::oracle::occi::PObject* executeFunction(const ::std::string& sql92Style,
			::oracle::occi::Type resultSqlType,
			const ::std::string& resultTypeName, int nParams,
			::oracle::occi::PObject* params[]);
	::oracle::occi::PObject* executeFunction(const ::std::string& sql92Style,
			::oracle::occi::Type resultSqlType,
			const ::std::string& resultTypeName,
			::std::map< ::oracle::occi::PObject*, ::oracle::occi::Type> params);

	void getUserPlaces(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getUserPlaces(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::Place*> getUserPlacesList(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	void searchTrips(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* searchTrips(
			::Cardroid::Data::Oracle::TripRequest* tRequest,
			const ::Ice::Current& = ::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::Trip*> searchTripsList(
			::Cardroid::Data::Oracle::TripRequest* tRequest,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::TripTypPrx getTripFromId(::Ice::Int tripId,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::TripOfferTypPrx getTripOfferFromId(
			::Ice::Int tripId, const ::Ice::Current& current =
					::Ice::Current());
	::cardroid::data::zerocice::TripRequestTypPrx getTripRequestFromId(
			::Ice::Int tripId, const ::Ice::Current& current =
					::Ice::Current());
	void joinTrip(const ::cardroid::data::zerocice::TripOfferTypPrx& trip,
			const ::cardroid::data::zerocice::UserTypPrx& passenger,
			::Ice::Int nSeats, const ::Ice::Current& current =
					::Ice::Current());
	::cardroid::data::zerocice::UserActivityTypPrx joinTrip(
			::Cardroid::Data::Oracle::TripOffer* trip,
			::Cardroid::Data::Oracle::User* passenger, int nSeats,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::TripOfferTypPrx organizeTrip(
			const ::cardroid::data::zerocice::TripRequestTypPrx& tripRequest,
			const ::cardroid::data::zerocice::TripOfferTypPtr& tripOffer,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::UserActivityTypPrx organizeTrip(
			::Cardroid::Data::Oracle::TripRequest* tripRequest,
			::Cardroid::Data::Oracle::TripOffer* tripOffer,
			const ::Ice::Current& = ::Ice::Current());
	void getUserTrips(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getUserTrips(::Cardroid::Data::Oracle::User* usr,
			const ::Ice::Current& current = ::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::Trip*> getUserTripsList(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());

	void getPassengerTrips(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getPassengerTrips(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::TripOffer*> getPassengerTripsList(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	bool userTripRegistered(const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::cardroid::data::zerocice::TripTypPrx& trip,
			const ::Ice::Current& current = ::Ice::Current());
	bool userTripRegistered(::Cardroid::Data::Oracle::User* usr,
			::Cardroid::Data::Oracle::Trip* trip,
			const ::Ice::Current& current = ::Ice::Current());
	::Ice::Double calculatePriceEstimation(
			::cardroid::data::zerocice::Fuel fuel, ::Ice::Int distance,
			const ::Ice::Current& current = ::Ice::Current()) const;
	::cardroid::data::zerocice::TripOfferTypPrx newTripOffer(
			const ::cardroid::data::zerocice::TripOfferTypPtr& tOffer,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::TripRequestTypPrx newTripRequest(
			const ::cardroid::data::zerocice::TripRequestTypPtr& tRequest,
			const ::Ice::Current& current = ::Ice::Current());
	void getMessageTalksSpeakers(
			const ::cardroid::data::zerocice::UserTypPrx& usr, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getMessageTalksSpeakers(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::User*> getMessageTalksSpeakersList(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	void getMessageTalks(const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2, ::Ice::Int n,
			::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getMessageTalks(
			::Cardroid::Data::Oracle::User* usr1,
			::Cardroid::Data::Oracle::User* usr2,
			const ::Ice::Current& current = ::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::Message*> getMessageTalksList(
			::Cardroid::Data::Oracle::User* usr1,
			::Cardroid::Data::Oracle::User* usr2,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::MessageTypPrx newMessage(
			const ::cardroid::data::zerocice::UserTypPrx& usr1,
			const ::cardroid::data::zerocice::UserTypPrx& usr2,
			const ::std::string& message, const ::Ice::Current& current =
					::Ice::Current());
	::Cardroid::Data::Oracle::Message* newMessage(
			::Cardroid::Data::Oracle::User* usr1,
			::Cardroid::Data::Oracle::User* usr2, const ::std::string& message,
			const ::Ice::Current& current = ::Ice::Current());
	void getUserActivity(const ::cardroid::data::zerocice::UserTypPrx& usr,
			::Ice::Int n, ::cardroid::ResultSeq& first, ::Ice::Int& nrows,
			::cardroid::QueryResultPrx& result, const ::Ice::Current& current =
					::Ice::Current());
	::oracle::occi::ResultSet* getUserActivity(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	::std::vector< ::Cardroid::Data::Oracle::UserActivity*> getUserActivityList(
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	::cardroid::data::zerocice::UserTypPrx getUserFromEmail(
			const ::std::string& email, const ::Ice::Current& current =
					::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx getCarFromPlate(
			const ::std::string& plate,
			const ::cardroid::data::zerocice::UserTypPrx& owner,
			const ::Ice::Current& current = ::Ice::Current());
	::Cardroid::Data::Oracle::Car* getCarFromPlate(const ::std::string& plate,
			::Cardroid::Data::Oracle::User* owner,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx getCarFromPlateEmail(
			const ::std::string& plate, const ::std::string& ownerEmail,
			const ::Ice::Current& current = ::Ice::Current());
	::Cardroid::Data::Oracle::Car* getCarFromPlate(
			const ::std::string& plate, const ::std::string& ownerEmail,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::UserTypPrx updateUserData(
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx updateCarData(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPtr& usr,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx updateCarDataEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Current& current =
					::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx addCar(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Current& current = ::Ice::Current());
	::cardroid::data::zerocice::CarTypPrx addCarEmail(
			const ::cardroid::data::zerocice::CarTypPtr& car,
			const ::std::string& usrEmail, const ::Ice::Current& current =
					::Ice::Current());
	void removeCar(const ::cardroid::data::zerocice::CarTypPrx& car,
			const ::cardroid::data::zerocice::UserTypPrx& usr,
			const ::Ice::Current& current = ::Ice::Current());
	void removeCar(::Cardroid::Data::Oracle::Car* car,
			::Cardroid::Data::Oracle::User* usr, const ::Ice::Current& current =
					::Ice::Current());
	void removeCarPlateEmail(const ::std::string& plate,
			const ::std::string& ownerEmail, const ::Ice::Current& current =
					::Ice::Current());

	static ::std::vector< ::oracle::occi::PObject*> resultSetToList(
			::oracle::occi::ResultSet* rset);

private:

	void notifyUserActivity(
			::cardroid::data::zerocice::UserActivityTypPrx activity);
	void sendMessage(::cardroid::data::zerocice::MessageTypPrx msg);
	::cardroid::network::zerocice::CardroidEventStormPrx retrieveTopicPublisher(
			const string& name);
};

class QueryResultListener {

public:

	virtual void add(const ::cardroid::QueryResultPrx& proxy,
			QueryResultI* impl, QueryType queryType) = 0;

protected:

	virtual ~QueryResultListener() {
	}
};
}
}
}

#endif /* SQLREQUESTCONTEXT_H_ */
