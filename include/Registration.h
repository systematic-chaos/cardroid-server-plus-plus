// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Registration.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Registration_h__
#define __Registration_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy {

namespace cardroid {

namespace data {

namespace zerocice {

class UserTyp;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::UserTyp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::cardroid::data::zerocice::UserTyp*);

}

}

namespace network {

namespace zerocice {

class Registration;
void __read(::IceInternal::BasicStream*,
		::IceInternal::ProxyHandle<
				::IceProxy::cardroid::network::zerocice::Registration>&);
::IceProxy::Ice::Object* upCast(
		::IceProxy::cardroid::network::zerocice::Registration*);

}

}

}

}

namespace cardroid {

namespace data {

namespace zerocice {

class UserTyp;
bool operator==(const UserTyp&, const UserTyp&);
bool operator<(const UserTyp&, const UserTyp&);
::Ice::Object* upCast(::cardroid::data::zerocice::UserTyp*);
typedef ::IceInternal::Handle< ::cardroid::data::zerocice::UserTyp> UserTypPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::cardroid::data::zerocice::UserTyp> UserTypPrx;
void __patch(UserTypPtr&, const ::Ice::ObjectPtr&);

}

}

namespace network {

namespace zerocice {

class Registration;
bool operator==(const Registration&, const Registration&);
bool operator<(const Registration&, const Registration&);
::Ice::Object* upCast(::cardroid::network::zerocice::Registration*);
typedef ::IceInternal::Handle< ::cardroid::network::zerocice::Registration> RegistrationPtr;
typedef ::IceInternal::ProxyHandle<
		::IceProxy::cardroid::network::zerocice::Registration> RegistrationPrx;
void __patch(RegistrationPtr&, const ::Ice::ObjectPtr&);

}

}

}

namespace cardroid {

namespace network {

namespace zerocice {

class RegistrationDeniedException: public ::Ice::UserException {
public:

	RegistrationDeniedException() {
	}
	explicit RegistrationDeniedException(const ::std::string&);
	virtual ~RegistrationDeniedException() throw ();

	virtual ::std::string ice_name() const;
	virtual RegistrationDeniedException* ice_clone() const;
	virtual void ice_throw() const;

	::std::string reason;

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::UserException::__writeImpl;
	using ::Ice::UserException::__readImpl;
#endif
};

static RegistrationDeniedException __RegistrationDeniedException_init;

}

}

}

namespace Ice {
template<>
struct StreamableTraits<
		::cardroid::network::zerocice::RegistrationDeniedException> {
	static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace cardroid {

namespace network {

namespace zerocice {

class Callback_Registration_registerNewUser_Base: virtual public ::IceInternal::CallbackBase {
};
typedef ::IceUtil::Handle<Callback_Registration_registerNewUser_Base> Callback_Registration_registerNewUserPtr;

}

}

}

namespace IceProxy {

namespace cardroid {

namespace network {

namespace zerocice {

class Registration: virtual public ::IceProxy::Ice::Object {
public:

	bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password) {
		return registerNewUser(newUser, password, 0);
	}
	bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx) {
		return registerNewUser(newUser, password, &__ctx);
	}
#ifdef ICE_CPP11
	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_registerNewUser(newUser, password, 0, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_registerNewUser(newUser, password, 0,
				::Ice::newCallback(__completed, __sent), 0);
	}
	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception =
					::IceInternal::Function<void(const ::Ice::Exception&)>(),
			const ::IceInternal::Function<void(bool)>& __sent =
					::IceInternal::Function<void(bool)>()) {
		return __begin_registerNewUser(newUser, password, &__ctx, __response,
				__exception, __sent);
	}
	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __completed,
			const ::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>& __sent =
					::IceInternal::Function<void(const ::Ice::AsyncResultPtr&)>()) {
		return begin_registerNewUser(newUser, password, &__ctx,
				::Ice::newCallback(__completed, __sent));
	}

private:

	::Ice::AsyncResultPtr __begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context* __ctx,
			const ::IceInternal::Function<void(bool)>& __response,
			const ::IceInternal::Function<void(const ::Ice::Exception&)>& __exception,
			const ::IceInternal::Function<void(bool)>& __sent) {
		class Cpp11CB: public ::IceInternal::Cpp11FnCallbackNC {
		public:

			Cpp11CB(const ::std::function<void(bool)>& responseFunc,
					const ::std::function<void(const ::Ice::Exception&)>& exceptionFunc,
					const ::std::function<void(bool)>& sentFunc) :
					::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc), _response(
							responseFunc) {
				CallbackBase::checkCallback(true,
						responseFunc || exceptionFunc != nullptr);
			}

			virtual void __completed(
					const ::Ice::AsyncResultPtr& __result) const {
				::cardroid::network::zerocice::RegistrationPrx __proxy =
						::cardroid::network::zerocice::RegistrationPrx::uncheckedCast(
								__result->getProxy());
				bool __ret;
				try {
					__ret = __proxy->end_registerNewUser(__result);
				} catch (::Ice::Exception& ex) {
					Cpp11FnCallbackNC::__exception(__result, ex);
					return;
				}
				if (_response != nullptr) {
					_response(__ret);
				}
			}

		private:

			::std::function<void(bool)> _response;
		};
		return begin_registerNewUser(newUser, password, __ctx,
				new Cpp11CB(__response, __exception, __sent));
	}

public:
#endif

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password) {
		return begin_registerNewUser(newUser, password, 0,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx) {
		return begin_registerNewUser(newUser, password, &__ctx,
				::IceInternal::__dummyCallback, 0);
	}

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_registerNewUser(newUser, password, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx,
			const ::Ice::CallbackPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_registerNewUser(newUser, password, &__ctx, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password,
			const ::cardroid::network::zerocice::Callback_Registration_registerNewUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_registerNewUser(newUser, password, 0, __del, __cookie);
	}

	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr& newUser,
			const ::std::string& password, const ::Ice::Context& __ctx,
			const ::cardroid::network::zerocice::Callback_Registration_registerNewUserPtr& __del,
			const ::Ice::LocalObjectPtr& __cookie = 0) {
		return begin_registerNewUser(newUser, password, &__ctx, __del, __cookie);
	}

	bool end_registerNewUser(const ::Ice::AsyncResultPtr&);

private:

	bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr&,
			const ::std::string&, const ::Ice::Context*);
	::Ice::AsyncResultPtr begin_registerNewUser(
			const ::cardroid::data::zerocice::UserTypPtr&, const ::std::string&,
			const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&,
			const ::Ice::LocalObjectPtr& __cookie = 0);

public:

	::IceInternal::ProxyHandle<Registration> ice_context(
			const ::Ice::Context& __context) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_context(
				__context).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_adapterId(
			const ::std::string& __id) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_adapterId(
				__id).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_endpoints(
			const ::Ice::EndpointSeq& __endpoints) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_endpoints(
				__endpoints).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_locatorCacheTimeout(
			int __timeout) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_connectionCached(
			bool __cached) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_connectionCached(
				__cached).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_endpointSelection(
			::Ice::EndpointSelectionType __est) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_endpointSelection(
				__est).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_secure(bool __secure) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_secure(
				__secure).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_preferSecure(
			bool __preferSecure) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_preferSecure(
				__preferSecure).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_router(
			const ::Ice::RouterPrx& __router) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_router(
				__router).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_locator(
			const ::Ice::LocatorPrx& __locator) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_locator(
				__locator).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_collocationOptimized(
			bool __co) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_collocationOptimized(
				__co).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_twoway() const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_twoway().get());
	}

	::IceInternal::ProxyHandle<Registration> ice_oneway() const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_oneway().get());
	}

	::IceInternal::ProxyHandle<Registration> ice_batchOneway() const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_batchOneway().get());
	}

	::IceInternal::ProxyHandle<Registration> ice_datagram() const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_datagram().get());
	}

	::IceInternal::ProxyHandle<Registration> ice_batchDatagram() const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
	}

	::IceInternal::ProxyHandle<Registration> ice_compress(
			bool __compress) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_compress(
				__compress).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_timeout(int __timeout) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_timeout(
				__timeout).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_connectionId(
			const ::std::string& __id) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_connectionId(
				__id).get());
	}

	::IceInternal::ProxyHandle<Registration> ice_encodingVersion(
			const ::Ice::EncodingVersion& __v) const {
		return dynamic_cast<Registration*>(::IceProxy::Ice::Object::ice_encodingVersion(
				__v).get());
	}

	static const ::std::string& ice_staticId();

private:

	virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
	virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
	virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

}

namespace IceDelegate {

namespace cardroid {

namespace network {

namespace zerocice {

class Registration: virtual public ::IceDelegate::Ice::Object {
public:

	virtual bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr&,
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&) = 0;
};

}

}

}

}

namespace IceDelegateM {

namespace cardroid {

namespace network {

namespace zerocice {

class Registration: virtual public ::IceDelegate::cardroid::network::zerocice::Registration,
		virtual public ::IceDelegateM::Ice::Object {
public:

	virtual bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr&,
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

}

}

}

}

namespace IceDelegateD {

namespace cardroid {

namespace network {

namespace zerocice {

class Registration: virtual public ::IceDelegate::cardroid::network::zerocice::Registration,
		virtual public ::IceDelegateD::Ice::Object {
public:

	virtual bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr&,
			const ::std::string&, const ::Ice::Context*,
			::IceInternal::InvocationObserver&);
};

}

}

}

}

namespace cardroid {

namespace network {

namespace zerocice {

class Registration: virtual public ::Ice::Object {
public:

	typedef RegistrationPrx ProxyType;
	typedef RegistrationPtr PointerType;

	virtual bool ice_isA(const ::std::string&, const ::Ice::Current& =
			::Ice::Current()) const;
	virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& =
			::Ice::Current()) const;
	virtual const ::std::string& ice_id(const ::Ice::Current& =
			::Ice::Current()) const;
	static const ::std::string& ice_staticId();

	virtual bool registerNewUser(const ::cardroid::data::zerocice::UserTypPtr&,
			const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
	::Ice::DispatchStatus ___registerNewUser(::IceInternal::Incoming&,
			const ::Ice::Current&);

	virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&,
			const ::Ice::Current&);

protected:
	virtual void __writeImpl(::IceInternal::BasicStream*) const;
	virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
	using ::Ice::Object::__writeImpl;
	using ::Ice::Object::__readImpl;
#endif
};

inline bool operator==(const Registration& l, const Registration& r) {
	return static_cast<const ::Ice::Object&>(l)
			== static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Registration& l, const Registration& r) {
	return static_cast<const ::Ice::Object&>(l)
			< static_cast<const ::Ice::Object&>(r);
}

}

}

}

namespace cardroid {

namespace network {

namespace zerocice {

template<class T>
class CallbackNC_Registration_registerNewUser: public Callback_Registration_registerNewUser_Base,
		public ::IceInternal::TwowayCallbackNC<T> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&);
	typedef void (T::*Sent)(bool);
	typedef void (T::*Response)(bool);

	CallbackNC_Registration_registerNewUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::network::zerocice::RegistrationPrx __proxy =
				::cardroid::network::zerocice::RegistrationPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_registerNewUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::CallbackNC<T>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
		}
	}

	Response response;
};

template<class T> Callback_Registration_registerNewUserPtr newCallback_Registration_registerNewUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_Registration_registerNewUser<T>(instance, cb, excb,
			sentcb);
}

template<class T> Callback_Registration_registerNewUserPtr newCallback_Registration_registerNewUser(
		T* instance, void (T::*cb)(bool),
		void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0) {
	return new CallbackNC_Registration_registerNewUser<T>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT>
class Callback_Registration_registerNewUser: public Callback_Registration_registerNewUser_Base,
		public ::IceInternal::TwowayCallback<T, CT> {
public:

	typedef IceUtil::Handle<T> TPtr;

	typedef void (T::*Exception)(const ::Ice::Exception&, const CT&);
	typedef void (T::*Sent)(bool, const CT&);
	typedef void (T::*Response)(bool, const CT&);

	Callback_Registration_registerNewUser(const TPtr& obj, Response cb,
			Exception excb, Sent sentcb) :
			::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(
					cb) {
	}

	virtual void __completed(const ::Ice::AsyncResultPtr& __result) const {
		::cardroid::network::zerocice::RegistrationPrx __proxy =
				::cardroid::network::zerocice::RegistrationPrx::uncheckedCast(
						__result->getProxy());
		bool __ret;
		try {
			__ret = __proxy->end_registerNewUser(__result);
		} catch (::Ice::Exception& ex) {
			::IceInternal::Callback<T, CT>::__exception(__result, ex);
			return;
		}
		if (response) {
			(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret,
					CT::dynamicCast(__result->getCookie()));
		}
	}

	Response response;
};

template<class T, typename CT> Callback_Registration_registerNewUserPtr newCallback_Registration_registerNewUser(
		const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_Registration_registerNewUser<T, CT>(instance, cb, excb,
			sentcb);
}

template<class T, typename CT> Callback_Registration_registerNewUserPtr newCallback_Registration_registerNewUser(
		T* instance, void (T::*cb)(bool, const CT&),
		void (T::*excb)(const ::Ice::Exception&, const CT&),
		void (T::*sentcb)(bool, const CT&) = 0) {
	return new Callback_Registration_registerNewUser<T, CT>(instance, cb, excb,
			sentcb);
}

}

}

}

#endif
